<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Sam Agnew &#8211; Twilio Cloud Communications Blog</title>
	<atom:link href="https://twilioinc.wpengine.com/author/samagnew/feed" rel="self" type="application/rss+xml" />
	<link>https://twilioinc.wpengine.com</link>
	<description></description>
	<lastBuildDate>Fri, 13 Jan 2017 19:24:02 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.2</generator>

<image>
	<url>https://twilioinc.wpengine.com/wp-content/uploads/2015/09/cropped-favicon_1141-32x32.png</url>
	<title>Sam Agnew &#8211; Twilio Cloud Communications Blog</title>
	<link>https://twilioinc.wpengine.com</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Getting started with Sanic: the asynchronous, uvloop based web framework for Python 3.5+</title>
		<link>https://twilioinc.wpengine.com/2016/12/getting-started-with-sanic-the-asynchronous-uvloop-based-web-framework-for-python-3-5.html</link>
		<comments>https://twilioinc.wpengine.com/2016/12/getting-started-with-sanic-the-asynchronous-uvloop-based-web-framework-for-python-3-5.html#respond</comments>
		<pubDate>Tue, 20 Dec 2016 18:00:10 +0000</pubDate>
		<dc:creator><![CDATA[Sam Agnew]]></dc:creator>
				<category><![CDATA[Code, Tutorials and Hacks]]></category>
		<category><![CDATA[Python]]></category>
		<category><![CDATA[Python 3.5]]></category>
		<category><![CDATA[sanic]]></category>
		<category><![CDATA[twilio sms]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=19322</guid>
		<description><![CDATA[<p>uvloop has been making waves in the Python world lately as a blazingly fast drop-in for asyncio&#8217;s default event loop. Sanic is a Flask-like, uvloop-based web framework that&#8217;s written to go fast. It is also named after the popular Sanic Internet meme, a poorly drawn version of Sonic the Hedgehog. Sanic is made for Python 3.5 . The framework allows you to take advantage of async/await syntax for defining... <a class="read-more" href="https://twilioinc.wpengine.com/2016/12/getting-started-with-sanic-the-asynchronous-uvloop-based-web-framework-for-python-3-5.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2016/12/getting-started-with-sanic-the-asynchronous-uvloop-based-web-framework-for-python-3-5.html">Getting started with Sanic: the asynchronous, uvloop based web framework for Python 3.5+</a></p>]]></description>
				<content:encoded><![CDATA[<p><a href="https://github.com/MagicStack/uvloop">uvloop</a> has been making waves in the Python world lately as a blazingly fast drop-in for asyncio&#8217;s default event loop. <a href="https://github.com/channelcat/sanic">Sanic</a> is a Flask-like, uvloop-based web framework that&#8217;s written to <a href="https://www.youtube.com/watch?v=X7DnyP4dqsw">go fast</a>. It is also named after the popular Sanic Internet meme, a <a href="https://www.youtube.com/watch?v=0uy7nCQItiQ">poorly drawn version of Sonic the Hedgehog</a>.</p>
<p>Sanic is made for Python 3.5 . The framework allows you to take advantage of async/await syntax for defining asynchronous functions. With this, you can write async applications in Python similar to how you would write them in Node.js.</p>
<h3 id="h.vczhc4jqkmt3" class="c1">Responding to basic HTTP requests</h3>
<p>The &#8220;Hello World&#8221; example with Sanic looks like this:</p><pre class="crayon-plain-tag">from sanic import Sanic
from sanic.response import text


app = Sanic()


@app.route("/")
async def hello(request):
    return text("Hello World!")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)</pre><p>Create a new directory for this project, and paste that code into a new file called <code>app.py</code>. In order to run this code, you&#8217;ll also want to create a <a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/">virtual environment</a> (make sure to use Python 3 when creating the environment) and run the following command to install Sanic:</p><pre class="crayon-plain-tag">pip install sanic</pre><p>And run the application:</p><pre class="crayon-plain-tag">python app.py</pre><p>And visit <a href="http://localhost:8000">http://localhost:8000</a> to see &#8220;Hello World!&#8221; on the page.</p>
<p>&#8220;Hello World&#8221; is nice, but let&#8217;s see what else we can do. In this next example, we&#8217;ll switch things up a bit to figure out how to work with query arguments in the request data. Change the code in <code>app.py</code> to the following:</p><pre class="crayon-plain-tag">from sanic import Sanic
from sanic.response import text


app = Sanic()


@app.route("/")
async def hello(request):
    # request.args is a dict where each value is an array.
    return text("Hello {}".format(request.args["name"][0]))

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)</pre><p>Run the code again and this time visit <a href="http://localhost:8000/?name=Sam">http://localhost:8000/?name=Sam</a>. Feel free to replace &#8220;Sam&#8221; with your own name. When you visit the web page, it should be greeting you by name.</p>
<h3 id="h.8vlltydlif7v" class="c1">Responding to text messages</h3>
<p>Next we can use Sanic to do something useful. We&#8217;ll write code that uses Twilio to respond to a text message. You&#8217;ll need a Twilio account for this, but don&#8217;t worry you can <a href="https://www.twilio.com/try-twilio">sign up for free</a>.</p>
<p>When someone texts your Twilio number, <a href="https://www.twilio.com/docs/api/twiml/sms/twilio_request">Twilio makes an HTTP request</a> to your app. Details about that SMS are passed via the request parameters. Twilio expects an HTTP response from your web app in the form of <a href="https://www.twilio.com/docs/api/twiml">TwiML</a>, which is a set of simple XML tags used to tell Twilio what to do next.</p>
<p>Replace the code in <code>app.py</code> again with the following code to quickly respond to a text message:</p><pre class="crayon-plain-tag">from sanic import Sanic
from sanic.response import text


app = Sanic()


@app.route("/sms")
async def hello(request):
    # request.form is a dict where each value is an array.
    message_body = request.form["Body"][0]

    # Since we are just responding with a message, we can return a String
    return text("You said: {}".format(message_body))

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)</pre><p>All you need to do is <a href="https://www.twilio.com/console/phone-numbers/search">grab a Twilio number</a> or use a phone number that comes with your trial account and configure it to send <code>POST</code> requests to your app whenever you receive a text message.</p>
<p>Our app needs a publicly accessible URL. To avoid having to deploy every time we make a change, we&#8217;ll use a nifty tool called <a href="https://www.twilio.com/blog/2015/09/6-awesome-reasons-to-use-ngrok-when-testing-webhooks.html">ngrok</a> to open a tunnel to our local machine.</p>
<p>Ngrok generates a custom forwarding URL that we will use to tell Twilio where to find our application. <a href="https://ngrok.com/download">Download ngrok</a> and run it in your terminal on port 8000</p><pre class="crayon-plain-tag">./ngrok http 8000</pre><p>Next we need to point a phone number at our app. Open the phone number configuration screen in your <a href="http://twilio.com/console">Twilio console</a>. Scroll down to the &#8220;a message comes in&#8221; field. Before entering your URL you should see:</p>
<p><img class="&quot; aligncenter" style="width: 600.00px; height: 186.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/12/hPHPlOfLmVM56950uneB_1SZ3udWYiVLhtrz8mkhTK96lhuAt40qjLL81r_0q-hEcsL31GulmLyI5hrf0KFJQDtSsOAyptnrIUcGySCLEL_Bis4md9q2Sun3Fy5mW-G9xJJvFSi2.png" alt="message-comes-in.png" /></p>
<p>Punch in the URL for our message route that was generated by ngrok. It should look like <code>http://your-ngrok-url.ngrok.io/sms</code>.</p>
<p>Click save, make sure your application is running and text your number to get a response.</p>
<h3 id="h.cmh6bve3wox4" class="c1">Rollin&#8217; around at the speed of sound</h3>
<p>That should be all you need to get started building apps with Sanic. You are officially part of the revolution of <a href="https://www.youtube.com/watch?v=Eo_gJwXxshQ">meme-driven development</a>.</p>
<p>Of course, Sanic is a brand new framework so expect improvements and changes in the near future. You can even <a href="https://github.com/channelcat/sanic">contribute to its open source repository</a> and help build it yourself.</p>
<p>Feel free to drop me a line if you have any question or just want to show off what you built:</p>
<ul style="padding-left: 36px;">
<li>Email: sagnew@twilio.com</li>
<li>Twitter: <a href="http://twitter.com/sagnewshreds">@Sagnewshreds</a></li>
<li>Github: <a href="https://github.com/sagnew">Sagnew</a></li>
<li>Twitch (streaming live code): <a href="http://www.twitch.tv/sagnewshreds">Sagnewshreds</a></li>
</ul>
<p><a href="https://twilioinc.wpengine.com/2016/12/getting-started-with-sanic-the-asynchronous-uvloop-based-web-framework-for-python-3-5.html">Getting started with Sanic: the asynchronous, uvloop based web framework for Python 3.5+</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2016/12/getting-started-with-sanic-the-asynchronous-uvloop-based-web-framework-for-python-3-5.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>How to Hang Up Currently Active Twilio Phone Calls with Python</title>
		<link>https://twilioinc.wpengine.com/2016/11/how-to-hang-up-currently-active-twilio-phone-calls-with-python.html</link>
		<comments>https://twilioinc.wpengine.com/2016/11/how-to-hang-up-currently-active-twilio-phone-calls-with-python.html#comments</comments>
		<pubDate>Wed, 23 Nov 2016 19:32:40 +0000</pubDate>
		<dc:creator><![CDATA[Sam Agnew]]></dc:creator>
				<category><![CDATA[Code, Tutorials and Hacks]]></category>
		<category><![CDATA[Python]]></category>
		<category><![CDATA[twilio voice]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=19199</guid>
		<description><![CDATA[<p>In case you found this in an emergency, here is all of the code you need to hang up all currently in progress, ringing or queued phone calls: [crayon-58795023405d8393062725/] In order for this to work, make sure you grab your Account SID and Auth Token from your Twilio Console and set them as environment variables: [crayon-58795023405e8085346928/] Why would I need to do this? Sometimes when testing your code... <a class="read-more" href="https://twilioinc.wpengine.com/2016/11/how-to-hang-up-currently-active-twilio-phone-calls-with-python.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2016/11/how-to-hang-up-currently-active-twilio-phone-calls-with-python.html">How to Hang Up Currently Active Twilio Phone Calls with Python</a></p>]]></description>
				<content:encoded><![CDATA[<p>In case you found this in an emergency, here is all of the code you need to hang up all currently in progress, ringing or queued phone calls:
</p>
<p></p><pre class="crayon-plain-tag">from twilio.rest import TwilioRestClient
from twilio.rest.resources import Call


client = TwilioRestClient()

for call in client.calls.iter(status=Call.QUEUED):
    call.hangup()

for call in client.calls.iter(status=Call.RINGING):
    call.hangup()

for call in client.calls.iter(status=Call.IN_PROGRESS):
    call.hangup()</pre><p>
<p>
In order for this to work, make sure you grab your Account SID and Auth Token from your <a href="https://www.twilio.com/console">Twilio Console</a> and set them as environment variables:</p>
<p></p><pre class="crayon-plain-tag">export TWILIO_ACCOUNT_SID="YOUR_ACCOUNT_SID"
export TWILIO_AUTH_TOKEN="YOUR_AUTH_TOKEN"</pre><p></p>
<h3 class="c1 c3" id="h.q6htl0qnz608">Why would I need to do this?</h3>
<p>Sometimes when testing your code to <a href="https://www.twilio.com/docs/api/rest/making-calls">make phone calls</a> with Twilio, you can end up accidentally making too many calls. This situation has happened to me many times. As my friend Brodan said in a <a href="https://brodan.biz/blog/twilio-hangup-all-calls/">similar blog post</a>: &#8220;Making too many calls too quickly is dangerous because it can use up a lot of Twilio credit very quickly or get your account suspended due to unintentional spam.&#8221;</p>
<p>Let&#8217;s take this code and turn it into a shell command that we can run in the terminal whenever too many phone calls are made unintentionally.</p>
<h3 class="c1 c3" id="h.5q2h0uovv95l">Setting up our environment</h3>
<p>To separate dependencies from other Python apps running on your machine, we will need a virtual environment. I love using <a href="https://virtualenvwrapper.readthedocs.io/en/latest/">Virtualenvwrapper</a> because it makes working with virtual environments simple. </p>
<p>Install it with the following terminal command:
</p>
<p></p><pre class="crayon-plain-tag">pip install virtualenvwrapper</pre><p>Now create a directory to keep all of your virtual environments, and set this as an environment variable for Virtualenvwrapper to use. I created a directory called <code>Envs</code> in my home directory:
</p>
<p></p><pre class="crayon-plain-tag">export WORKON_HOME=~/Envs
mkdir -p $WORKON_HOME
source /usr/local/bin/virtualenvwrapper.sh</pre><p></p>
<p>Add that last line to your <code>.bashrc</code> or other shell startup file, to make sure that virtualenvwrapper works every time you need to use it. Otherwise you will have to run it manually for each new terminal session.</p>
<p>With <code>virtualenvwrapper</code> installed, create a virtual environment:
</p>
<p></p><pre class="crayon-plain-tag">mkvirtualenv kill_calls</pre><p>And install Twilio inside of that virtual environment:
</p>
<p></p><pre class="crayon-plain-tag">pip install twilio</pre><p>Now add this code to a file called <code>kill_calls.py</code>:
</p>
<p></p><pre class="crayon-plain-tag">from twilio.rest import TwilioRestClient
from twilio.rest.resources import Call


client = TwilioRestClient()

for call in client.calls.iter(status=Call.QUEUED):
    call.hangup()

for call in client.calls.iter(status=Call.RINGING):
    call.hangup()

for call in client.calls.iter(status=Call.IN_PROGRESS):
    call.hangup()</pre><p>
<p>
You can run this script when you need to hang up Twilio phone calls. Think of it as your panic button to avoid <a href="https://www.youtube.com/watch?v=UZ8xce9HtD8">rickrolling</a> 200 people while they are trying to sleep.</p>
<h3 class="c1 c3" id="h.d1zsjo5eopua">How do I know this works?</h3>
<p>We can test this script out by writing some code that will make a bunch of phone calls. For this test you will need a Twilio phone number. You can <a href="https://www.twilio.com/console/phone-numbers/search">buy a phone number here</a>. </p>
<p>Create and open a file called <code>make_calls.py</code> and add the following code:
</p>
<p></p><pre class="crayon-plain-tag"># Download the Python helper library from twilio.com/docs/python/install
from twilio.rest import TwilioRestClient

# Instantiate a rest client object
# This grabs Twilio credentials from environment variables
client = TwilioRestClient()

# Make 10 phone calls
for i in range(10):
    call = client.calls.create(url="http://demo.twilio.com/docs/voice.xml",
        to="YOUR_PHONE_NUMBER",
        from_="YOUR_TWILIO_NUMBER")
    print(call.sid)</pre><p>
<p>
Now run that code first (don&#8217;t forget to replace your phone number and Twilio number) and then the code you wrote to kill all of the calls:
</p>
<p></p><pre class="crayon-plain-tag">python make_calls.py
python kill_calls.py</pre><p></p>
<h3 class="c1 c3" id="h.tkmbmsvjae5k">You&#8217;ll never have to write this code again</h3>
<p>Manually running this Python script every time you mistakenly make 500 phone calls to your users would be tedious and waste precious time. We can turn this program into a shell script that you can use at the drop of a hat. </p>
<p>Open your <code>.bashrc</code>, or other shell startup file, again, and add the following line:
</p>
<p></p><pre class="crayon-plain-tag">alias kill_calls="workon kill_calls; python ~/Path/to/kill_calls.py; deactivate"</pre><p>Don&#8217;t forget to use the correct path to <code>kill_calls.py</code>. This will give you a shell command that you can run any time instead of scrambling to find the right code. </p>
<p>You&#8217;ll also want to make sure you have your Twilio authentication credentials set as environment variables permanently by adding the export lines we used before to your <code>.bashrc</code>:
</p>
<p></p><pre class="crayon-plain-tag">export TWILIO_ACCOUNT_SID="YOUR_ACCOUNT_SID"
export TWILIO_AUTH_TOKEN="YOUR_AUTH_TOKEN"</pre><p>
<p>
Hopefully, you won&#8217;t have any horror stories about accidentally calling your users in the middle of the night while testing code. Feel free to reach out for any questions or to share your own stories:
</p>
<ul style="padding-left: 36px";>
<li>Email: sagnew@twilio.com</li>
<li>
Twitter: <a href="http://twitter.com/sagnewshreds">@Sagnewshreds</a>
</li>
<li>
Github: <a href="https://github.com/sagnew">Sagnew</a>
</li>
<li>
Twitch (streaming live code): <a href="http://www.twitch.tv/sagnewshreds">Sagnewshreds</a>
</li>
</ul>
<p><a href="https://twilioinc.wpengine.com/2016/11/how-to-hang-up-currently-active-twilio-phone-calls-with-python.html">How to Hang Up Currently Active Twilio Phone Calls with Python</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2016/11/how-to-hang-up-currently-active-twilio-phone-calls-with-python.html/feed</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Getting Started with Swift Package Manager</title>
		<link>https://twilioinc.wpengine.com/2016/10/getting-started-with-swift-package-manager.html</link>
		<comments>https://twilioinc.wpengine.com/2016/10/getting-started-with-swift-package-manager.html#respond</comments>
		<pubDate>Thu, 27 Oct 2016 19:14:27 +0000</pubDate>
		<dc:creator><![CDATA[Sam Agnew]]></dc:creator>
				<category><![CDATA[Code, Tutorials and Hacks]]></category>
		<category><![CDATA[iOS]]></category>
		<category><![CDATA[Swift]]></category>
		<category><![CDATA[Swift Package Manager]]></category>
		<category><![CDATA[SwiftyJSON]]></category>
		<category><![CDATA[Xcode]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=19033</guid>
		<description><![CDATA[<p>When building iOS applications with Swift, you often need to use third party libraries as dependencies to avoid rewriting code that other developers have already created and shared. Swift Package Manager (SwiftPM) is a command-line tool for building, testing and managing Swift project dependencies. We will create a very basic Swift command line program that will parse some JSON using the popular SwiftyJSON framework to learn how to... <a class="read-more" href="https://twilioinc.wpengine.com/2016/10/getting-started-with-swift-package-manager.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2016/10/getting-started-with-swift-package-manager.html">Getting Started with Swift Package Manager</a></p>]]></description>
				<content:encoded><![CDATA[<p>When building iOS applications with Swift, you often need to use third party libraries as dependencies to avoid rewriting code that other developers have already created and shared. <a href="https://swift.org/package-manager/">Swift Package Manager</a> (SwiftPM) is a command-line tool for building, testing and managing Swift project dependencies.</p>
<p>We will create a very basic Swift command line program that will parse some JSON using the popular <a href="https://github.com/SwiftyJSON/SwiftyJSON">SwiftyJSON</a> framework to learn how to work with SwiftPM.</p>
<h3 class="c2 c6" id="h.b0y8ay70k4d5">Making sure you have the right tools</h3>
<p>You will need <a href="https://developer.apple.com/xcode/downloads/">Xcode</a> 8.0 or greater and Swift 3.0 or greater to use Swift Package Manager on OS X. Swift 3 is also <a href="https://swift.org/download/#releases">available on Linux</a>.</p>
<p>To find out which version of Swift you’re running, enter the following command in your terminal:
</p>
<p></p><pre class="crayon-plain-tag">swift --version</pre><p></p>
<h3 class="c2 c6" id="h.xuiiyoqhymc9">Creating a Swift package</h3>
<p>Open your terminal and create a new directory where you want this project to live. Now create a Swift package in this directory with the following command. This command will name your Swift package after your current directory. For future reference, I named mine <code>SPMTest</code>:</p>
<p></p><pre class="crayon-plain-tag">swift package init --type executable</pre><p>
<p>
The most important part of creating your Swift package is the <code>Package.swift</code> file. There are two important elements in the <code>Package.swift</code> file that you may wish to edit:
</p>
<ul style="padding-left: 36px";>
<li>The name element. It indicates the name of the project and the name of the executable file which will be generated when the project is built.</li>
</ul>
<ul style="padding-left: 36px";>
<li>The dependencies list. This indicates all of the subprojects that your application is dependent upon. Each item in this array consists of a “.Package” with a repository URL and a version.</li>
</ul>
<p>
Open <code>Package.swift</code> and add SwiftyJSON as a dependency:</p>
<p></p><pre class="crayon-plain-tag">import PackageDescription

let package = Package(
    name: "SPMTest",
    dependencies: [
        .Package(url: "https://github.com/SwiftyJSON/SwiftyJSON.git", majorVersion: 3, minor: 1)
    ]
)</pre><p></p>
<p>Now download the dependencies with the following command:
</p>
<p></p><pre class="crayon-plain-tag">swift package fetch</pre><p>
<p>
All dependencies are downloaded into a <code>Packages</code> directory which the SPM will automatically create.</p>
<h3 class="c2 c6" id="h.wdysuurwo7af">Using our installed dependencies</h3>
<p>Now that SwiftyJSON is installed, we can use it as a framework. Create a file called <code>main.swift</code> in the <code>Sources</code> directory. SwiftPM looks at this file to decide what to do when we run our program.</p>
<p>Add some basic JSON parsing code to <code>Sources/main.swift</code>:
</p>
<p></p><pre class="crayon-plain-tag">import SwiftyJSON
import Foundation

let jsonString = "{\"name\": \"Sagnewshreds\"}"

if let dataFromString = jsonString.data(using: String.Encoding.utf8, allowLossyConversion: false) {
    let json = JSON(data: dataFromString)
    print(json["name"])
}</pre><p></p>
<p>Now build the project by running the following command from the root directory of your project:
</p>
<p></p><pre class="crayon-plain-tag">swift build</pre><p>
<p>
SPM will generate an executable for this project. From the root directory of your project, run this executable and hope the JSON is parsed correctly:
</p>
<p></p><pre class="crayon-plain-tag">./.build/debug/SPMTest</pre><p>
<p>
You can also use SwiftPM to generate an Xcode project for you by running:
</p>
<p></p><pre class="crayon-plain-tag">swift package generate-xcodeproj</pre><p>
<p>
After this, open your newly generated Xcode project:
</p>
<p></p><pre class="crayon-plain-tag">open SPMTest.xcodeproj/</pre><p>
<p>
This allows you to reap all of the benefits that editing Swift in Xcode gives you, such as awesome autocompletion. </p>
<p><img alt="Screen Shot 2016-10-26 at 2.29.53 PM.png" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/10/nMPQCYoFSCVjuGgaMR4QwhXlJKYudKc21r0Mr_8H0gtEAnhiO4xDwysGir7mXtEhn2IkAwWaAOTVxuwzVEBJ4EcmgiiZaepTd_GCtUn9HxkXtjSwfHBC25OBJTzwFZO8OcxoIU9W.png" style="width: 624.00px; height: 348.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" class='" aligncenter'></p>
<h3 class="c2 c6" id="h.lbw3aq1pyfjp">Moving on with your Swift projects</h3>
<p>Although it is new, it is exciting that Swift now has an official package manager. </p>
<p>If you are worried about whether it is ready for production applications or not, you may still want to use <a href="https://www.twilio.com/blog/2016/05/getting-started-with-cocoapods-to-manage-dependencies-in-swift-and-ios.html">CocoaPods</a> or <a href="https://www.twilio.com/blog/2016/05/getting-started-with-carthage-to-manage-dependencies-in-swift-and-ios.html">Carthage</a> until SwiftPM has been more widely adopted. If you want to see what kind of awesome packages you can use with SwiftPM, check out the <a href="https://swiftmodules.com/about">Swift Modules website</a>.</p>
<p>I can’t wait to see what you build. Feel free to reach out and share your experiences or ask any questions.
</p>
<ul style="padding-left: 36px";>
<li>Email: sagnew@twilio.com</li>
<li>
Twitter: <a href="http://twitter.com/sagnewshreds">@Sagnewshreds</a>
</li>
<li>
Github: <a href="https://github.com/sagnew">Sagnew</a>
</li>
<li>
Twitch (streaming live code): <a href="http://www.twitch.tv/sagnewshreds">Sagnewshreds</a>
</li>
</ul>
<p><a href="https://twilioinc.wpengine.com/2016/10/getting-started-with-swift-package-manager.html">Getting Started with Swift Package Manager</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2016/10/getting-started-with-swift-package-manager.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Getting started with Socket.io in Swift on iOS</title>
		<link>https://twilioinc.wpengine.com/2016/09/getting-started-with-socket-io-in-swift-on-ios.html</link>
		<comments>https://twilioinc.wpengine.com/2016/09/getting-started-with-socket-io-in-swift-on-ios.html#respond</comments>
		<pubDate>Fri, 30 Sep 2016 21:11:26 +0000</pubDate>
		<dc:creator><![CDATA[Sam Agnew]]></dc:creator>
				<category><![CDATA[Code, Tutorials and Hacks]]></category>
		<category><![CDATA[iOS]]></category>
		<category><![CDATA[JavaScript]]></category>
		<category><![CDATA[Node.js]]></category>
		<category><![CDATA[socket.io]]></category>
		<category><![CDATA[Swift]]></category>
		<category><![CDATA[Websockets]]></category>
		<category><![CDATA[Xcode]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=18933</guid>
		<description><![CDATA[<p>WebSockets are a powerful protocol for real-time event based communication. Socket.io makes working with WebSockets easier on iOS with Swift compared to implementing all the underlying bits yourself. Let&#8217;s demonstrate how to work with the Swift Socket.io client library by building an application to monitor the status of Twilio phone calls. This application will be similar to the application built in another tutorial for getting started with Socket.io on... <a class="read-more" href="https://twilioinc.wpengine.com/2016/09/getting-started-with-socket-io-in-swift-on-ios.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2016/09/getting-started-with-socket-io-in-swift-on-ios.html">Getting started with Socket.io in Swift on iOS</a></p>]]></description>
				<content:encoded><![CDATA[<p>WebSockets are a powerful protocol for real-time event based communication. <a href="http://socket.io/">Socket.io</a> makes working with WebSockets easier on iOS with Swift compared to implementing all the underlying bits yourself.</p>
<p>Let&#8217;s demonstrate how to work with the <a href="https://github.com/socketio/socket.io-client-swift">Swift Socket.io client library</a> by building an application to monitor the status of Twilio <a href="https://www.twilio.com/docs/api/rest/call">phone calls</a>. This application will be similar to the application built in another tutorial for <a href="https://www.twilio.com/blog/2015/10/getting-started-with-socket-io-adding-real-time-events-to-your-node-js-express-app.html">getting started with Socket.io on the web with JavaScript</a>.</p>
<h3 class="c1 c4" id="h.1l7hqygp5w6e">The tools we&#8217;ll need</h3>
<ul style="padding-left: 36px";>
<li>
<a href="https://nodejs.org/en/download/">Node.js and npm</a> version 4.0 or greater installed on your machine for our web server
</li>
<li>
<a href="https://developer.apple.com/xcode/downloads/">Xcode</a> 8.0 or greater and Swift 3.0 or greater
</li>
</ul>
<p>To find out which version of swift you&#8217;re running, enter the following command in your terminal:</p>
<p></p><pre class="crayon-plain-tag">xcrun swift -version</pre><p></p>
<ul style="padding-left: 36px";>
<li>
A Twilio Account to run the final version of our code – <a href="https://www.twilio.com/try-twilio">Sign up for free</a>
</li>
</ul>
<h3 class="c1 c4" id="h.l39l4bwbeihd">Setting up our server</h3>
<p>Start off by cloning or <a href="https://github.com/sagnew/CallStatusDashboard/archive/iOS-tutorial.zip">downloading a zip file</a> of this <a href="https://github.com/sagnew/CallStatusDashboard/tree/iOS-tutorial">starter repository</a> which contains two projects:
</p>
<ul style="padding-left: 36px";>
<li>a prebuilt Node.js web app and server and </li>
<li>an iOS app with a pre-configured storyboard set up with a <code>UITableView</code> that we will use to display the data we receive.</li>
</ul>
<p>
To clone the repository open your terminal, navigate to where you want this project to live and enter the following commands:</p>
<p></p><pre class="crayon-plain-tag">git clone git@github.com</a>:sagnew/CallStatusDashboard.git
cd CallStatusDashboard
git checkout iOS-tutorial</pre><p>
<p>
Once you have the repository cloned or the ZIP extracted, install the dependencies for the Node.js app:</p>
<p></p><pre class="crayon-plain-tag">npm install</pre><p>Once the dependencies install open up <code>index.js</code> and add this new route at the bottom:
</p>
<p></p><pre class="crayon-plain-tag">// Test route for socket events.
app.get('/test', (req, res) =&gt; {
  io.emit('test', { 'Hello': 'World' });
  res.send('Hello Socket.io :)');
});</pre><p>
<p>
This route uses Socket.io to emit an event named &#8220;test&#8221;. In just a bit we will configure our iOS app to receive that event later in the post.  For now, run the server by entering the following terminal command and keep it running for us to test later:
</p>
<p></p><pre class="crayon-plain-tag">node index.js</pre><p>
<p>
Now let&#8217;s make our web server accessible over the internet so we can run our app. We need to do this because iOS requires apps that want to make requests to external services do it via HTTPS. We also need a publicly accessible URL later on to test phone calls made with the <a href="https://www.twilio.com/docs/api/rest">Twilio REST API</a>. For this, we will use a tool called <a href="https://www.twilio.com/blog/2015/09/6-awesome-reasons-to-use-ngrok-when-testing-webhooks.html">ngrok</a>. </p>
<p><a href="https://ngrok.com/download">Download ngrok</a> and have it run on port 3000 in a new terminal window with the following command:
</p>
<p></p><pre class="crayon-plain-tag">./ngrok http 3000</pre><p>
<p>
Take note of the randomly generated URL that ngrok provides you as we&#8217;ll be using it in a bit. Visit this URL and add &#8220;/test&#8221; to the end of it to see the new route that we added to <code>index.js</code>.<br />
<img alt="Screen Shot 2016-09-30 at 4.21.21 PM.png" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/09/UQc4aYJjVKFS4DvRL46hvK2hm91_8MllOHX8NHR2ek9UUmPJrRUVVgc-Isr5WYLRQdOrSb9A10-NaylA6rTfD5aXrZQDWB-NYBv5Cd3YkewlVwyDmPB2B8osCktc9Z0LBe2-g7N8.png" style="width: 624.00px; height: 161.33px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" class='" aligncenter'></p>
<h3 class="c1 c4" id="h.96uujwwxznrx">Setting up our client side iOS app</h3>
<p>Navigate to the directory containing the starter iOS app. From the root directory of this repository run:</p><pre class="crayon-plain-tag">cd iOS/CallStatusDashboard</pre><p></p>
<p>We&#8217;ll use CocoaPods to install the dependencies used by  our app. First, install <a href="https://www.twilio.com/blog/2016/05/getting-started-with-cocoapods-to-manage-dependencies-in-swift-and-ios.html">CocoaPods</a> if you don&#8217;t have it:</p>
<p></p><pre class="crayon-plain-tag">sudo gem install cocoapods</pre><p>
<p>
Now install the dependencies:
</p>
<p></p><pre class="crayon-plain-tag">pod install</pre><p>
<p>
CocoaPods links the dependencies of our project together by creating a new <a href="https://developer.apple.com/library/ios/featuredarticles/XcodeConcepts/Concept-Workspace.html">Xcode Workspace</a>. To make sure XCode loads those dependencies open the workspace using the <code>CallStatusDashboard.xcworkspace</code> file instead of the Xcode project file:
</p>
<p></p><pre class="crayon-plain-tag">open CallStatusDashboard.xcworkspace</pre><p>
<p>
Lets verify the Socket.io pod was added to our project by importing it in <code>ViewController.swift</code>:
</p>
<p></p><pre class="crayon-plain-tag">import SocketIO</pre><p>
<p>
Build the project and a prompt that says &#8220;Build Successful&#8221; should display.</p>
<h3 class="c1 c4" id="h.8wz7ach8m96l">Getting started with Socket.io in Swift</h3>
<p>Now we&#8217;re ready to start receiving Socket.io events from our server.</p>
<p>Create a new Swift file called <code>SocketIOManager.swift</code> and add the following:</p>
<p></p><pre class="crayon-plain-tag">import SocketIO

class SocketIOManager: NSObject {
    static let sharedInstance = SocketIOManager()
    var socket = SocketIOClient(socketURL: URL(string: "https://your-ngrok-url.ngrok.io")!, config: [.log(false), .forcePolling(true)])
    
    override init() {
        super.init()

        socket.on("test") { dataArray, ack in
            print(dataArray)
        }

    }
    
    func establishConnection() {
        socket.connect()
    }
    
    func closeConnection() {
        socket.disconnect()
    }
}</pre><p>This code creates a <a href="https://en.wikipedia.org/wiki/Singleton_pattern">Singleton</a> class so we can reuse the Socket.io functionality across our entire application. The <code>init</code> function tests our socket connection by subscribing to the &#8220;test&#8221; event emitted by our server. </p>
<p><em>Don&#8217;t forget to replace the socket URL with the URL that ngrok generated for you.</em></p>
<p>Head over to <code>AppDelegate.swift</code> and use <code>SocketIOManager</code> to connect to the server when the app becomes active and disconnect from it when the app enters the background or exits. To do this, add the following two lines where appropriate in <code>AppDelegate.swift</code>:</p>
<p></p><pre class="crayon-plain-tag">func applicationDidEnterBackground(_ application: UIApplication) {
        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
        SocketIOManager.sharedInstance.closeConnection()
    }

    func applicationWillEnterForeground(_ application: UIApplication) {
        // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
    }

    func applicationDidBecomeActive(_ application: UIApplication) {
        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
        SocketIOManager.sharedInstance.establishConnection()
    }</pre><p>
<p>
Run the app and open <a href="http://localhost:3000/test">http://localhost:3000/test</a> in your browser. Visiting this URL should cause the Node app to emit an event to our iOS app which will print the data array we receive in the Xcode console:</p>
<p><img alt="Screen Shot 2016-09-15 at 7.01.26 PM.png" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/09/d2oaAzeSBxolF3oQPRiwD_oX5WlVOmCOKmb10IDbD0_njbk0diBiR3d2X7bP1nFEBJfDt-STFrWBtp8gqtPYWK5QVwXOT-Iiy4a3Xh_LqBgIv3axv6MmBP-3_BxrTV0VsZ7HExpY.png" style="width: 138.00px; height: 45.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" class='" aligncenter'></p>
<h3 class="c1 c4" id="h.a2g2exm5y9p5">Monitoring the status of a phone call</h3>
<p>We&#8217;re ready to recreate the web app from <a href="https://www.twilio.com/blog/2015/10/getting-started-with-socket-io-adding-real-time-events-to-your-node-js-express-app.html">my other Socket.io tutorial</a> in our iOS app. </p>
<p>This previous post explained how to monitor phone calls sent with the <a href="https://www.twilio.com/docs/api/rest">Twilio API</a> in real time using <a href="https://www.twilio.com/docs/api/rest/making-calls#status-callback-parameter">call progress events.</a> With these, you can set up a <a href="https://en.wikipedia.org/wiki/Webhook">webhook</a> to receive a request whenever the status of your phone calls change. This is already taken care of in <code>index.js</code>.</p>
<p>The real time updates of call progress events provide us with a great opportunity to play around with WebSockets.</p>
<p>When the status of a phone call changes, our server will emit an event that the iOS app we are building will receive. From there, we&#8217;ll update the <code>UITableView</code> in our app to display the new status of that phone call.</p>
<p>We&#8217;ll need a data structure to represent phone calls. Let&#8217;s use a <code>struct</code> for this. Create a new file called <code>PhoneCall.swift</code> and add the following code:</p><pre class="crayon-plain-tag">struct PhoneCall {
    let callSid: String
    let toNumber: String
    let fromNumber: String
    var callStatus: String
    
    init(callSid: String, toNumber: String, fromNumber: String, callStatus: String) {
        self.callSid = callSid
        self.toNumber = toNumber
        self.fromNumber = fromNumber
        self.callStatus = callStatus
    }
}</pre><p></p>
<p>With this struct we can create an array allowing us to store all of the <code>PhoneCalls</code>s we want to show in our <code>UITableView</code>. Replace the global array of <code>String</code>s inside the <code>ViewController</code> class of <code>ViewController.swift</code> with the following:
</p>
<p></p><pre class="crayon-plain-tag">class ViewController: UITableViewController {
    let phoneCallCellIdentifier = "PhoneCallCell"
    var phoneCalls: [PhoneCall] = []
    
    @IBOutlet var callStatusTableView: UITableView!</pre><p>
<p>And replace the code inside <code>tableView(_:cellForRowAt:)</code> with the following:
</p>
<p></p><pre class="crayon-plain-tag">override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: phoneCallCellIdentifier, for: indexPath)
        
        let row = (indexPath as NSIndexPath).row
        let call = phoneCalls[row]
        
        cell.detailTextLabel?.text = "\(call.fromNumber) -> \(call.toNumber): \(call.callStatus)"
        cell.textLabel?.text = call.callSid
        
        return cell
    }</pre><p>In <code>SocketIOManager.swift</code>, add the following code to the end of the <code>init</code> function. This will listen for <code>status update</code> events sent from the Node app similarly to the <code>test</code> event we created before. On receiving this event, we will pass a message to the rest of the  code using <code>NSNotificationCenter</code>:</p><pre class="crayon-plain-tag">override init() {
        super.init()
        
        socket.on("test") { dataArray, ack in
            print(dataArray)
        }
        
        socket.on("status update") { dataArray, ack in
            NotificationCenter.default
                .post(name: Notification.Name(rawValue: "callStatusUpdateNotification"), object: dataArray[0] as? [String: AnyObject])
        }
        
    }</pre><p></p>
<p>We need to modify <code>ViewController.swift</code> to receive that status update and update the <code>UITableView</code>. If it is a new call, we&#8217;ll add it to the <code>phoneCalls</code> array. If it is an existing call with an updated status, we will update the corresponding array element.</p>
<p>Create a new function in <code>ViewController</code> called <code>handleCallStatusUpdateNotification</code> with the following code:</p><pre class="crayon-plain-tag">func handleCallStatusUpdateNotification(_ notification: Notification) {
        if let data = notification.object as? [String: String],
                let callSid = data["callSid"], let toNumber = data["to"],
                let fromNumber = data["fromNumber"], let callStatus = data["callStatus"] {
            let newPhoneCall = PhoneCall(callSid: callSid, toNumber: toNumber, fromNumber: fromNumber, callStatus: callStatus)
            var isNewCall = true
            
            self.phoneCalls = self.phoneCalls.map({ phoneCall -> PhoneCall in
                if phoneCall.callSid == newPhoneCall.callSid {
                    // This is the updated phone call.
                    isNewCall = false
                    return newPhoneCall
                }
                
                // This is an unchanged phone call.
                return phoneCall
            })
            
            if isNewCall {
                self.phoneCalls.append(newPhoneCall)
            }
        
            self.callStatusTableView.reloadData()
        }
    }</pre><p>Next subscribe to the notification and set our previous function as it&#8217;s handler by adding this code to the end of <code>viewDidLoad</code>:</p>
<p></p><pre class="crayon-plain-tag">override func viewDidLoad() {
        super.viewDidLoad()
        self.callStatusTableView.delegate = self
        self.callStatusTableView.dataSource = self
        NotificationCenter.default.addObserver(self, selector: #selector(ViewController.handleCallStatusUpdateNotification(_:)), name: NSNotification.Name(rawValue: "callStatusUpdateNotification"), object: nil)
    }</pre><p></p>
<p>Finally, In order to test everything, you&#8217;ll need a Twilio phone number. You can <a href="https://www.twilio.com/console/phone-numbers/search">buy one here</a> or just use a trial number that comes with your Twilio account. When using a trial number, you can only make calls to numbers that you verified. This shouldn&#8217;t be a problem for now though.</p>
<p>Open <code>makeCall.js</code> in the root directory of our project and replace all of the relevant values with your Twilio phone number, your personal phone number and your ngrok URL:
</p>
<p></p><pre class="crayon-plain-tag">client.makeCall({
  url: 'http://YOUR_NGROK_URL/voice',
  to: 'YOUR_PHONE_NUMBER',
  from: 'YOUR_TWILIO_PHONE_NUMBER',
  statusCallback: 'http://YOUR_NGROK_URL/events',
  statusCallbackMethod: 'POST',
  statusCallbackEvent: ['initiated', 'ringing', 'answered', 'completed'],
}, (err, call) =&gt; {
  if(err) { console.log(err); return err; }
  process.stdout.write(call.sid);
});</pre><p>
<p>
Now run the app, and enter the following in your terminal to see a phone call appear in the table in your iOS app:
</p>
<p></p><pre class="crayon-plain-tag">node makeCall.js</pre><p>
<p>
This will use the <a href="https://www.twilio.com/docs/api/rest">Twilio REST API</a> to make your phone receive a call from your Twilio number. You should see the status of the call displayed in your iOS app changing when you answer and hang up.</p>
<p>Try it a few times to see it working!</p>
<p><img alt="Simulator Screen Shot Sep 30, 2016, 4.42.21 PM.png" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/09/PT-a5hAyk2r0aAgYr7-xCpEKIcSjMUQmSRTptT3IVBgveElObtH89RRbjFx1gz3wQrlnMhVrLwX4Z8OS3nKx8CY0e9I3EvyUkYRrqYGJtGfm9QN0PMs_QW5SDqLJPBnAgAduQehT.png" style="width: 360.00px; height: 640.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" class='" aligncenter'></p>
<h3 class="c1 c4" id="h.997rgb8u5xiu">Real time communication is rad</h3>
<p>Now you can add real time events to communicate between client and server to any of the apps you build. If you want to see how to build a similar application, but in a web browser, check out this <a href="https://www.twilio.com/blog/2015/11/reactjs-tutorial-call-monitoring-with-react-express-and-socket-io.html">ReactJS tutorial</a> that also uses Socket.io to monitor the status of phone calls.</p>
<p>I can&#8217;t wait to see what kind of awesome projects you build. Feel free to reach out for any questions:
</p>
<ul style="padding-left: 36px";>
<li>Email: Sagnew@twilio.com</li>
<li>
Twitter: <a href="http://twitter.com/sagnewshreds">@Sagnewshreds</a>
</li>
<li>
Github: <a href="https://github.com/sagnew">Sagnew</a>
</li>
<li>
Twitch (streaming live code): <a href="http://www.twitch.tv/sagnewshreds">Sagnewshreds</a>
</li>
</ul>
<p><a href="https://twilioinc.wpengine.com/2016/09/getting-started-with-socket-io-in-swift-on-ios.html">Getting started with Socket.io in Swift on iOS</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2016/09/getting-started-with-socket-io-in-swift-on-ios.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>How to Receive and Respond to a Text Message with Python, Flask and Twilio</title>
		<link>https://twilioinc.wpengine.com/2016/09/how-to-receive-and-respond-to-a-text-message-with-python-flask-and-twilio.html</link>
		<comments>https://twilioinc.wpengine.com/2016/09/how-to-receive-and-respond-to-a-text-message-with-python-flask-and-twilio.html#respond</comments>
		<pubDate>Thu, 01 Sep 2016 18:50:53 +0000</pubDate>
		<dc:creator><![CDATA[Sam Agnew]]></dc:creator>
				<category><![CDATA[Code, Tutorials and Hacks]]></category>
		<category><![CDATA[Flask]]></category>
		<category><![CDATA[Python]]></category>
		<category><![CDATA[SMS]]></category>
		<category><![CDATA[twilio sms]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=18684</guid>
		<description><![CDATA[<p>Here’s all the code you need to receive an SMS message and to send a response using Python, Flask, and Twilio: [crayon-587950234466a777996776/] If you’d like to know how that works, check out this short video: Can you walk me through this step by step? When someone texts your Twilio number, Twilio makes an HTTP request to your app. Details about that SMS are passed via the request parameters.... <a class="read-more" href="https://twilioinc.wpengine.com/2016/09/how-to-receive-and-respond-to-a-text-message-with-python-flask-and-twilio.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2016/09/how-to-receive-and-respond-to-a-text-message-with-python-flask-and-twilio.html">How to Receive and Respond to a Text Message with Python, Flask and Twilio</a></p>]]></description>
				<content:encoded><![CDATA[<p>Here’s all the code you need to <a href="https://www.twilio.com/docs/api/rest/sending-messages">receive an SMS message</a> and to send a response using Python, Flask, and Twilio:
</p>
<p></p><pre class="crayon-plain-tag">from flask import Flask, request
from twilio import twiml


app = Flask(__name__)


@app.route('/sms', methods=['POST'])
def sms():
    number = request.form['From']
    message_body = request.form['Body']

    resp = twiml.Response()
    resp.message('Hello {}, you said: {}'.format(number, message_body))
    return str(resp)

if __name__ == '__main__':
    app.run()</pre><p>
<p>
If you’d like to know how that works, check out this short video:</p>
<p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/cZeCz_QOoXw" frameborder="0" allowfullscreen></iframe></center></p>
<h2 class="c0 c7" id="h.rtx21ef7hs9i">Can you walk me through this step by step?</h2>
<p>When someone texts your Twilio number, <a href="https://www.twilio.com/docs/api/twiml/sms/twilio_request">Twilio makes an HTTP request</a> to your app. Details about that SMS are passed via the request parameters. Twilio expects an HTTP response from your web app in the form of <a href="https://www.twilio.com/docs/api/twiml">TwiML</a>, which is a set of simple XML tags used to tell Twilio what to do next.</p>
<p>First make sure you <a href="https://www.twilio.com/docs/quickstart/python/devenvironment">set your local environment up</a> and have a directory where the code will live.</p>
<p>Open your terminal and install Flask, the popular micro web framework, which we&#8217;ll use to receive Twilio&#8217;s request:
</p>
<p></p><pre class="crayon-plain-tag">pip install flask</pre><p>
<p>
Install the Twilio Python library to generate the response TwiML:
</p>
<p></p><pre class="crayon-plain-tag">pip install twilio</pre><p>
<p>
Create a file called <code>app.py</code>, and import the Flask and request objects from the Flask library. Also import the Twilio Python library and initialize a new Flask app:
</p>
<p></p><pre class="crayon-plain-tag">from flask import Flask, request
from twilio import twiml


app = Flask(__name__)</pre><p>
<p>
We need a route to handle a post request on the message endpoint. Use the <code>@app.route</code> decorator to tell our app to call the sms function whenever a <code>POST</code> request is sent to the &#8216;/sms&#8217; URL on our app:
</p>
<p></p><pre class="crayon-plain-tag">@app.route('/sms', methods=['POST'])
def sms():</pre><p>
<p>
Details about the inbound SMS are passed in the form encoded body of the request. Two useful parameters are the phone number the SMS was sent <code>From</code> and the <code>Body</code> of the message:
</p>
<p></p><pre class="crayon-plain-tag">def sms():
    number = request.form['From']
    message_body = request.form['Body']</pre><p>
<p>
Next we&#8217;ll use the Twilio library to create a TwiML <code>&lt;Response&gt;</code> that tells Twilio to reply with a <code>&lt;Message&gt;</code>. This message will echo the phone number and body of the original SMS:
</p>
<p></p><pre class="crayon-plain-tag">    resp = twiml.Response()
    resp.message('Hello {}, you said: {}'.format(number, message_body))
    return str(resp)</pre><p>
<p>
And don&#8217;t forget to tell the app to run:
</p>
<p></p><pre class="crayon-plain-tag">if __name__ == '__main__':
    app.run()</pre><p>
<p>
In your terminal, start the server which will listen on port 5000:
</p>
<p></p><pre class="crayon-plain-tag">python app.py</pre><p></p>
<h2 class="c0 c7" id="h.tlwt5nfv5bi9">But how does Twilio see our app?</h2>
<p>
Our app needs a publicly accessible URL. To avoid having to deploy every time we make a change, we&#8217;ll use a nifty tool called <a href="https://www.twilio.com/blog/2015/09/6-awesome-reasons-to-use-ngrok-when-testing-webhooks.html">ngrok</a> to open a tunnel to our local machine. </p>
<p>Ngrok generates a custom forwarding URL that we will use to tell Twilio where to find our application. <a href="https://ngrok.com/download">Download ngrok</a> and run it in your terminal on port 5000
</p>
<p></p><pre class="crayon-plain-tag">./ngrok http 5000</pre><p>
<p>
Now we just need to point a phone number at our app.</p>
<p>Open the phone number configuration screen in your Twilio console. Scroll down to the &#8220;a message comes in&#8221; field. You should see something like this:</p>
<p><img alt="message-comes-in.png" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/09/SmiiYXhaO_BWvSuzFeJapjXNU_BvvsXqenUeql3jm8ZpPhvki_KPfh6PUmH9DMONsvS_pmD0QdaylQhixP-dr1QvVlf4MDqQaCB2oi4WGAf_zWM2XHYjkquZHbRNqXJfuUZ9q48x.png" style="width: 600.00px; height: 186.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" class='" aligncenter'></p>
<p>Punch in the URL for our message route that was generated by ngrok. It should look something like <code>http://your-ngrok-url.ngrok.io/sms</code>.</p>
<p>Click save, then text your number to get a response!</p>
<h3 class="c0 c5" id="h.ec1qk2f5rbga">Next steps</h3>
<p>To recap, when the text hits Twilio, Twilio makes a request to our app, and our app responds with TwiML that tells Twilio to send a reply message.</p>
<p>If you’d like to learn more about how to use Twilio and Python together, check out:</p>
<ul style="padding-left: 36px";>
<li><a href="https://www.twilio.com/docs/libraries/python">The Twilio Python Helper Library</a></li>
<li><a href="https://www.twilio.com/docs/quickstart/python/twiml">The Twilio Python Quickstart</a></li>
<li><a href="https://www.twilio.com/docs/api/rest/sending-messages">How to Send SMS and MMS</a></li>
</ul>
<p>
Feel free to drop me a line if you have any question or just want to show off what you built:</p>
<ul style="padding-left: 36px";>
<li>Email: sagnew@twilio.com</li>
<li>
Twitter: <a href="http://twitter.com/sagnewshreds">@Sagnewshreds</a>
</li>
<li>
Github: <a href="https://github.com/sagnew">Sagnew</a>
</li>
<li>
Twitch (streaming live code): <a href="http://www.twitch.tv/sagnewshreds">Sagnewshreds</a>
</li>
</ul>
<p><a href="https://twilioinc.wpengine.com/2016/09/how-to-receive-and-respond-to-a-text-message-with-python-flask-and-twilio.html">How to Receive and Respond to a Text Message with Python, Flask and Twilio</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2016/09/how-to-receive-and-respond-to-a-text-message-with-python-flask-and-twilio.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Web Scraping and Parsing HTML in Swift with Kanna and Alamofire</title>
		<link>https://twilioinc.wpengine.com/2016/08/web-scraping-and-parsing-html-in-swift-with-kanna-and-alamofire.html</link>
		<comments>https://twilioinc.wpengine.com/2016/08/web-scraping-and-parsing-html-in-swift-with-kanna-and-alamofire.html#respond</comments>
		<pubDate>Thu, 18 Aug 2016 17:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Sam Agnew]]></dc:creator>
				<category><![CDATA[Code, Tutorials and Hacks]]></category>
		<category><![CDATA[Alamofire]]></category>
		<category><![CDATA[iOS]]></category>
		<category><![CDATA[Kanna]]></category>
		<category><![CDATA[Swift]]></category>
		<category><![CDATA[Web scraping]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=18627</guid>
		<description><![CDATA[<p>When building iOS applications, we often need to work with data from various APIs. But sometimes the data you want access to isn&#8217;t nicely packaged and available via a REST API. In these cases we can scrape data directly from a web page using the Kanna Swift library. Let&#8217;s build an iOS app that will display all of the upcoming metal shows in New York City by... <a class="read-more" href="https://twilioinc.wpengine.com/2016/08/web-scraping-and-parsing-html-in-swift-with-kanna-and-alamofire.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2016/08/web-scraping-and-parsing-html-in-swift-with-kanna-and-alamofire.html">Web Scraping and Parsing HTML in Swift with Kanna and Alamofire</a></p>]]></description>
				<content:encoded><![CDATA[<p>When building iOS applications, we often need to <a href="https://www.twilio.com/blog/2016/08/how-to-build-api-driven-ios-apps-in-swift-using-siesta.html">work with data from various APIs</a>. But sometimes the data you want access to isn&#8217;t nicely packaged and available via a <a href="https://www.twilio.com/docs/api/rest">REST API</a>. In these cases we can scrape data directly from a web page using the <a href="https://github.com/tid-kijyun/Kanna">Kanna</a> Swift library.</p>
<p>Let&#8217;s build an iOS app that will display all of the upcoming metal shows in New York City by scraping the <a href="http://nycmetalscene.com/">NYC Metal Scene</a> website.</p>
<h3 class="c0 c9" id="h.l39l4bwbeihd">Getting started and setting up our project</h3>
<p>Start off by cloning <a href="https://github.com/sagnew/upcoming-metal-shows-ios/tree/tutorial">this repository</a> which contains a starter project for us to build on. This project already has a storyboard set up with a <code>UITableView</code> that we will use to display the data we scrape. I am using XCode version 7.3 and Swift version 2.2, so make sure this code is compatible with your version of XCode and Swift.</p>
<p>Open your terminal and navigate to where you want this project to live. Enter the following command to clone it, you can also download a <a href="https://github.com/sagnew/upcoming-metal-shows-ios/archive/tutorial.zip">zip file</a> of the project:
</p>
<p></p><pre class="crayon-plain-tag">git clone git@github.com:sagnew/upcoming-metal-shows-ios.git && cd upcoming-metal-shows-ios && git checkout tutorial</pre><p>
<p>
We are going to use <a href="https://www.twilio.com/blog/2016/05/getting-started-with-cocoapods-to-manage-dependencies-in-swift-and-ios.html">CocoaPods</a> to install the dependencies we&#8217;ll need for this project. Install CocoaPods if you don&#8217;t have it:
</p>
<p></p><pre class="crayon-plain-tag">sudo gem install cocoapods</pre><p>
<p>
In the repository that you cloned, there is a <code>Podfile</code> that lists which dependencies we need to install. These are <a href="https://github.com/tid-kijyun/Kanna">Kanna</a> for parsing HTML and <a href="https://github.com/Alamofire/Alamofire">Alamofire</a> for making HTTP requests. Install them with the following command:
</p>
<p></p><pre class="crayon-plain-tag">pod install</pre><p>
<p>
CocoaPods takes care of linking all of the frameworks for you by creating a new <a href="https://developer.apple.com/library/ios/featuredarticles/XcodeConcepts/Concept-Workspace.html">Xcode Workspace</a>. From now on when opening the project in Xcode, you’ll have to use <code>UpcomingMetalShows.xcworkspace</code> instead of your normal Xcode project:
</p>
<p></p><pre class="crayon-plain-tag">open UpcomingMetalShows.xcworkspace</pre><p>
<p>
You can check that Kanna and Alamofire were installed correctly by adding these two lines to <code>ViewController.swift</code>:
</p>
<p></p><pre class="crayon-plain-tag">import Kanna
import Alamofire</pre><p>
<p>
Press “Command-B.” to verify the project builds with those dependencies referenced.</p>
<p><img alt="" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/08/syMPvUPpAjjEfsy1ihuO183CNrpxR_YXDJmPmru_xSN55GX4np8SiKoSkTC8cVX9Sxcm8EPOKcumS91IUtsXgq9Tn6-woNbjok3QA765YbXd0FV0-v6m9Lf5FulwkMfaLkB8OXdh-1.png" style="width: 624.00px; height: 346.67px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" class='" aligncenter'></p>
<h3 class="c0 c9" id="h.8wz7ach8m96l">Scraping data from a web page using Alamofire</h3>
<p>With the starter project in place we can move on to the next step in building the app, making the HTTP request to acquire the concert data. In our case we want to make a request to <code><a href="http://nycmetalscene.com/">http://nycmetalscene.com/</a></code> and scrape the HTML content that is returned.</p>
<p>Before making the request we have to configure our app to allow making an HTTP request to a non-secure website, or a website that is not accessible via HTTPS. Starting in iOS 9, Apple enabled App Transport Security which by default disallows requests to non-secure websites. To make our app work we will need to add an exception to this policy by editing the <code>Info.plist</code> file.</p>
<p>Open <code>Info.plist</code>, add a new <code>Key</code> to the <code>Information Property List</code> called <code>App Transport Security Settings</code> and set the <code>Allow Arbitrary Loads</code> value to <code>YES</code> as seen in this GIF:</p>
<p><img alt="appsecuritytransport.gif" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/08/aNunAOvpP549DzMVlPL9ioNbNrTcAq-W23e0xWDGEQAaq769OFA8rkgns8nlP-DvfradYxd3hAXSgoqSOEwC1hyYqaoWZoYxxtdVAorjunIO1JEblVby8tN4YtwooZESIntmuoaj-1.png" style="width: 624.00px; height: 348.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" class='" aligncenter'></p>
<p>With the exception in place we can grab HTML from the page we are trying to scrape. To do this, we need to send a <code>GET</code> request with Alamofire.</p>
<p>Open your <code>ViewController.swift</code> and add the following code to the <code>ViewController</code> class:
</p>
<p></p><pre class="crayon-plain-tag">// Grabs the HTML from nycmetalscene.com for parsing.
func scrapeNYCMetalScene() -> Void {
    Alamofire.request("http://nycmetalscene.com").responseString { response in
        print("\(response.result.isSuccess)")
        if let html = response.result.value {
            self.parseHTML(html: html)
        }
    }
}

func parseHTML(html: String) -> Void {
    // Finish this next
}</pre><p>
<p>
The <code>parseHTML(html: String) -&gt; Void</code> method will take the HTML from our <code>GET</code> request and use Kanna to make sense of it.</p>
<p>Trigger the loading of the data by adding a call to this new function at the end of <code>viewDidLoad</code>:
</p>
<p></p><pre class="crayon-plain-tag">override func viewDidLoad() {
    super.viewDidLoad()
    metalShowTableView.delegate = self
    metalShowTableView.dataSource = self
    self.scrapeNYCMetalScene()
}</pre><p>
<p>Now run the app again to see if the request is sent successfully</p>
<p><img alt="Screen Shot 2016-08-17 at 2.07.40 PM.png" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/08/I3lNBuFZ0p5h0pFXK9rAa4QUW1c9oHOKYg2BGFY2QAdji8J4bVUwNYk9vSKDtpqUDFfpx_NS8E-xol88onQPhvLfadB33XZkotSzJzqUNfeVCk79levQcWaCqV1KZolgCWMYp68p-1.png" style="width: 624.00px; height: 220.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" class='" aligncenter'></p>
<h3 class="c0 c9" id="h.2ddwy0dqyzrc">Parsing scraped data with Kanna</h3>
<p>Before writing code to parse the content returned from the GET request, let&#8217;s first take a look at the HTML that&#8217;s rendered by the browser. Every web page is different, and sometimes getting data out of them requires a bit of pattern recognition and ingenuity.</p>
<p>In our case we want to grab all of the metal shows included in the markup. </p>
<p><img alt="Screen Shot 2016-08-16 at 1.51.01 PM.png" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/08/pHy-sbUfKzy0Fhg1HGUx_OIRtLpuD4mXnRtwHYNMz3j4zJ96SYF-ODfhgftrtrs5JvxMzkeTyIvqCbQn9Lm3zcUiBDPHIFLDp1gwC0CwiIe27wlLnKjPo5UU4CU-w0LCImTfKg0f-1.png" style="width: 647.67px; height: 326.50px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" class='" aligncenter'></p>
<p>Each show exists in a <code>td</code> tag and has an ID of <code>Text</code> followed by some number. This is the first pattern we&#8217;ll use to grab the HTML elements that contain the show info.</p>
<p>Next, you may notice that <em>every</em> piece of text on the page follows that ID pattern, not just the shows. To extract just the text nodes for concerts, we will use a second regular expression to find text that begins with the first three letters of a weekday. This pattern indicates that the text is referring to a concert.</p>
<p>With the two patterns for extracting concert data we&#8217;re ready to parse the content. Using Kanna, developers can use CSS selectors or Xpath queries to navigate through the HTML in a document. Let&#8217;s use CSS selectors with a regular expression to find all <code>td</code> nodes that have an ID beginning with &#8220;Text.&#8221;  Next we&#8217;ll loop over those results and apply the day-of-week regular expression.</p>
<p>Edit the <code>parseHTML</code> method to contain the following example code that will print out the text for all of the shows on the page:
</p>
<p></p><pre class="crayon-plain-tag">func parseHTML(html: String) -> Void {
    if let doc = Kanna.HTML(html: html, encoding: String.Encoding.utf8) {

        // Search for nodes by CSS selector
        for show in doc.css("td[id^='Text']") {

            // Strip the string of surrounding whitespace.
            let showString = show.text!.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)

            // All text involving shows on this page currently start with the weekday.
            // Weekday formatting is inconsistent, but the first three letters are always there.
            let regex = try! NSRegularExpression(pattern: "^(mon|tue|wed|thu|fri|sat|sun)", options: [.caseInsensitive])

            if regex.firstMatch(in: showString, options: [], range: NSMakeRange(0, showString.characters.count)) != nil {
                shows.append(showString)
                print("\(showString)\n")
            }
        }
    }
}</pre><p>
<p>
Run the app to see that it is printing out only the shows on the page and not all of the unnecessary text, similar what is shown in the following Xcode screenshot. </p>
<p><img alt="Screen Shot 2016-08-17 at 2.16.05 PM.png" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/08/ASL3p2sDjlt2tYMl4St1KNT8BhwT-2BbznKHUcGEFHZYiGZXOz-4lvNSztoBP-C9jBY9MAqAlYGoqD6d5Zvtp2nreg1yXg9H65xLM1Z8Agm82BZvjtVEAwbQyW2CXFJcF0PICuqB-1.png" style="width: 624.00px; height: 217.33px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" class='" aligncenter'></p>
<p>Next, we will work on displaying this data in the mobile app.</p>
<h3 class="c0 c9" id="h.3nevc15clhgn">Displaying the data that we scraped in a UITableView</h3>
<p>Let&#8217;s display all of the shows in a UITableView so we have an actual app.</p>
<p>The sample project already has one added to the application and configured in <code>Main.storyboard</code>, as well as the required methods in <code>ViewController.swift</code>. All we need to do is link our data to this view.</p>
<p>We are using the <code>shows</code> array as the data source for the <code>UITableView</code>. Add a line to the end of our <code>parseHTML</code> function to make sure that the data in the <code>UITableView</code> is being loaded once we are done parsing the shows:
</p>
<p></p><pre class="crayon-plain-tag">func parseHTML(html: String) -> Void {
    if let doc = Kanna.HTML(html: html, encoding: String.Encoding.utf8) {

        // Search for nodes by CSS selector
        for show in doc.css("td[id^='Text']") {

            // Strip the string of surrounding whitespace.
            let showString = show.text!.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)

            // All text involving shows on this page currently start with the weekday.
            // Weekday formatting is inconsistent, but the first three letters are always there.
            let regex = try! NSRegularExpression(pattern: "^(mon|tue|wed|thu|fri|sat|sun)", options: [.caseInsensitive])

            if regex.firstMatch(in: showString, options: [], range: NSMakeRange(0, showString.characters.count)) != nil {
                shows.append(showString)
                print("\(showString)\n")
            }
        }
    }
    self.metalShowTableView.reloadData()
}</pre><p>
<p>
We also need to define what data a cell in our table view contains. Replace the <code>tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</code> function with the following:
</p>
<p></p><pre class="crayon-plain-tag">func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = tableView.dequeueReusableCell(withIdentifier: textCellIdentifier, for: indexPath)

    let row = indexPath.row
    cell.textLabel?.text = shows[row]

    return cell
}</pre><p>
<p>
Now run the app and look at the list of upcoming metal shows in NYC</p>
<p><img alt="Screen Shot 2016-08-16 at 11.46.04 AM.png" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/08/d6dRKCBI1RV-n4m68qRmhDAJigfTqB7QyaT_YwSuesN2bSVf1FitwqRaCj2ZZ9zsdnyD1B9E9-yuuowYgbt7OxhPxoV10bj0f1MgHQX5Xjwzzv-j9_GEKYMTJLfEbh_iz87X_W_6-1.png" style="width: 487.00px; height: 801.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" class='" aligncenter'><br />
Wow it looks like <a href="https://www.youtube.com/watch?v=KBtYOI8U3Cc">Megadeth</a>, <a href="https://www.youtube.com/watch?v=edBYB1VCV0k">Amon Amarth</a>, <a href="https://www.youtube.com/watch?v=mcTXapZUN6s">Suicidal Tendencies</a>, <a href="https://www.youtube.com/watch?v=aeiOH3jyoFk">Metal Church</a> and <a href="https://www.youtube.com/watch?v=d33TfrIAKu0">Havok</a> are all playing the same show in October! Sounds like a pretty sick lineup. </p>
<h3 class="c0 c9" id="h.997rgb8u5xiu">The vast expanse of the World Wide Web</h3>
<p>Now you can build apps using data that isn&#8217;t neatly available to you in the format of a publicly accessible API by just grabbing it from the Internet.</p>
<p>Beware that changes to a web page&#8217;s HTML might break your app, so make sure to keep your code up to date.</p>
<p>If you want to build with something that doesn&#8217;t require scraping data from old web pages, check out Twilio&#8217;s <a href="https://www.twilio.com/docs/api/video/guide/quickstart-ios">Video</a> and <a href="https://www.twilio.com/docs/api/ip-messaging/guides/quickstart-ios">IP Messaging</a> iOS SDKs for adding video conferencing and real time chat to your Swift applications.</p>
<p>I&#8217;m looking forward to see what you build now that you have access to all of the data on any web page. Feel free to reach out for any questions or to show off what you built:
</p>
<ul style="padding-left: 36px";>
<li>Email: sagnew@twilio.com</li>
<li>
Twitter: <a href="http://twitter.com/sagnewshreds">@Sagnewshreds</a>
</li>
<li>
Github: <a href="https://github.com/sagnew">Sagnew</a>
</li>
<li>
Twitch (streaming live code): <a href="http://www.twitch.tv/sagnewshreds">Sagnewshreds</a>
</li>
</ul>
<p><a href="https://twilioinc.wpengine.com/2016/08/web-scraping-and-parsing-html-in-swift-with-kanna-and-alamofire.html">Web Scraping and Parsing HTML in Swift with Kanna and Alamofire</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2016/08/web-scraping-and-parsing-html-in-swift-with-kanna-and-alamofire.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Pokemon Faux: Create Fake Pokemon Go Screenshots with Python, Flask and Twilio MMS</title>
		<link>https://twilioinc.wpengine.com/2016/08/pokemon-faux-create-fake-pokemon-go-screenshots-with-python-flask-and-twilio-mms.html</link>
		<comments>https://twilioinc.wpengine.com/2016/08/pokemon-faux-create-fake-pokemon-go-screenshots-with-python-flask-and-twilio-mms.html#respond</comments>
		<pubDate>Tue, 02 Aug 2016 16:43:24 +0000</pubDate>
		<dc:creator><![CDATA[Sam Agnew]]></dc:creator>
				<category><![CDATA[Code, Tutorials and Hacks]]></category>
		<category><![CDATA[Flask]]></category>
		<category><![CDATA[MMS]]></category>
		<category><![CDATA[pokemon]]></category>
		<category><![CDATA[PokemonGo]]></category>
		<category><![CDATA[Python]]></category>
		<category><![CDATA[Twilio MMS]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=18473</guid>
		<description><![CDATA[<p>Pokemon Go is awesome and we all want to show off when we catch rare Pokemon. Let&#8217;s build a quick hack using Python and Twilio MMS that will allow you to trick your friends into thinking that you&#8217;ve encountered legendary Pokemon. You can continue reading to find out how to build this, or try it out now by texting an image and the name of a legendary Pokemon... <a class="read-more" href="https://twilioinc.wpengine.com/2016/08/pokemon-faux-create-fake-pokemon-go-screenshots-with-python-flask-and-twilio-mms.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2016/08/pokemon-faux-create-fake-pokemon-go-screenshots-with-python-flask-and-twilio-mms.html">Pokemon Faux: Create Fake Pokemon Go Screenshots with Python, Flask and Twilio MMS</a></p>]]></description>
				<content:encoded><![CDATA[<p>Pokemon Go is awesome and we all want to show off when we catch rare Pokemon. Let&#8217;s build a quick hack using Python and <a href="https://www.twilio.com/docs/api/rest/sending-messages">Twilio MMS</a> that will allow you to trick your friends into thinking that you&#8217;ve encountered legendary Pokemon.</p>
<p>You can continue reading to find out how to build this, or try it out now by texting an image and the name of a legendary Pokemon to:</p>
<p><strong>(646) 760-3289</strong></p>
<p><img class="&quot; aligncenter" style="width: 384.00px; height: 512.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/08/EO3MSWNJQgSSfxy9SPO4Srw_vVX1ROIcWHyltp9iJ15GHGacb6Lig1mqD6qDrUKcNELZjEFAADi19NBj_C-Gx7_Um6hjTCbGRT8h6geZdzmKumEAxCQycMRv-GRZN1YBnVVdlRQL.png" alt="articuno_spotted.png" /></p>
<h3 id="h.x9ey9xmwbhok" class="c2 c5">Getting started</h3>
<p>Before diving into the code, you&#8217;ll first need to make sure you have the following:</p>
<ul style="padding-left: 36px;">
<li><a href="https://www.python.org/downloads/">Python and pip</a> installed on your machine</li>
<li>A free Twilio account &#8211; <a href="https://www.twilio.com/try-twilio">sign up here</a></li>
<li><a href="https://github.com/sagnew/pokemon-faux/raw/master/pokemon_images.zip">The images</a> we will need to use including screenshots of models of the legendary Pokemon and the overlay for the Pokemon encounter screen. Create a new folder called <code>pokemon-go-images</code> in the directory where you want your project to live and save them there.</li>
</ul>
<p>The dependencies we are going to use will be:</p>
<ul style="padding-left: 36px;">
<li>The <a href="https://www.twilio.com/docs/libraries/python">Twilio Python</a> library for generating TwiML to respond to incoming messages</li>
<li><a href="https://python-pillow.org/">Pillow</a> for image manipulation</li>
<li><a href="http://flask.pocoo.org/">Flask</a> as the <a href="https://www.fullstackpython.com/web-frameworks.html">web framework</a> for our web application</li>
<li><a href="http://docs.python-requests.org/en/master/">Requests</a> for downloading images from text messages</li>
</ul>
<p>Open your terminal and enter these commands, preferably in the safety of a <a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/">virtual environment</a>:</p><pre class="crayon-plain-tag">pip install twilio==5.4.0 Flask==0.11.1 requests==2.10.0 Pillow==3.3.0</pre><p></p>
<h3 id="h.9p5z208t2yxu" class="c2 c5">Overlaying images on top of each other</h3>
<p>Let&#8217;s write some code to take the image we want to manipulate and overlay the Pokemon catching screen over it. We will use the Image module from PIL.</p>
<p>We need a function that takes a path to an image and the name of a Pokemon. Our function will resize the images to be compatible with each other, paste the overlay over the background image, paste the selected Pokemon on the image and then overwrite the original image with the new image.</p>
<p>Open a file called <code>overlay.py</code> and add the following code (comments are included in-line to explain what is happening):</p><pre class="crayon-plain-tag">from PIL import Image


def overlay(original_image_path, pokemon):

    overlay_image = Image.open('pokemon-go-images/overlay.png')

    # This is the image the user sends through text.
    background = Image.open(original_image_path)

    # Resizes the image received so that the height is always 512px.
    base_height = 512.0
    height_percent = base_height / background.size[1]
    width = int(background.size[0] * height_percent)

    background = background.resize((width, int(base_height)), Image.BILINEAR)

    # Resize the overlay.
    overlay_image = overlay_image.resize(background.size, Image.BILINEAR)

    # Specify which pokemon sprite is used.
    pokemon_img = Image.open('pokemon-go-images/{}.png'.format(pokemon))

    # Convert images to RGBA format.
    background = background.convert('RGBA')
    overlay_image = overlay_image.convert('RGBA')
    pokemon_img = pokemon_img.convert('RGBA')

    new_img = background
    new_img.paste(overlay_image, (0, 0), overlay_image)

    # Place the pokemon sprite centered on the background + overlay image.
    new_img.paste(pokemon_img,
                  (int(width / 4), int(base_height / 4)),
                  pokemon_img)

    # Save the new image.
    new_img.save(original_image_path,'PNG')</pre><p>Try running it on your own image. This works best with images taken on phones, but let&#8217;s just see if it works for now. Open up your Python shell in the same directory as the file you just created and enter the following two lines:</p><pre class="crayon-plain-tag">from overlay import overlay
overlay('path/to/image', 'mewtwo')</pre><p>Now open the new image and see if you are catching a Mewtwo on a train like I am:</p>
<p><img class="&quot; aligncenter" style="width: 384.00px; height: 512.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/08/Kh9mnGYDHMcZ2EUO_Y4ULRpjqzANoNiODED1Ko2GJLpq2HUPMoF3SgNSnv0A-tyS7tZ3dtRJGQOBr0OIQy3TRrQCet-wWOcP4nJWEY4JI1WWaYAVUsAu7Gun5Z4dafTH-pxyefpn.png" alt="mewtwo_spotted.png" /></p>
<h3 id="h.cf9726bxf5o8" class="c2 c5">Responding to picture text messages</h3>
<p>We need a Twilio phone number before we can respond to messages. You can <a href="https://www.twilio.com/console/phone-numbers/search">buy a Twilio phone number here</a>.</p>
<p>Now that we have the image manipulation taken care of, make a Flask app that receives picture messages and responds to them with a Pokemon being captured in that picture.</p>
<p>Open a file called <code>app.py</code> in the same directory as before and add the following code:</p><pre class="crayon-plain-tag">import requests
from flask import Flask, request, send_from_directory
from twilio import twiml

from overlay import overlay

UPLOAD_FOLDER = '/Path/to/your/code/directory'
legendary_pokemon = ['articuno', 'zapdos', 'moltres', 'mewtwo', 'mew']

app = Flask(__name__)


@app.route('/sms', methods=['POST', 'GET'])
def sms():
    # Generate TwiML to respond to the message.
    response = twiml.Response()
    response.message("Please wait while we try to catch your Pokemon")

    if request.form['NumMedia'] != '0':

        # Default to Mew if no Pokemon is selected.
        if request.form['Body']:
            # Take the first word they sent, and convert it to lowercase.
            pokemon = request.form['Body'].split()[0].lower()
            if not pokemon in legendary_pokemon:
                pokemon = 'mew'
        else:
            pokemon = 'mew'

        # Save the image to a new file.
        filename = request.form['MessageSid'] + '.png'
        with open('{}/{}'.format(UPLOAD_FOLDER, filename), 'wb') as f:
           image_url = request.form['MediaUrl0']
           f.write(requests.get(image_url).content)

        # Manipulate the image.
        overlay('{}/{}'.format(UPLOAD_FOLDER, filename), pokemon)

        # Respond to the text message.
        with response.message() as message:
            message.body = "{0}".format("Congrats on the sweet catch.")
            message.media('http://{your_ngrok_url}/uploads/{}'.format(filename))
    else:
        response.message("Send me an image that you want to catch a Pokemon on!")

    return str(response)


@app.route('/uploads/', methods=['GET', 'POST'])
def uploaded_file(filename):
    return send_from_directory(UPLOAD_FOLDER, filename)

if __name__ == "__main__":
    app.run()</pre><p>The <code>/sms</code> route responds to an <a href="https://www.twilio.com/docs/quickstart/python/sms/hello-monkey">incoming text message</a> with some Twilio flavored XML called <a href="https://www.twilio.com/docs/api/twiml">TwiML</a>. Notice that the ‘NumMedia’ parameter is not zero, meaning we received an MMS. Twilio does not return an image itself, they return a URL to the image.</p>
<p>We create a string called filename using the <code>MessageSid</code> parameter to maintain a unique identifier for each image. Then the program opens the file to write the content of Twilio’s image to the file.</p>
<p>The second route, <code>/uploads/&lt;filename&gt;</code> handles the delivery of the <code>message.media</code> TwiML using that URL to retrieve the new image.</p>
<p>Your Flask app will need to be visible from the internet in order for Twilio to send requests to it. We will use <a href="https://www.twilio.com/blog/2015/09/6-awesome-reasons-to-use-ngrok-when-testing-webhooks.html">ngrok</a> for this, which you’ll need to install if you don’t have it. In your terminal run the following command:</p><pre class="crayon-plain-tag">ngrok http 5000</pre><p><img class="&quot; aligncenter" style="width: 624.00px; height: 173.33px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/08/yjHkInUbMGrCihY3LTrX-m37FxJs-kaZ67KS9fWgqibk0flIc9pTPbxg04VMtv1dqkxBXAzSssvMMmxkEqNYdid_dAScvUs7WO1YbKbuWZ4tKZMhBZI5eJ1IikXwjxKT8dEcxTad.png" alt="bLqHzdmXrzBH4pEr4ADRoWbU2Kgitkg848ZYE-aRACC0ZGMgC6a_98CmPb9VCzvFSrpbbDc35J_IdTwUShfEqx4zuzJdqthNy9En-RE3-8Ma2h3gXOzA3kErkbqrvjqBZxJg4sZH.png" /></p>
<p>This provides us with a publicly accessible URL to the Flask app. Configure your phone number as seen in this image:</p>
<p><img class="&quot; aligncenter" style="width: 624.00px; height: 129.33px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/08/hLcTZHwSC3_pwqO87dSM13v8vtDdN3hcpLTlxeRQJAkJWJxoJuqXgxf1pA4WCClYoJSjXNdyo_BBbaEbNvuuEbJdv13BhXQXkT1mxTymdfvkGXRe1HegPurZyyN__QLHiL7jSyBD.png" alt="022N1RISjv9KCUvlhfN4dJtBKJvzP_96q9d558H2YMmpLGOoyl9PSqap29D11yzHgHHJVCY2u6x86xQs37xvSv1ZB3t7vxZEp3rb4n58ZuvwdSkT-ydPBD8DgvCqMmknzPHF3r4w.png" /></p>
<p>Before testing this out, make sure that you’ve changed the file paths and the URL to reflect your own.</p>
<p>Now try texting an image and the name of a legendary Pokemon to your newly configured Twilio number. Looks like we found a Zapdos in the Twilio New York office!</p>
<p><img class="&quot; aligncenter" style="width: 384.00px; height: 512.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/08/340VI5qIe56hRInfbKWYzkY0l34DEGJZEHtTNcB1OTTP_I212YIshes022s-dGrkZ3Vb_krDgF3g0fbmNLt0AANtw_gixk8YtL_9cRb-63iIIbWzfWgTl4tHPnGnOfdFXtBc8OaH.png" alt="zapdos_spotted.png" /></p>
<h3 id="h.qh3mb1jwurqo" class="c2 c5">Time to catch &#8217;em all!</h3>
<p>Now that you can send messages to make it look like you are catching legendary Pokemon in any arbitrary picture, your quest to making your friends think you are a Pokemon master can truly begin.</p>
<p>The code for this project also lives on <a href="https://github.com/sagnew/pokemon-faux">this GitHub repository</a>.</p>
<p>For more Pokemon Go-related awesomeness, check out <a href="https://www.twilio.com/blog/2016/07/pokemon-go-sms-node-js-twilio.html">this post</a> that will walk you through setting up SMS alerts when rare Pokemon are nearby.</p>
<p>Feel free to reach out if you have any questions or comments or just want to show off the cool stuff you’ve built.</p>
<ul style="padding-left: 36px;">
<li>Email: sagnew@twilio.com</li>
<li>Twitter: <a href="http://twitter.com/sagnewshreds">@Sagnewshreds</a></li>
<li>Github: <a href="https://github.com/sagnew">Sagnew</a></li>
<li>Twitch (streaming live code): <a href="http://www.twitch.tv/sagnewshreds">Sagnewshreds</a></li>
</ul>
<p>Thanks to my good friend <a href="https://github.com/9">Shahan Akhter</a> for helping out with image manipulation and tweaking the Python code to make the images look better.</p>
<p><a href="https://twilioinc.wpengine.com/2016/08/pokemon-faux-create-fake-pokemon-go-screenshots-with-python-flask-and-twilio-mms.html">Pokemon Faux: Create Fake Pokemon Go Screenshots with Python, Flask and Twilio MMS</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2016/08/pokemon-faux-create-fake-pokemon-go-screenshots-with-python-flask-and-twilio-mms.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>SMS Sentiment Analysis in Python with Flask and the IBM Watson Twilio Add-on</title>
		<link>https://twilioinc.wpengine.com/2016/07/sms-sentiment-analysis-in-python-with-flask-and-the-ibm-watson-twilio-add-on.html</link>
		<comments>https://twilioinc.wpengine.com/2016/07/sms-sentiment-analysis-in-python-with-flask-and-the-ibm-watson-twilio-add-on.html#respond</comments>
		<pubDate>Thu, 14 Jul 2016 19:37:58 +0000</pubDate>
		<dc:creator><![CDATA[Sam Agnew]]></dc:creator>
				<category><![CDATA[Code, Tutorials and Hacks]]></category>
		<category><![CDATA[Add-ons]]></category>
		<category><![CDATA[Flask]]></category>
		<category><![CDATA[IBM Watson]]></category>
		<category><![CDATA[Python]]></category>
		<category><![CDATA[Sentiment Analysis]]></category>
		<category><![CDATA[SMS]]></category>
		<category><![CDATA[Twilio Add-ons]]></category>
		<category><![CDATA[twilio sms]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=18283</guid>
		<description><![CDATA[<p>With Twilio&#8217;s new Add-ons marketplace developers can reap the benefits of third party APIs with the flip of a switch. The IBM Watson Message Sentiment Add-on adds sentiment analysis information to every SMS request sent to your web application. Let&#8217;s build a Flask app that will determine the sentiment of text messages sent to your Twilio number. Getting started Before writing any code make sure you have: Python... <a class="read-more" href="https://twilioinc.wpengine.com/2016/07/sms-sentiment-analysis-in-python-with-flask-and-the-ibm-watson-twilio-add-on.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2016/07/sms-sentiment-analysis-in-python-with-flask-and-the-ibm-watson-twilio-add-on.html">SMS Sentiment Analysis in Python with Flask and the IBM Watson Twilio Add-on</a></p>]]></description>
				<content:encoded><![CDATA[<p>With Twilio&#8217;s <a href="https://www.twilio.com/docs/api/add-ons">new Add-ons marketplace</a> developers can reap the benefits of third party APIs with the flip of a switch. The <a href="https://www.twilio.com/console/add-ons/XB28c1cef739ee28431d743fa2794132d4">IBM Watson Message Sentiment Add-on</a> adds sentiment analysis information to every SMS request sent to your web application.</p>
<p>Let&#8217;s build a Flask app that will determine the sentiment of text messages sent to your Twilio number.</p>
<h3 class="c0 c3" id="h.bht5xri4xpgp">Getting started</h3>
<p>Before writing any code make sure you have:</p>
<ul style="padding-left: 36px";>
<li>
<a href="https://www.python.org/downloads/">Python and pip</a> installed.
</li>
<li>
A Twilio Account – <a href="https://www.twilio.com/try-twilio">Sign up for free</a>
</li>
<li>
Your Account SID and Auth Token handy from the <a href="https://www.twilio.com/user/account/">Twilio dashboard</a>
</li>
</ul>
<p>
Now let&#8217;s install the necessary third party libraries.</p>
<p>Run the following commands in your terminal to install Flask and the Twilio Python module, preferably in a <a href="https://www.twilio.com/docs/quickstart/python/devenvironment#installing-virtualenv-with-python-3">virtual environment</a>:
</p>
<p></p><pre class="crayon-plain-tag">pip install flask
pip install twilio</pre><p></p>
<h3 class="c0 c3" id="h.6fd7qr1o9xgy">Responding to Incoming text messages</h3>
<p>Before being able to respond to messages, you&#8217;ll need a Twilio phone number. You can <a href="https://www.twilio.com/console/phone-numbers/search">buy a phone number here</a>.</p>
<p>Now let&#8217;s create a web app that responds to text messages sent to this number. Open a file called <code>app.py</code> and create a Flask app with one route:
</p>
<p></p><pre class="crayon-plain-tag">from flask import Flask, request
from twilio import twiml


app = Flask(__name__)


@app.route('/sms', methods=['POST'])
def sms_reply():
    message_received = request.form['Body']
    response_message = 'Your message was {}.'.format(message_received)

    response = twiml.Response()
    response.message(response_message)
    return str(response)


app.run()</pre><p>
<p>
When a text comes into Twilio, Twilio makes an HTTP request to your webapp and expects instructions back in the form of <a href="https://www.twilio.com/docs/api/twiml">TwiML</a>. The single route on this web app uses the Twilio Python library to generate and return TwiML that responds to the <a href="https://www.twilio.com/docs/quickstart/python/sms/hello-monkey"incoming text message> with another message.</a></p>
<p>Your Flask app will need to be visible from the Internet in order for Twilio to send requests to it. We will use <a href="https://www.twilio.com/blog/2015/09/6-awesome-reasons-to-use-ngrok-when-testing-webhooks.html">ngrok</a> for this, which you&#8217;ll need to install if you don&#8217;t have it.  In your terminal run the following command:
</p>
<p></p><pre class="crayon-plain-tag">ngrok http 5000</pre><p>
<p>
<img alt="Screen Shot 2016-07-14 at 10.52.54 AM.png" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/07/bLqHzdmXrzBH4pEr4ADRoWbU2Kgitkg848ZYE-aRACC0ZGMgC6a_98CmPb9VCzvFSrpbbDc35J_IdTwUShfEqx4zuzJdqthNy9En-RE3-8Ma2h3gXOzA3kErkbqrvjqBZxJg4sZH.png" style="width: 624.00px; height: 173.33px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" class='" aligncenter'></p>
<p>This provides us with a publicly accessible URL to the Flask app. Configure your phone number as seen in this image:<br />
        <br />
<img alt="Screen Shot 2016-07-14 at 10.54.53 AM.png" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/07/022N1RISjv9KCUvlhfN4dJtBKJvzP_96q9d558H2YMmpLGOoyl9PSqap29D11yzHgHHJVCY2u6x86xQs37xvSv1ZB3t7vxZEp3rb4n58ZuvwdSkT-ydPBD8DgvCqMmknzPHF3r4w.png" style="width: 624.00px; height: 129.33px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" class='" aligncenter'></p>
<p>You are now ready to <a href="https://www.twilio.com/docs/api/rest/sending-messages">send a text message</a> to your new Twilio number.</p>
<h3 class="c0 c3" id="h.an4ku3b9ub8l">SMS Sentiment Analysis with IBM Watson</h3>
<p>To add sentiment analysis to all of your <a href="https://www.twilio.com/docs/quickstart/python/sms/hello-monkey"incoming text messages</a>, you just need to activate the <a href="https://www.twilio.com/console/add-ons/XB28c1cef739ee28431d743fa2794132d4">IBM Watson Message Sentiment Add-on</a> by clicking the &#8220;Install&#8221; button in your console.</p>
<p><img alt="Screen Shot 2016-07-14 at 10.57.24 AM.png" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/07/JbJ_2OIyGvfkXg8Dl3Oq-xbFZ95T_aMbReiL4mcYMARtypsc9ZLdmnqy5X5Bq5Ddm_w4m8GDDT3p93kAMXxFPW_LGv4KZGrbAPzc6bu0dEm8E6yH6gXyQJDkIAcZUyhg-3Zli4mR.png" style="width: 624.00px; height: 193.33px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" class='" aligncenter'></p>
<p>In the POST request sent to your application, there will be a new AddOns field, inside of which you can access the data from the IBM Watson API:
</p>
<p></p><pre class="crayon-plain-tag">{ 
    "status": "REQUEST_STATUS",
        "language": "DOCUMENT_LANGUAGE",
    "docSentiment": {
        "type": "SENTIMENT_LABEL",
        "score": "DOCUMENT_SENTIMENT",
        "mixed": "SENTIMENT_MIXED"
    } 
}</pre><p>
<p>
This <code>AddOns</code> object will be JSON that you will need to parse. Open <code>app.py</code> again and add the following line to the top of your code:
</p>
<p></p><pre class="crayon-plain-tag">import json</pre><p>
<p>
To access the sentiment of the incoming messages, you just need to add a few more lines of code. Open <code>app.py</code> again and rewrite your <code>/sms</code> route:
</p>
<p></p><pre class="crayon-plain-tag">@app.route('/sms', methods=['POST'])
def sms_reply():
    add_ons = json.loads(request.form['AddOns'])
    if add_ons['status'] == 'successful':
        result = add_ons['results']['ibm_watson_sentiment']['result']
        sentiment = result['docSentiment']['type']
        response_message = 'Your response was {}.'.format(sentiment)
    else:
        response_message = 'An error has occured.'

    response = twiml.Response()
    response.message(response_message)
    return str(response)</pre><p>
<p>
Now send some happy and sad text messages to your Twilio number!</p>
<h3 class="c0 c3" id="h.7u3udt3mc37c">Looking Ahead</h3>
<p>With some configuration and a few extra lines of code, you can get the sentiment of all messages sent to your Twilio phone numbers, whether you&#8217;re using it to improve customer experience or to decide which GIFs to send to your users.</p>
<p><img alt="U1VADVq.gif" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/07/DpbyhzG3QROPfzznNttJu3UhInL4HCsxx-_pC_UgaEBa8gXtfwA_-HIp9qUL3NzFjSzNbVdypOMTW3f5ELeZyJ-ZQWCVlwD1qXbA46no1ullJFrXYlBVhIQ91mqv1cSSOQ__osl3.png" style="width: 422.00px; height: 238.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" class='" aligncenter'></p>
<p>Feel free to reach out if you have any questions or comments or just want to show off the cool stuff you’ve built.</p>
<ul style="padding-left: 36px";>
<li>
Email: <a class="c6" href="mailto:sagnew@twilio.com">sagnew@twilio.com</a>
</li>
<li>
Twitter: <a href="http://twitter.com/sagnewshreds">@Sagnewshreds</a>
</li>
<li>
Github: <a href="https://github.com/sagnew">Sagnew</a>
</li>
<li>
Twitch (streaming live code): <a href="http://www.twitch.tv/sagnewshreds">Sagnewshreds</a>
</li>
</ul>
<p><a href="https://twilioinc.wpengine.com/2016/07/sms-sentiment-analysis-in-python-with-flask-and-the-ibm-watson-twilio-add-on.html">SMS Sentiment Analysis in Python with Flask and the IBM Watson Twilio Add-on</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2016/07/sms-sentiment-analysis-in-python-with-flask-and-the-ibm-watson-twilio-add-on.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>How to Validate Phone numbers in Node/JavaScript with the Twilio Lookup API</title>
		<link>https://twilioinc.wpengine.com/2016/06/how-to-validate-phone-numbers-in-nodejavascript-with-the-twilio-lookup-api.html</link>
		<comments>https://twilioinc.wpengine.com/2016/06/how-to-validate-phone-numbers-in-nodejavascript-with-the-twilio-lookup-api.html#respond</comments>
		<pubDate>Thu, 30 Jun 2016 17:21:33 +0000</pubDate>
		<dc:creator><![CDATA[Sam Agnew]]></dc:creator>
				<category><![CDATA[Code, Tutorials and Hacks]]></category>
		<category><![CDATA[JavaScript]]></category>
		<category><![CDATA[Lookup]]></category>
		<category><![CDATA[Node.js]]></category>
		<category><![CDATA[Twilio Lookup]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=18242</guid>
		<description><![CDATA[<p>Twilio Lookup is a phonebook REST API that you can use to check whether a number exists, determine whether a phone can receive text messages, and retrieve carrier data associated with a number. Let&#8217;s write some code to validates phone numbers using the Twilio Node module. Getting started Before we dive into the code you&#8217;ll need to make sure you have: Node.js and npm installed A Twilio Account –... <a class="read-more" href="https://twilioinc.wpengine.com/2016/06/how-to-validate-phone-numbers-in-nodejavascript-with-the-twilio-lookup-api.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2016/06/how-to-validate-phone-numbers-in-nodejavascript-with-the-twilio-lookup-api.html">How to Validate Phone numbers in Node/JavaScript with the Twilio Lookup API</a></p>]]></description>
				<content:encoded><![CDATA[<p><a href="https://www.twilio.com/docs/api/lookups">Twilio Lookup</a> is a phonebook REST API that you can use to check whether a number exists, determine whether a phone can receive text messages, and retrieve carrier data associated with a number.</p>
<p>Let&#8217;s write some code to validates phone numbers using the <a href="https://www.twilio.com/docs/libraries/node">Twilio Node module</a>.</p>
<h3 id="h.64nv0ut11eer" class="c0">Getting started</h3>
<p>Before we dive into the code you&#8217;ll need to make sure you have:</p>
<ul style="padding-left: 36px;">
<li><a href="https://nodejs.org/en/download/">Node.js and npm</a> installed</li>
<li>A Twilio Account – <a href="https://www.twilio.com/try-twilio">Sign up for free</a></li>
<li>Your Account SID and Auth Token handy from the <a href="https://www.twilio.com/console">Twilio console</a></li>
<li>The Twilio Node module. You can install this by opening your terminal, navigating to where your code lives and entering the following command:</li>
</ul>
<p></p><pre class="crayon-plain-tag">npm install twilio</pre><p></p>
<h3 id="h.nfrsmdel2brz" class="c0">Looking up valid phone numbers</h3>
<p>Check out the <a href="https://www.twilio.com/lookup">Lookup page</a> if you want to play around with the API and see the type of data a request will return. Try entering your own phone number and take a look at the JSON response object.<br />
<img class="&quot; aligncenter" style="width: 600.00px; height: 363.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/06/2Qy7qeYdcmPNNU2qhsFgV3IcgZng-T1Y2dk1qW5VIW4LsDHJs0vpUquhrEwgDuGrURD_O0ZYU33IgzHE51hfAvQAiz056hJtLsWjxwCuEXax5JBxUt5fc3Eu2C5_YyvQrGDt6Jq.png" alt="wHLLAonZ_tZrBbCmp6F1lySl47uhcez_eUi8WXH0y6MhsBBMK2zmPTdaFz-CAE266CHmE0OEay5py66QUNJ2N9qL60Wtp64mJLFW-LotKtFsVVEZSnT_daY3xGZpFaKb4WZcKaej.png" /><br />
Here’s a quick code sample to do a basic phone number lookup. Create a file named <code>lookup.js</code> and add <a href="https://www.twilio.com/docs/api/lookups#lookup-with-e164-formatted-number">this code</a> to it:</p>
<p></p><pre class="crayon-plain-tag">const accountSid = '{{ YOUR_ACCOUNT_SID }}';
const authToken = '{{ YOUR_AUTH_TOKEN }}';
const LookupsClient = require('twilio').LookupsClient;
const client = new LookupsClient(accountSid, authToken);

client.phoneNumbers('+15108675309').get((error, number) => {
  console.log(number.national_format);
  console.log(number.country_code);
  
  // This will sometimes be null
  console.log(number.caller_name);
});</pre><p></p>
<p>In your terminal navigate to the directory containing lookup.js and run this command:</p>
<p></p><pre class="crayon-plain-tag">node lookup.js</pre><p></p>
<p><img class="&quot; aligncenter" style="width: 279.00px; height: 68.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/06/3sHGp4E04Eo4UydxIb6JeiAu2Oo6W-pWzkTdkaF-cKHurU0W2KeudlqtwhPtc_tDmxFAeP6DMtk5ytOrK_HMHYaSvKtFms7TWwYC0GvxvaAPub4z0Dwy-EKZ9ewjO6BCG7qMfdN.png" alt="Screen Shot 2016-06-29 at 11.09.03 AM.png" /></p>
<p>This basic functionality is free, but you can get more information by doing a carrier lookup. Carrier lookups are commonly used to determine if a number is capable of receiving SMS/MMS messages. <a href="https://www.twilio.com/lookup#pricing">These cost $0.005 per request</a> but a free account has some trial credit to play with.</p>
<p>Carrier lookups contain a ton of useful information, but require an extra parameter.</p>
<p>Replace the code in <code>lookup.js</code> with the following:</p><pre class="crayon-plain-tag">const accountSid = '{{ YOUR_ACCOUNT_SID }}';
const authToken = '{{ YOUR_AUTH_TOKEN }}';
const LookupsClient = require('twilio').LookupsClient;
const client = new LookupsClient(accountSid, authToken);

client.phoneNumbers('+15108675309').get({
  type: 'carrier'
}, (error, number) => {
  // If carrier.type is 'mobile' then the number can receive SMS
  console.log(number.carrier.type);
  console.log(number.carrier.name);
});</pre><p></p>
<p>And run it again:</p>
<p></p><pre class="crayon-plain-tag">node lookup.js</pre><p></p>
<h3 id="h.xm5qs1i4tn69" class="c0">Looking up invalid phone numbers</h3>
<p>In this “online phonebook” the phone numbers serve as a unique ID. When you try to look up a phone number that does not exist you will get a 404 response.</p>
<p>Head over to the <a href="https://www.twilio.com/lookup">Lookup homepage</a> again to see this in action when you check a number that doesn’t exist:</p>
<p><img class="&quot; aligncenter" style="width: 600.00px; height: 383.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/06/n5KjgqxJBpZnaPOiMcg1S4vJ0HCUkiCdH2UKx2VsOiWBpwZrf-1EKqPAGEbP5CCIKHNSGcSAc9gCg94TosAmcOz3jar-C27a4foOxo8zk9j6Swtjzfflwzo-vUI3qtVVbgPEPpoS.png" alt="EMDbcMtF0r7ud96ZjXKa2nMoNyaMXz5ALc_sBu0f9VkTy1jPn3aSHGPusFTlsp5QUzyXK1FW7uj_1leGbasXYwISrVK1wFygbHoEeksbkbLR2NR4LzDrjTi67m3tjsVVt8Os6OeI.png" /></p>
<p>Let’s write some code that looks up a phone number and determines whether it exists or not. We’ll do this by trying to do a carrier lookup and checking to see if an error object is passed to your callback function with a 404 error code.</p>
<p>Replace the code in <code>lookup.js</code> with the following:</p><pre class="crayon-plain-tag">const accountSid = '{{ YOUR_ACCOUNT_SID }}';
const authToken = '{{ YOUR_AUTH_TOKEN }}';
const LookupsClient = require('twilio').LookupsClient;
const client = new LookupsClient(accountSid, authToken);
const phoneNumber = process.argv[2];

client.phoneNumbers(phoneNumber).get({
  type: 'carrier'
}, (error, number) => {
  let message = number ? number.national_format + ' is valid' : error;
  if (error && error.status === 404) {
    message = 'Invalid phone number';
  }
  console.log(message);
});</pre><p>Run this code in your terminal with the following command, and don’t forget to insert your Account SID and Auth Token:</p><pre class="crayon-plain-tag">node lookup.js +11234567890</pre><p>You can now use this whenever you need to determine if a phone number is valid.</p>
<h3 id="h.iiwv2vvujubf" class="c0">Looking Ahead</h3>
<p>Now you know how to use the REST API phone book that is Twilio Lookup. You can also check out other resources to learn how to use Lookup in other languages:</p>
<ul style="padding-left: 36px;">
<li>Lookup phone numbers in <a href="https://www.twilio.com/blog/2016/02/how-to-verify-phone-numbers-in-python-with-the-twilio-lookup-api.html">Python</a>, <a href="https://www.twilio.com/blog/2016/03/how-to-validate-phone-numbers-in-php-with-the-twilio-lookup-api.html">PHP</a> or <a href="https://www.twilio.com/blog/2015/04/validate-phone-numbers-in-ruby-using-the-lookup-api.html">Ruby</a>.</li>
<li>Check out the Lookups API <a href="https://www.twilio.com/docs/api/lookups">documentation</a> to see what else you can do.</li>
</ul>
<p>Lookups also supports <a href="https://www.twilio.com/docs/api/addons">Twilio Add-ons</a>, enabling you to retrieve information from a multitude of 3rd party data sources, available via the Twilio Marketplace. There are some awesome features that work <a href="https://www.twilio.com/console/add-ons/product/lookup">specifically with Lookup</a>.</p>
<p>Feel free to reach out if you have any questions or comments or just want to show off the cool stuff you’ve built.</p>
<ul style="padding-left: 36px;">
<li>Email: sagnew@twilio.com</li>
<li>Twitter: <a href="http://twitter.com/sagnewshreds">@Sagnewshreds</a></li>
<li>Github: <a href="https://github.com/sagnew">Sagnew</a></li>
<li>Twitch (streaming live code): <a href="http://www.twitch.tv/sagnewshreds">Sagnewshreds</a></li>
</ul>
<p><a href="https://twilioinc.wpengine.com/2016/06/how-to-validate-phone-numbers-in-nodejavascript-with-the-twilio-lookup-api.html">How to Validate Phone numbers in Node/JavaScript with the Twilio Lookup API</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2016/06/how-to-validate-phone-numbers-in-nodejavascript-with-the-twilio-lookup-api.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
