<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Al Cook &#8211; Twilio Cloud Communications Blog</title>
	<atom:link href="https://twilioinc.wpengine.com/author/al-cook/feed" rel="self" type="application/rss+xml" />
	<link>https://twilioinc.wpengine.com</link>
	<description></description>
	<lastBuildDate>Fri, 13 Jan 2017 19:24:02 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.2</generator>

<image>
	<url>https://twilioinc.wpengine.com/wp-content/uploads/2015/09/cropped-favicon_1141-32x32.png</url>
	<title>Al Cook &#8211; Twilio Cloud Communications Blog</title>
	<link>https://twilioinc.wpengine.com</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Building an IVR with no code by using TaskRouter as a state machine</title>
		<link>https://twilioinc.wpengine.com/2017/01/building-an-ivr-with-no-code-by-using-taskrouter-as-a-state-machine.html</link>
		<comments>https://twilioinc.wpengine.com/2017/01/building-an-ivr-with-no-code-by-using-taskrouter-as-a-state-machine.html#respond</comments>
		<pubDate>Thu, 12 Jan 2017 16:00:47 +0000</pubDate>
		<dc:creator><![CDATA[Al Cook]]></dc:creator>
				<category><![CDATA[Code, Tutorials and Hacks]]></category>
		<category><![CDATA[Task Router]]></category>
		<category><![CDATA[XML]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=19411</guid>
		<description><![CDATA[<p>The other day, a customer showed me their Twilio-powered IVR. Specifically, the code that tracks a caller&#8217;s progress through the IVR. They built an IVR state machine that solved some of the common challenges many run into when building a complex, multi-stage IVR: They wanted a generic, re-usable solution to keep track of where each caller is within the overall IVR experience each time you get... <a class="read-more" href="https://twilioinc.wpengine.com/2017/01/building-an-ivr-with-no-code-by-using-taskrouter-as-a-state-machine.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2017/01/building-an-ivr-with-no-code-by-using-taskrouter-as-a-state-machine.html">Building an IVR with no code by using TaskRouter as a state machine</a></p>]]></description>
				<content:encoded><![CDATA[<p><span style="font-weight: 400;">The other day, a customer showed me their Twilio-powered IVR. Specifically, the code that tracks a caller&#8217;s progress through the IVR. They built an IVR state machine that solved some of the common challenges many run into when building a complex, multi-stage IVR:</span></p>
<ul>
<li style="font-weight: 400;"><span style="font-weight: 400;">They wanted a generic, re-usable solution to keep track of where each caller is within the overall IVR experience each time you get a webhook, rather than hard-coding the state tracking to the current configuration of the IVR</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">They wanted for people to be able to change the configuration of the IVR  without making code changes. </span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">They wanted a JSON based syntax for defining an IVR workflow so that they could tie it to a visual IVR flow builder which automatically creates the right JSON.</span></li>
</ul>
<p><span style="font-weight: 400;">Their demo sparked this thought &#8211; at its heart, <a href="https://www.twilio.com/docs/api/taskrouter">TaskRouter</a> is a state machine. </span></p>
<p><span style="font-weight: 400;">I built an IVR abstraction on top of TaskRouter to function as a backbone, and solve the typical challenges of tracking state. </span></p>
<p><span style="font-weight: 400;">I found you can build an IVR with nothing but TaskRouter and TwiML Bins. </span></p>
<p><span style="font-weight: 400;">What I built uses the TaskRouter workflow syntax for defining the flow between different states, and TwiML Bins for hosting the XML associated with each state. This post shows you the architecture of the backbone hack. Grab it here on </span><a href="https://github.com/calozpom/taskrouterivr"><span style="font-weight: 400;">GitHub</span></a></p>
<p><b>How it works</b></p>
<p><span style="font-weight: 400;">Each call coming in to the IVR is represented as a task within TaskRouter &#8211; the task is created the first time the call hits my application server, and from then on the same Task is used for each subsequent webhook, by looking up the Task from the CallSid.</span></p>
<p><span style="font-weight: 400;">Each TaskQueue represents a state within the IVR &#8211; i.e. a spoken menu and a DTMF <pre class="crayon-plain-tag">&lt;Gather&gt;</pre>  request for the caller to specify where they want to go next. As the caller navigates the IVR, the Task is updated with what state they just left, and what DTMF digits they entered &#8211; and then the TaskRouter workflow expression dictates which TaskQueue state the call moves to next &#8211; and therefore what TwiML should be returned to Twilio. </span></p><pre class="crayon-plain-tag">app.post('/initiateivr', function(request, response) {
    var attributesJson = {};
    checkForExistingTask(request.body['CallSid'], function(returnedTask) {
        if (!returnedTask) {
            attributesJson['CallSid'] = request.body['CallSid'];
            attributesJson['From'] = request.body['From'];
            attributesJson['To'] = request.body['To'];
            createTask(attributesJson, function(returnedTask){
                response.send(getTwimlfromTwimlBin(returnedTask));
            });
        }
        else {
            attributesJson['exited_node'] = returnedTask.task_queue_friendly_name.split(':')[0];
            attributesJson[returnedTask.task_queue_friendly_name.split(':')[0] + '_entered_digits'] = request.body['Digits'];
            updateTask(attributesJson, returnedTask, function(updatedTask){
                response.send(getTwimlfromTwimlBin(updatedTask));
            });
        }
    });
});</pre><p><span style="font-weight: 400;">In order to return the right TwiML, each IVR State (TaskQueue) is correlated with a TwiML Bin which hosts the TwiML for that state. When Twilio webhooks to my application server seeking instructions for what to do with the call, my application server looks up what TaskQueue the Task is currently in, and then returns the TwiML from the TwiML Bin associated with that TaskQueue. It does this based on the name of each TaskQueue being of the form <pre class="crayon-plain-tag">&lt;Friendly_name&gt;:&lt;TwiMLBin Sid&gt;</pre> . </span></p>
<p><span style="font-weight: 400;">When a caller enters digits from a <pre class="crayon-plain-tag">&lt;Gather&gt;</pre>  in that TwiML, before looking up the TaskQueue, my code first updates the task with an attribute containing the digits entered, and the last state left &#8211; so that TaskRouter re-routes the Task to the new TaskQueue based on this new information. So for example if a <pre class="crayon-plain-tag">&lt;Gather&gt;</pre>  in the state “first_state” of an IVR led to digits being entered, those digits will be available within an attribute on the Task as <pre class="crayon-plain-tag">first_state_entered_digits.</pre> </span></p><pre class="crayon-plain-tag">attributesJson['exited_state'] = returnedTask.task_queue_friendly_name.split(':')[0];

attributesJson[returnedTask.task_queue_friendly_name.split(':')[0] + '_entered_digits'] = request.body['Digits'];

updateTask(attributesJson, returnedTask, function(updatedTask){

   response.send(getTwimlfromTwimlBin(updatedTask));

});</pre><p><span style="font-weight: 400;">In addition, TaskRouter will pass all of the Task’s current attributes to the TwiML Bin, so any of them can be read aloud by the TwiML by simply including the attribute name in the form <pre class="crayon-plain-tag">{{task_&lt;attributename&gt;}}</pre> . E.g:</span></p><pre class="crayon-plain-tag">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;Response&gt;

 &lt;Say&gt;Thank you for confirming your ZIP code. You entered {{task_first_state_entered_digits}}&lt;/Say&gt;

&lt;/Response&gt;</pre><p><span style="font-weight: 400;">My application server will also automatically insert spaces between any sequence of numbers, or an E164 number before including it in the parameters to the TwiML Bin, in order to have Twilio pronounce it correctly. This is why all attributes are referenced with a </span><span style="font-weight: 400;">task_</span><span style="font-weight: 400;"> prefix from the TwiML Bin, so you can take advantage of this automatic number formatting.</span></p>
<p><b>An example flow</b></p>
<p><span style="font-weight: 400;">So to piece together the different parts, let’s walk through a basic IVR example where a caller dials in, hears a menu, presses 1, and then hears a different menu. In this scenario:</span></p>
<ul>
<li style="font-weight: 400;"><span style="font-weight: 400;">When the call first comes in, the application server receives a webhook from Twilio. It verifies this is a new call and creates a task associated with it</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">When the task is created, Twilio returns the TaskQueue it has been routed to based on the workflow. My application server then fetches the TwiML from the TwiML Bin associated with that TaskQueue</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">The application server returns that TwiML to Twilio in response to the initial webhook. This TwiML includes a <pre class="crayon-plain-tag">&lt;Gather&gt;</pre>  requesting DTMF digits, which once fulfilled will webhook to my application server again.</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">When the webhook for the completed <pre class="crayon-plain-tag">&lt;Gather&gt;</pre>  comes in, my application server finds the correlating Task based on CallSid. It then updates the attributes of the task with the dialed digits and the state the Task just exited. </span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">Twilio responds to that task update with the new TaskQueue (state) which the task has been routed to based on the new attributes. My application server retrieves the TwiML Bin associated with that new TaskQueue, and responds to the webhook for the completed <pre class="crayon-plain-tag">&lt;Gather&gt;</pre>  with that TwiML. </span></li>
</ul>
<p>&nbsp;</p>
<p><b>Building IVR workflows in TaskRouter</b></p>
<p><span style="font-weight: 400;">So now we have the framework for our IVR flow builder, everything else can be configured with no code, using only the workflow. </span></p>
<p><span style="font-weight: 400;">So for example, moving from the first state to the second state if the digit ‘1’ is pressed is as simple as:</span></p><pre class="crayon-plain-tag">"filters": [
     {
       "targets": [
         {
           "queue": "WQ77fc8f0cc8346e5ff37ac82dc944e141"
         }
       ],
       "filter_friendly_name": "Send calls from the first state to the second state if they entered 1",
       "expression": "exited_state=='first_state' AND first_state_entered_digits ==1"
     }
   ],</pre><p><span style="font-weight: 400;">And of course because it’s built on TaskRouter all the pre-defined attributes can also be used, so to have a different IVR menu for inside business hours is as simple as:</span></p><pre class="crayon-plain-tag">"filters": [
           {
               "targets": [
                   {
                       "queue": "WQ57cab415732dec475f600c75eab44cc9"
                   }
               ],
               "filter_friendly_name": "Business Hours Menu",
               "expression": "(taskrouter.dayOfWeek IN ['Mon', 'Tue', 'Wed','Thu', 'Fri']
                               AND taskrouter.currentTime &gt; 800
                               AND taskrouter.currentTime &lt; 1730)
            }
       ],</pre><p><b>After the IVR</b></p>
<p><span style="font-weight: 400;">Once the caller has reached a ‘leaf state’ in the IVR where it is ready to be assigned to an agent, it is simply a case of using the workflow to move that to a TaskQueue which has workers matched to it.</span></p>
<p><span style="font-weight: 400;">Alternatively if you wanted to move the task to a different workspace in order to keep TaskQueues and metrics separate, you could maintain an attribute within the task which is a JSON blob of all task attributes, and then <pre class="crayon-plain-tag">&lt;Enqueue&gt;</pre>  the task into a new workflow and include those attributes. </span></p>
<p><b>A foundation for building complex IVRs?</b></p>
<p><span style="font-weight: 400;">I’m excited about the potential of this, and keen to hear your thoughts as to whether this approach would be worth us investing in productizing. You can email me at <a href="mailto:al@twilio.com">al@twilio.com</a>. To get started with TaskRouter, read <a href="https://www.twilio.com/docs/api/taskrouter">the docs</a>.</span></p>
<p><span style="font-weight: 400;">The back end for this is all Node, making heavy use of callbacks for dealing with the asynchronous nature of this. </span><span style="font-weight: 400;"><br />
</span><span style="font-weight: 400;"><br />
</span><i><span style="font-weight: 400;">Disclaimer: In no way is this production quality code. Pull Requests welcome!</span></i></p>
<p><a href="https://twilioinc.wpengine.com/2017/01/building-an-ivr-with-no-code-by-using-taskrouter-as-a-state-machine.html">Building an IVR with no code by using TaskRouter as a state machine</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2017/01/building-an-ivr-with-no-code-by-using-taskrouter-as-a-state-machine.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Introducing Marketplace Add-on support for TaskRouter</title>
		<link>https://twilioinc.wpengine.com/2016/11/introducing-marketplace-add-on-support-for-taskrouter.html</link>
		<comments>https://twilioinc.wpengine.com/2016/11/introducing-marketplace-add-on-support-for-taskrouter.html#respond</comments>
		<pubDate>Fri, 04 Nov 2016 17:00:22 +0000</pubDate>
		<dc:creator><![CDATA[Al Cook]]></dc:creator>
				<category><![CDATA[Developers Drawing The Owl]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=19112</guid>
		<description><![CDATA[<p>Today we’re excited to announce Twilio Marketplace Add-on support for TaskRouter. TaskRouter is Twilio’s skills-based routing engine designed for sending things like customer support interactions or sales leads to the best matched agents. Now with Marketplace support, it’s super easy to make routing decisions based on third party data from the customer’s phone number like location information, demographic information and more. Twilio Marketplace Add-ons can give... <a class="read-more" href="https://twilioinc.wpengine.com/2016/11/introducing-marketplace-add-on-support-for-taskrouter.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2016/11/introducing-marketplace-add-on-support-for-taskrouter.html">Introducing Marketplace Add-on support for TaskRouter</a></p>]]></description>
				<content:encoded><![CDATA[<p><span style="font-weight: 400;">Today we’re excited to announce </span><a href="https://www.twilio.com/docs/api/taskrouter/marketplace"><span style="font-weight: 400;">Twilio Marketplace Add-on support for TaskRouter</span></a><span style="font-weight: 400;">. TaskRouter is Twilio’s skills-based routing engine designed for sending things like customer support interactions or sales leads to the best matched agents</span><span style="font-weight: 400;">.</span></p>
<p><span style="font-weight: 400;">Now with Marketplace support, it’s super easy to make routing decisions based on third party data from the customer’s phone number like location information, demographic information and more.</span></p>
<p><span style="font-weight: 400;">Twilio Marketplace Add-ons can give you information on a caller based on their number by requesting information from a variety of Add-ons.<br />
</span><span style="font-weight: 400;"><br />
</span><span style="font-weight: 400;">For example, you can use </span><a href="https://www.twilio.com/marketplace/add-ons/whitepages-pro-phone-rep"><span style="font-weight: 400;">Whitepages Pro Reputation</span></a><span style="font-weight: 400;"> or </span><a href="https://www.twilio.com/marketplace/add-ons/marchex-cleancall"><span style="font-weight: 400;">Marchex</span></a><span style="font-weight: 400;"> to get a likely spam score on a number. Using </span><a href="https://www.twilio.com/marketplace/add-ons/nextcaller-advanced-caller-id"><span style="font-weight: 400;">Nextcaller</span></a><span style="font-weight: 400;"> or </span><a href="https://www.twilio.com/marketplace/add-ons/whitepages-pro-caller-id"><span style="font-weight: 400;">Whitepages Pro Caller ID</span></a><span style="font-weight: 400;">, you can access demographic information such as household income and home ownership</span><span style="font-weight: 400;">. </span></p>
<p><span style="font-weight: 400;">Using these Add-ons has been as simple as augmenting the webhook that&#8217;s sent to your application server when you receive a call or a text. Now they&#8217;re even easier to use. Add-ons are natively integrated with TaskRouter, so with just a simple Add-on installation you can now route on this data from within the TaskRouter workflow expression. No additional coding required. </span></p>
<p><span style="font-weight: 400;">This means for example that you can prioritize callers based on the likely spam score with the following workflow expression:</span></p><pre class="crayon-plain-tag">     "filter_friendly_name": "lower priority spam",
       "expression": "addons.whitepages_pro_phone_rep.results[0].reputation.level &gt; 3"</pre><p><span style="font-weight: 400;">Or route high net-worth callers who rent their home differently than callers who own their home with the following workflow expression:</span></p><pre class="crayon-plain-tag">       "filter_friendly_name": "High Net worth and Renting",
       "expression": "addons.nextcaller_advanced_caller_id.records[0].high_net_worth == 'Yes' AND addons.nextcaller_advanced_caller_id.records[0].home_owner_status == 'Rent'"</pre><p><span style="font-weight: 400;">To get started with Add-ons for TaskRouter, just install the ones you want from within Console. </span></p>
<p>Go to the <a href="https://www.twilio.com/console/add-ons">Marketplace section</a> and find the Add-ons you are interested in, and install them.</p>
<p><img class="alignnone wp-image-19114" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/11/dYaTzq5HXT3lXDQYQQE9Ry3gfgS1D8Gc9pHUgjp8xYdIRQnvMfyGkNFtkwoMb6zr8oRkAcTNu3bLcYc1BtCMm3fRTJfkShbXSqW9wwcpxjgTgSHwiIpXz9iBNBTliyL4tzOB5jmV.png" alt="dYaTzq5HXT3lXDQYQQE9Ry3gfgS1D8Gc9pHUgjp8xYdIRQnvMfyGkNFtkwoMb6zr8oRkAcTNu3bLcYc1BtCMm3fRTJfkShbXSqW9wwcpxjgTgSHwiIpXz9iBNBTliyL4tzOB5jmV" width="356" height="125" srcset="https://twilioinc.wpengine.com/wp-content/uploads/2016/11/dYaTzq5HXT3lXDQYQQE9Ry3gfgS1D8Gc9pHUgjp8xYdIRQnvMfyGkNFtkwoMb6zr8oRkAcTNu3bLcYc1BtCMm3fRTJfkShbXSqW9wwcpxjgTgSHwiIpXz9iBNBTliyL4tzOB5jmV.png 688w, https://twilioinc.wpengine.com/wp-content/uploads/2016/11/dYaTzq5HXT3lXDQYQQE9Ry3gfgS1D8Gc9pHUgjp8xYdIRQnvMfyGkNFtkwoMb6zr8oRkAcTNu3bLcYc1BtCMm3fRTJfkShbXSqW9wwcpxjgTgSHwiIpXz9iBNBTliyL4tzOB5jmV-300x105.png 300w, https://twilioinc.wpengine.com/wp-content/uploads/2016/11/dYaTzq5HXT3lXDQYQQE9Ry3gfgS1D8Gc9pHUgjp8xYdIRQnvMfyGkNFtkwoMb6zr8oRkAcTNu3bLcYc1BtCMm3fRTJfkShbXSqW9wwcpxjgTgSHwiIpXz9iBNBTliyL4tzOB5jmV-200x70.png 200w" sizes="(max-width: 356px) 100vw, 356px" /></p>
<p><img class="alignnone wp-image-19115" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/11/XbGpkj_g5W5KbHlWig2F7vsuwCqV1sk_q_5-qeBZKyx3ZKrTB8d2v27eTROw0Ys6gKtrpDJIf6bRC05yPJ2AMrjXeuh46YiTxLej-mj1D98TFQtFmFrMB1JrApAlGraxzferGEHQ.png" alt="XbGpkj_g5W5KbHlWig2F7vsuwCqV1sk_q_5-qeBZKyx3ZKrTB8d2v27eTROw0Ys6gKtrpDJIf6bRC05yPJ2AMrjXeuh46YiTxLej-mj1D98TFQtFmFrMB1JrApAlGraxzferGEHQ" width="434" height="218" srcset="https://twilioinc.wpengine.com/wp-content/uploads/2016/11/XbGpkj_g5W5KbHlWig2F7vsuwCqV1sk_q_5-qeBZKyx3ZKrTB8d2v27eTROw0Ys6gKtrpDJIf6bRC05yPJ2AMrjXeuh46YiTxLej-mj1D98TFQtFmFrMB1JrApAlGraxzferGEHQ.png 588w, https://twilioinc.wpengine.com/wp-content/uploads/2016/11/XbGpkj_g5W5KbHlWig2F7vsuwCqV1sk_q_5-qeBZKyx3ZKrTB8d2v27eTROw0Ys6gKtrpDJIf6bRC05yPJ2AMrjXeuh46YiTxLej-mj1D98TFQtFmFrMB1JrApAlGraxzferGEHQ-300x151.png 300w, https://twilioinc.wpengine.com/wp-content/uploads/2016/11/XbGpkj_g5W5KbHlWig2F7vsuwCqV1sk_q_5-qeBZKyx3ZKrTB8d2v27eTROw0Ys6gKtrpDJIf6bRC05yPJ2AMrjXeuh46YiTxLej-mj1D98TFQtFmFrMB1JrApAlGraxzferGEHQ-200x100.png 200w" sizes="(max-width: 434px) 100vw, 434px" /></p>
<p><span style="font-weight: 400;">One the Add-on is installed you’ll see the following options,</span></p>
<p><img class="alignnone wp-image-19116" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/11/ZD3iyg_TsdmUNLyaoWzpnb-j7uoDfGXcAPPlvm2LuR1q-oYLGX-2Mk-o94MAgdpEFdewX3KCNT9TesL-n8SSp_Q0MUjuETZ2E4bvcHk__IKsaOgmSdBC6EceVa9mcDKFvdY3gd34.png" alt="ZD3iyg_TsdmUNLyaoWzpnb-j7uoDfGXcAPPlvm2LuR1q-oYLGX-2Mk-o94MAgdpEFdewX3KCNT9TesL-n8SSp_Q0MUjuETZ2E4bvcHk__IKsaOgmSdBC6EceVa9mcDKFvdY3gd34" width="561" height="421" srcset="https://twilioinc.wpengine.com/wp-content/uploads/2016/11/ZD3iyg_TsdmUNLyaoWzpnb-j7uoDfGXcAPPlvm2LuR1q-oYLGX-2Mk-o94MAgdpEFdewX3KCNT9TesL-n8SSp_Q0MUjuETZ2E4bvcHk__IKsaOgmSdBC6EceVa9mcDKFvdY3gd34.png 946w, https://twilioinc.wpengine.com/wp-content/uploads/2016/11/ZD3iyg_TsdmUNLyaoWzpnb-j7uoDfGXcAPPlvm2LuR1q-oYLGX-2Mk-o94MAgdpEFdewX3KCNT9TesL-n8SSp_Q0MUjuETZ2E4bvcHk__IKsaOgmSdBC6EceVa9mcDKFvdY3gd34-300x225.png 300w, https://twilioinc.wpengine.com/wp-content/uploads/2016/11/ZD3iyg_TsdmUNLyaoWzpnb-j7uoDfGXcAPPlvm2LuR1q-oYLGX-2Mk-o94MAgdpEFdewX3KCNT9TesL-n8SSp_Q0MUjuETZ2E4bvcHk__IKsaOgmSdBC6EceVa9mcDKFvdY3gd34-768x576.png 768w, https://twilioinc.wpengine.com/wp-content/uploads/2016/11/ZD3iyg_TsdmUNLyaoWzpnb-j7uoDfGXcAPPlvm2LuR1q-oYLGX-2Mk-o94MAgdpEFdewX3KCNT9TesL-n8SSp_Q0MUjuETZ2E4bvcHk__IKsaOgmSdBC6EceVa9mcDKFvdY3gd34-200x150.png 200w" sizes="(max-width: 561px) 100vw, 561px" /></p>
<p><span style="font-weight: 400;">Select </span><b>Creating TaskRouter Tasks </b><span style="font-weight: 400;">and click save. You can use the Add-on whenever a new Task is created.</span></p>
<p><span style="font-weight: 400;">For voice calls where the Task is auto-created through the TaskRouter &lt;Enqueue&gt; verb, any installed Add-ons will automatically run for the </span><b>from</b><span style="font-weight: 400;"> number of the caller. In addition, any Task you create over the REST API will do a Marketplace lookup for installed Add-ons if there is a Task Attribute of ‘</span><b>from</b><span style="font-weight: 400;">’, and if that attribute is set to an E.164 phone number. </span></p>
<p><span style="font-weight: 400;">Note that only Add-ons which work by phone number based lookups are supported with TaskRouter. To get more detail, take a look at the </span><a href="https://www.twilio.com/docs/api/taskrouter/marketplace"><span style="font-weight: 400;">docs for TaskRouter Marketplace</span></a><span style="font-weight: 400;"> here.</span></p>
<p><span style="font-weight: 400;">As more of these Add-ons get added to the marketplace, they will be immediately available for use within TaskRouter with a simple install. This provides the potential for future Add-ons to make it easy to route based on other types of data as well. We are excited about the possibility for future Add-ons to surface data from sources such as your CRM or marketing automation platforms, making it easier to route interactions based on the overall customer journey. And of course, all of that data used to route can also be presented to the agent easily to inform them better about how to handle a customer interaction. </span></p>
<p><span style="font-weight: 400;">The addition of Marketplace support rounds out a series of three recent feature enhancements we’ve made to TaskRouter, adding to:</span></p>
<ul>
<li style="font-weight: 400;"><a href="https://www.twilio.com/blog/2016/10/introducing-last-in-first-out-lifo-support-for-taskrouter.html"><span style="font-weight: 400;">Last In, First Out</span></a><span style="font-weight: 400;"> support</span></li>
<li style="font-weight: 400;"><a href="https://www.twilio.com/blog/2016/10/introducing-multitasking-for-taskrouter.html"><span style="font-weight: 400;">Multitasking</span></a><span style="font-weight: 400;"> support. </span></li>
</ul>
<p><span style="font-weight: 400;">If you’re just getting started with TaskRouter, you might want to check out the blog post on using TaskRouter to </span><a href="https://www.twilio.com/blog/2016/10/using-bots-to-route-customer-requests-based-on-sentiment-and-emotion.html"><span style="font-weight: 400;">route based on sentiment and emotion of messages</span></a><span style="font-weight: 400;">, and follow along with the code example in GitHub. </span></p>
<p><span style="font-weight: 400;">We’d love to hear from you with your experiences of using these new capabilities &#8211; as always, we can’t wait to see what you build.</span></p>
<p><a href="https://twilioinc.wpengine.com/2016/11/introducing-marketplace-add-on-support-for-taskrouter.html">Introducing Marketplace Add-on support for TaskRouter</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2016/11/introducing-marketplace-add-on-support-for-taskrouter.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Introducing Last In, First Out (LIFO) Support for TaskRouter</title>
		<link>https://twilioinc.wpengine.com/2016/10/introducing-last-in-first-out-lifo-support-for-taskrouter.html</link>
		<comments>https://twilioinc.wpengine.com/2016/10/introducing-last-in-first-out-lifo-support-for-taskrouter.html#respond</comments>
		<pubDate>Mon, 24 Oct 2016 20:49:57 +0000</pubDate>
		<dc:creator><![CDATA[Al Cook]]></dc:creator>
				<category><![CDATA[Developers Drawing The Owl]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=19019</guid>
		<description><![CDATA[<p>Today we’re excited to announce that TaskRouter now supports Last In, First Out (LIFO) for routing tasks. Before we get into LIFO, a quick refresher: TaskRouter is a skill-based routing engine, designed for routing work such as customer support interactions or sales leads to the best matched agent. The addition of LIFO means that you can now choose between the default behavior where the longest waiting... <a class="read-more" href="https://twilioinc.wpengine.com/2016/10/introducing-last-in-first-out-lifo-support-for-taskrouter.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2016/10/introducing-last-in-first-out-lifo-support-for-taskrouter.html">Introducing Last In, First Out (LIFO) Support for TaskRouter</a></p>]]></description>
				<content:encoded><![CDATA[<p><span style="font-weight: 400;">Today we’re excited to announce that TaskRouter now supports Last In, First Out (LIFO) for routing tasks. Before we get into LIFO, a quick refresher: TaskRouter is a skill-based routing engine, designed for routing work such as customer support interactions or sales leads to the best matched agent. The addition of LIFO means that you can now choose between the default behavior where the longest waiting task gets delivered to the next available worker, or a new option where the task that has been waiting the least amount of time will be routed to the next available worker.</span></p>
<p><span style="font-weight: 400;">So why LIFO? Certainly for a lot of call center use cases, the default (FIFO) behavior is what’s called for. However, we’ve seen a lot of folks use TaskRouter for all sorts of use cases beyond the typical inbound support contact center. One of those where LIFO is really important is in handling leads. </span></p>
<p><span style="font-weight: 400;">Let’s take an example where you are generating leads on your website and have agents call back those leads. A lead is hottest at the moment it&#8217;s created, and &#8216;cools down&#8217; quickly, equating to an increasingly lower chance to convert that lead. So it is really important to connect the first free agent to the hottest (newest) lead in the system, since that has the highest likelihood of conversion. This is where LIFO helps you out. </span></p>
<p><span style="font-weight: 400;">LIFO is a TaskQueue level setting and you can enable it on a TaskQueue by passing <pre class="crayon-plain-tag">TaskOrder=LIFO</pre> </span><span style="font-weight: 400;"> while either creating a TaskQueue or updating an existing TaskQueue. The default is <pre class="crayon-plain-tag">FIFO</pre>. </span></p><pre class="crayon-plain-tag">$ curl -XPOST https://taskrouter.twilio.com/v1/Workspaces/WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/TaskQueues \
   -d "FriendlyName=HotHotLeads" \
   -d "ReservationActivitySid=WAxxxx" \
   -d "AssignmentActivitySid=WAyyyy" \
   -d "TargetWorkers=languages HAS 'english'" \
   -d "TaskOrder=LIFO" \
   -u '{account_sid}:{auth_token}'</pre><p>In a FIFO Queue, if you have 5 tasks from F1 as the oldest to F5 as the newest, they will be routed as follows (Task furthest on the right is the next to be assigned to the agent):</p><pre class="crayon-plain-tag">Inbound Tasks -&gt; F5, F4, F3, F2, F1 -&gt; Agent</pre><p>In a LIFO Queue, if you have 5 tasks from L1 as the oldest to L5 as the newest, they will be routed:</p><pre class="crayon-plain-tag">Inbound Tasks -&gt; L1, L2, L3, L4, L5 -&gt; Agent</pre><p>Now let&#8217;s imagine your setup has Workers shared between LIFO and FIFO TaskQueues. We need to specify whether the most recent task from the LIFO queue or the oldest task from the FIFO queue is most important. In this case the preference by which they consume tasks from a FIFO Queue vs a LIFO Queue depends on a workspace level setting <pre class="crayon-plain-tag">PrioritizeQueueOrder</pre>. Simply pass <pre class="crayon-plain-tag">PrioritizeQueueOrder=LIFO</pre>  or <pre class="crayon-plain-tag">PrioritizeQueueOrder=FIFO</pre>  while creating a new workspace or updating an existing workspace.</p><pre class="crayon-plain-tag">$ curl -XPOST https://taskrouter.twilio.com/v1/Workspaces/WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/ \
   -d "FriendlyName=MixedOrderedWorkspace" \
   -d "PrioritizeQueueOrder=LIFO" \
   -d "EventCallbackUrl=http://requestb.in/vh9reovh" \
   -u '{account_sid}:{auth_token}'</pre><p><span style="font-weight: 400;">Let’s take a look at how the </span><span style="font-weight: 400;">PrioritizeQueueOrder</span><span style="font-weight: 400;"> setting works if your Agent is able to take tasks from both TaskQueues. We&#8217;ll combine the two examples above, and set <pre class="crayon-plain-tag">PrioritizeQueueOrder</pre> </span><span style="font-weight: 400;"> to <pre class="crayon-plain-tag">FIFO</pre>. In this case, </span><span style="font-weight: 400;">the Tasks are routed in the following order:</span></p><pre class="crayon-plain-tag">Inbound Tasks -&gt; L1, L2, L3, L4, L5, F5, F4, F3, F2, F1 -&gt; Agent</pre><p>Compared to if PrioritizeQueueOrder is set to to LIFO:</p><pre class="crayon-plain-tag">Inbound Tasks -&gt; F5, F4, F3, F2, F1, L1, L2, L3, L4, L5 -&gt; Agent</pre><p>There are many possible use cases that can be satisfied using LIFO, or combining LIFO and FIFO Queues. If you find you need additional functionality on top of LIFO and FIFO, we want to hear from you. In the meantime, we can’t wait to see what you build.</p>
<p><a href="https://twilioinc.wpengine.com/2016/10/introducing-last-in-first-out-lifo-support-for-taskrouter.html">Introducing Last In, First Out (LIFO) Support for TaskRouter</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2016/10/introducing-last-in-first-out-lifo-support-for-taskrouter.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Introducing Multitasking for Taskrouter</title>
		<link>https://twilioinc.wpengine.com/2016/10/introducing-multitasking-for-taskrouter.html</link>
		<comments>https://twilioinc.wpengine.com/2016/10/introducing-multitasking-for-taskrouter.html#respond</comments>
		<pubDate>Fri, 14 Oct 2016 19:00:11 +0000</pubDate>
		<dc:creator><![CDATA[Al Cook]]></dc:creator>
				<category><![CDATA[News]]></category>
		<category><![CDATA[Task Router]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=18993</guid>
		<description><![CDATA[<p>Today we’re excited to introduce a new feature for TaskRouter &#8211; multitasking. Before we get into multitasking, a quick refresher: TaskRouter is a skill-based routing engine, designed for routing work such as customer support interactions to the best matched agent. Multitasking extends what you can build with TaskRouter by allowing workers to handle multiple tasks concurrently. TaskRouter can be used for many different solutions, but the... <a class="read-more" href="https://twilioinc.wpengine.com/2016/10/introducing-multitasking-for-taskrouter.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2016/10/introducing-multitasking-for-taskrouter.html">Introducing Multitasking for Taskrouter</a></p>]]></description>
				<content:encoded><![CDATA[<p>Today we’re excited to introduce a new feature for TaskRouter &#8211; <a href="https://www.twilio.com/docs/api/taskrouter/multitasking">multitasking</a>. Before we get into multitasking, a quick refresher: TaskRouter is a skill-based routing engine, designed for routing work such as customer support interactions to the best matched agent. Multitasking extends what you can build with TaskRouter by allowing workers to handle multiple tasks concurrently.</p>
<p>TaskRouter can be used for many different solutions, but the most common use case is as the beating heart of a contact center &#8211; pumping the right task to the right place with the right priority. When those tasks are voice calls, you typically only want one agent to work on one task at a time. But we increasingly see TaskRouter powering multi-channel contact centers. For example, the global bank ING use TaskRouter to power their contact center for customer service in 17 different countries. TaskRouter routes not just voice calls, but messaging sessions as well.</p>
<p>When customers contact a company through messaging, those interactions are well suited to being handled in parallel. Agents can often handle chatting with 2 or 3 different customers at any given time. These interactions are asynchronous in a way voice calls are not.</p>
<p>In fact, we often see customers building solutions which suggest to callers on hold in a queue to hang up and message their query instead &#8211; on average that approach pivots about 40% of call traffic over to messaging, where it can be handled in parallel with other interactions, making agents more efficient and allowing the company to flatten out the spikes in load.</p>
<p>TaskRouter multitask is designed to make this sort of solution easy to build and scale. Tasks belong to one of multiple different Task Channel types (Voice, Video, IP Messaging, SMS). Each worker within TaskRouter can then be configured as to how many tasks of each type they can handle concurrently. So for example if you build your chat solution using IP Messaging, you can say that they can handle 3 IP Messaging sessions with the following API call:</p><pre class="crayon-plain-tag">$ curl -X POST https://taskrouter.twilio.com/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}}/Channels/ipm
-d 'Capacity=3&amp;Available=true'
   -u '{account_sid}:{auth_token}'</pre><p><span style="font-weight: 400;">Sometimes, you may want to specify that workers cannot handle tasks of one type if they are busy with a task of another type. To do this you use Target Worker Expressions, which allow you to specify matching workers based on the multitasking specific</span><span style="font-weight: 400;"> pre-defined attributes. These can be used from either the TaskQueue or the Workflow. </span></p><pre class="crayon-plain-tag">worker.channel.&lt;task type&gt;.available_capacity_percentage
worker.channel.&lt;task type&gt;.configured_capacity
worker.channel.&lt;task type&gt;.assigned_tasks</pre><p>For example, you may want to see that workers can handle one voice call or three messaging sessions &#8211; but if they’re on a voice call then they can’t handle any new messaging sessions. Using these attributes you can write expressions to route tasks of different types to workers based on their configured and consumed capacity.</p><pre class="crayon-plain-tag">$ curl -X POST https://taskrouter.twilio.com/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}}/Channels/ipm
    -d 'Available=false'
    -u '{account_sid}:{auth_token}'</pre><p>To get started with TaskRouter multitasking, <a href="https://www.twilio.com/docs/api/taskrouter/multitasking">check out the docs</a> or the sample code from my <a href="https://www.twilio.com/blog/2016/10/using-bots-to-route-customer-requests-based-on-sentiment-and-emotion.html">prototype sentiment-based-routing contact center.</a> If you’re using TaskRouter through our Helper Libraries, you will need to use the <a href="https://www.twilio.com/blog/2016/02/introducing-twilios-next-generation-helper-libraries.html">next generation</a> ‘yoyodyne’ helper libraries in order to access Multitask.</p>
<p>We’ve seen more and more companies build contact centers on top of TaskRouter. We’re excited to see how multitasking can make it even easier to build multi-channel contact centers. We can’t wait to see what you build.</p>
<p><a href="https://twilioinc.wpengine.com/2016/10/introducing-multitasking-for-taskrouter.html">Introducing Multitasking for Taskrouter</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2016/10/introducing-multitasking-for-taskrouter.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Using Bots To Route Customer Requests Based On Sentiment and Emotion</title>
		<link>https://twilioinc.wpengine.com/2016/10/using-bots-to-route-customer-requests-based-on-sentiment-and-emotion.html</link>
		<comments>https://twilioinc.wpengine.com/2016/10/using-bots-to-route-customer-requests-based-on-sentiment-and-emotion.html#respond</comments>
		<pubDate>Thu, 13 Oct 2016 00:55:26 +0000</pubDate>
		<dc:creator><![CDATA[Al Cook]]></dc:creator>
				<category><![CDATA[Code, Tutorials and Hacks]]></category>
		<category><![CDATA[bots]]></category>
		<category><![CDATA[facebook]]></category>
		<category><![CDATA[Sentiment]]></category>
		<category><![CDATA[Task Router]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=18980</guid>
		<description><![CDATA[<p>2016: the year where no strategy or vision pitch was complete without mentioning bots.  You can’t watch a tech keynote, scroll through your newsfeed, or be anywhere online without reading how bots are replacing apps, or replacing humans.   Assuming though for just a moment that we don’t turn our every human interaction, from wedding vows to childcare, into an AI driven chat based interaction… we... <a class="read-more" href="https://twilioinc.wpengine.com/2016/10/using-bots-to-route-customer-requests-based-on-sentiment-and-emotion.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2016/10/using-bots-to-route-customer-requests-based-on-sentiment-and-emotion.html">Using Bots To Route Customer Requests Based On Sentiment and Emotion</a></p>]]></description>
				<content:encoded><![CDATA[<p><span style="font-weight: 400;">2016: the year where no strategy or vision pitch was complete without mentioning bots. </span></p>
<p><span style="font-weight: 400;">You can’t watch a tech keynote, scroll through your newsfeed, or be anywhere online without reading how </span><a href="http://venturebeat.com/2016/08/02/why-chatbots-are-replacing-apps/"><span style="font-weight: 400;">bots are replacing apps</span></a><span style="font-weight: 400;">, or </span><a href="http://www.forbes.com/sites/parmyolson/2016/05/09/could-chat-bots-replace-human-jobs-facebook/#b0327f23c822"><span style="font-weight: 400;">replacing humans</span></a><span style="font-weight: 400;">.  </span></p>
<p>Assuming though for just a moment that we don’t turn our every human interaction, from wedding vows to childcare, into an AI driven chat based interaction… we have a question to answer: what is a realistic view of how companies could be using bots today? I’m particularly interested in the possibilities for using bots within a call center (But not as a replacement for humans &#8211; despite the hype we’re not a fully virtual society quite yet).</p>
<p><b>Sentiment driven routing</b></p>
<p>To explore these ideas, I built a call center prototype to look at ways to merge human and bot interaction together. I’ve been chewing on a few questions: Could you have customers chat with a bot first to better determine their intent, and even emotional state, and use that information to connect them to a better matched agent? Could you save the agent time by having the bot capture key information first and inform the agent when they take the interaction? What about handling self-service questions entirely automatically without ever passing the chat to a human agent?</p>
<p><span style="font-weight: 400;">My prototype handles inbound interactions coming in over both SMS and from Twilio’s </span><a href="https://www.twilio.com/messaging-apps"><span style="font-weight: 400;">new Facebook integration</span></a><span style="font-weight: 400;">, all routed by TaskRouter. I also used Marketplace AddOns for details about the users texting in, along with Meya.ai for the bot platform, and Firebase. The code for this is all available in </span><a href="https://github.com/calozpom/taskrouterbot"><span style="font-weight: 400;">github</span></a><span style="font-weight: 400;">, so you can follow along as we go through the architecture.</span></p>
<p>A customer messaging in ‘hey I could do with some help’ will get routed in a completely different way to someone messaging ‘You guys really suck I can’t believe you still haven’t fixed this’. And someone messaging ‘what are your opening hours?’ doesn’t need to be routed to an agent at all.</p>
<p><span style="font-weight: 400;">Customers messaging in first cause a task to be created in TaskRouter. The Task serves as the primary key for the entire lifecycle of the customer interaction. When the task is created, it sits in a queue waiting to be bot qualified, and my app server connects the messages back and forth with the bot platform. The customer first chats with a bot, which determines their intent and emotional state. </span></p>
<p><span style="font-weight: 400;">Sending messages related to unqualified tasks to the bot:</span></p><pre class="crayon-plain-tag">client.workspace.tasks(taskSid).get(function(err, task) {
   attr = JSON.parse(task.attributes);
   if (!attr.hasOwnProperty('bot_qualified')) {
     console.log("this task is not yet bot qualified");
     console.log("posting to meya with user id " + meyaUserID_string + " and text " + request.body['Body']);
     req
       .post('https://meya.ai/webhook/receive/BCvshMlsyFf').auth(meyaAPIKey).form({
         user_id: meyaUserID_string,
         text: request.body['Body']
       })
       .on('response', function(response) {
         console.log("got response from meya " + response);
       })
   } else {
     console.log("this task is already bot qualified");
   }
 });</pre><p><span style="font-weight: 400;">The Meya bot platform uses an easy scripting interface to storyboard the interactions. It starts by gathering the intent of the first message, and then transitions between different states from there depending on what’s said &#8211; the sequence will flow through to the next state unless you specify a transition to a different state. </span></p>
<p>&nbsp;</p><pre class="crayon-plain-tag">intents:
 misunderstood: help
 hi: hi
 how_are_you: how_are_you
 help: help
 whats_up: whats_up
 who_are_you: who_are_you
states:
 how_are_you:
   component: meya.text
   properties:
     text: I'm good! Thanks for asking!
   transitions:
     next: delay
 whats_up:
   component: meya.text
   properties:
     text: Oh we're just chilling.
   transitions:
     next: delay
 who_are_you:
   component: meya.text
   properties:
     text: I'm a bot, I will gather some information first and then pass you to an
       agent who can help
   transitions:
     next: delay
 hi:
   component: meya.random_text
   properties:
     responses:
     - Hi :)
     - Hello, there!
     - Howdy!
     - Bonjour.
 delay:
   component: al_delay
 help:
   component: meya.wit
   properties:
     text: How can I help you with British Exports?
     require_match: false
     token: &lt;wit.ai token&gt;
   transitions:
     angry: angry
     happy: happy
     needs_help: needs_help
     problem: problem
     service_question: service_question
     no_match: unsure_state
 angry:
   component: intent_checker
   properties:
     text: I'm really sorry. Would you mind if we chat a bit more and I can see if
       I can help make things better?
     emotion: angry
   return: true
 happy:
   component: intent_checker
   properties:
     text: I'm glad to hear it. Let me send you a free t-shirt to show our gratitude.
       :)
     emotion: happy
   return: true
 needs_help:
   component: intent_checker
   properties:
     text: I can definitely help you out. I'm going to need to ask you a few more
       questions.
     emotion: needs_help
   return: true
 problem:
   component: intent_checker
   properties:
     text: We'll get that fixed ASAP. One moment please.
     emotion: problem
   return: true
 service_question:
   component: intent_checker
   properties:
     text: You're asking the right person. Let me ask you a couple of questions so
       I can get you the answer you want.
     emotion: service_question
   return: true
 unsure_state:
   component: intent_checker
   properties:
     text: Sorry...let me pass you on to someone who can better help with that
     emotion: unsure
   return: true</pre><p><span style="font-weight: 400;">When a bot gets an answer to the question ‘how can i help’, it uses Wit to determine sentiment. Wit is really easy to train from a data set of responses what the intent of the interaction is. The more you train it, the better is is at handling different variations of what the customer might say.</span></p>
<p>&nbsp;</p>
<p><img class="alignnone wp-image-18981 size-large" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/10/Screenshot-2016-10-07-10.50.16-1024x743.png" alt="screenshot-2016-10-07-10-50-16" width="640" height="464" srcset="https://twilioinc.wpengine.com/wp-content/uploads/2016/10/Screenshot-2016-10-07-10.50.16-1024x743.png 1024w, https://twilioinc.wpengine.com/wp-content/uploads/2016/10/Screenshot-2016-10-07-10.50.16-300x218.png 300w, https://twilioinc.wpengine.com/wp-content/uploads/2016/10/Screenshot-2016-10-07-10.50.16-768x557.png 768w, https://twilioinc.wpengine.com/wp-content/uploads/2016/10/Screenshot-2016-10-07-10.50.16-200x145.png 200w, https://twilioinc.wpengine.com/wp-content/uploads/2016/10/Screenshot-2016-10-07-10.50.16.png 1334w" sizes="(max-width: 640px) 100vw, 640px" /></p>
<p>Once the bot has determined the intent, we’re ready to update the task attributes in TaskRouter to say that the task has been bot qualified, and mark their intent. In this case, it assigns each task to one of the following states: angry, happy, needs_help, problem, service_question, or unsure. To do this, I used the native Twilio integration available within the bot platform Meya.ai, so that my bot logic directly calls the update task API with the new attributes.</p><pre class="crayon-plain-tag">from meya import Component
import re
import json
from twilio.rest import TwilioTaskRouterClient

class IntentChecker(Component):
   def start(self):
       account_sid = &lt;account sid&gt;
       auth_token  = &lt;auth token&gt;
       client = TwilioTaskRouterClient(account_sid, auth_token)
       # read in the response text, and default to empty if invalid or missing
       text = self.properties.get('text') or ""
       # meyaUserID=JSON.loads(self.db.user.user_id)
       meyaUserID = self.db.user.user_id.split('@@')
       taskSid=meyaUserID[2]
       task = client.tasks("WS056355824815f89c7cc46e5d8cacaf20").get(taskSid)
       task_attributes= json.loads(task.attributes)
       task_attributes['bot_qualified']='true'
       task_attributes['bot_intent']=self.properties.get('emotion')       
       print task_attributes
       attribute_string=json.dumps(task_attributes)
       task = client.tasks("WS056355824815f89c7cc46e5d8cacaf20").update(taskSid,attributes=attribute_string)
       message = self.create_message(text=text)
       return self.respond(message=message)</pre><p><span style="font-weight: 400;">With the task updated, TaskRouter then moves the task into the appropriate queue so the best agents can handle the query. The gif below shows a realtime visualization of a TaskRouter workspace (code for this is also in </span><a href="https://github.com/calozpom/taskrouterbot"><span style="font-weight: 400;">github</span></a><span style="font-weight: 400;">). </span></p>
<p>&nbsp;</p>
<p><img class="alignnone size-full wp-image-18977" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/10/7OgV6Pld8gXyR34ZRKI9uQKtjWQ8Xywd6bM9LYuh83Tj0pansfKi2eF0oWTFiraxhjJG-w4JL3-7obiFN0z94-6VYBaC5YGRo5sI5QC4KNWG5GakGEQDVLgh_UTGiXsIoVdOM08-.png" alt="7OgV6Pld8gXyR34ZRKI9uQKtjWQ8Xywd6bM9LYuh83Tj0pansfKi2eF0oWTFiraxhjJG-w4JL3-7obiFN0z94-6VYBaC5YGRo5sI5QC4KNWG5GakGEQDVLgh_UTGiXsIoVdOM08-" width="640" height="495" /></p>
<p><span style="font-weight: 400;">Once a task is bot qualified, and a suitable agent becomes available based on the determined intent, TaskRouter will push a reservation request to the agent. At this stage the agent gets to see all of the conversation history so they can get up to speed immediately and continue the conversation.</span></p>
<p><span style="font-weight: 400;">One of the key benefits of using messaging for customer service is that agents can handle multiple messaging interactions simultaneously. So I used the new <a href="https://www.twilio.com/docs/api/taskrouter/multitasking">multitasking</a> feature of TaskRouter</span><span style="font-weight: 400;"> to be able to specify how many tasks the agent can handle concurrently. As you change capacity of the worker, they get additional task reservations:</span></p><pre class="crayon-plain-tag">app.get('/updateCapacity', function(request, response) {
 // This function uses the TaskRouter multi-tasking API to change concurrent task capacity
 var options = {
   method: 'POST',
   url: 'https://taskrouter.twilio.com/v1/Workspaces/' + workspaceSid + '/Workers/' + request.query.workerSid + '/Channels/default',
   auth: {
     username: accountSid,
     password: authToken
   },
   form: {
     Capacity: request.query.capacity
   }
 };
 console.log(options);
 req(options, function(error, response, body) {
// snip code that goes on to handle request…
});
 response.send('');
});</pre><p>&nbsp;</p>
<p><img class="alignnone size-full wp-image-18982" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/10/multitasking.gif" alt="multitasking" width="1018" height="886" /></p>
<p><span style="font-weight: 400;">And finally I also used Marketplace AddOns to get the name and address of folks texting in:</span></p><pre class="crayon-plain-tag">try {
             var addOnsData = JSON.parse(request.body.AddOns);
             friendlyName_first = addOnsData['results']['nextcaller_advanced_caller_id']['result']['records'][0]['first_name'];
             friendlyName_last = addOnsData['results']['nextcaller_advanced_caller_id']['result']['records'][0]['last_name'];
             address_street = addOnsData['results']['nextcaller_advanced_caller_id']['result']['records'][0]['address'][0]['line1'];
           } catch (err) {}
           myFirebase.child("profiles").child(newTaskResponse.sid).set({
             'first_name': friendlyName_first,
             'last_name': friendlyName_last,
             'address_street': address_street,
             'message_type': 'sms',
             'profile_pic': 'img/unknownavatar.jpeg'
           });</pre><p><span style="font-weight: 400;">So now we have a customer service solution where users can message in through SMS or Facebook, and based on what they say they need help with (and how they say it), they will get routed to the best qualified agent. The agent will have all the context of the conversation so far, and details about the customer from the Marketplace AddOns lookup of their phone number. The agent can choose how many customers they want to handle concurrently using the new multi-tasking capability of TaskRouter. </span></p>
<p><span style="font-weight: 400;">You can hear me talk more about this demo in </span><a href="https://www.youtube.com/watch?v=AaGN-12uPE0"><span style="font-weight: 400;">this video</span></a><span style="font-weight: 400;"> from SIGNAL. All my code is available in </span><a href="https://github.com/calozpom/taskrouterbot"><span style="font-weight: 400;">github</span></a><span style="font-weight: 400;">. The back end is all Node, the front end uses Foundation, and the bot platform used was </span><a href="http://meya.ai"><span style="font-weight: 400;">meya.ai</span></a><span style="font-weight: 400;"> (who are phenomenally helpful, nice people). Disclaimer: I hadn’t coded anything in ten years, and had never used Node or any of these tools before, so in no way is this production code. Pull Requests welcome!</span></p>
<p>&nbsp;</p>
<p><a href="https://twilioinc.wpengine.com/2016/10/using-bots-to-route-customer-requests-based-on-sentiment-and-emotion.html">Using Bots To Route Customer Requests Based On Sentiment and Emotion</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2016/10/using-bots-to-route-customer-requests-based-on-sentiment-and-emotion.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Twilio Video at SIGNAL: Pricing to Support Video in Every Application</title>
		<link>https://twilioinc.wpengine.com/2015/05/twilio-video-at-signal-nt.html</link>
		<comments>https://twilioinc.wpengine.com/2015/05/twilio-video-at-signal-nt.html#comments</comments>
		<pubDate>Tue, 19 May 2015 19:18:54 +0000</pubDate>
		<dc:creator><![CDATA[Al Cook]]></dc:creator>
				<category><![CDATA[News]]></category>
		<category><![CDATA[Signal Conf]]></category>
		<category><![CDATA[Twilio Video]]></category>
		<category><![CDATA[Twilio Video Pricing]]></category>

		<guid isPermaLink="false">http://twilioinc.wpengine.com/?p=15144</guid>
		<description><![CDATA[<p>Today at SIGNAL, we made the beta of Twilio Video available to all attendees, and announced a fundamentally different pricing model for Video. It is designed to put video in every single app. Twilio Video costs two orders of magnitude less than the per-user and per-minute pricing models prevalent in the industry. Since we announced video a few weeks ago, we&#8217;ve had over a thousand developers... <a class="read-more" href="https://twilioinc.wpengine.com/2015/05/twilio-video-at-signal-nt.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2015/05/twilio-video-at-signal-nt.html">Twilio Video at SIGNAL: Pricing to Support Video in Every Application</a></p>]]></description>
				<content:encoded><![CDATA[<p>Today at SIGNAL, we made the beta of <a href="https://www.twilio.com/video">Twilio Video</a> available to all attendees, and announced a fundamentally different pricing model for Video. It is designed to put video in every single app. Twilio Video costs two orders of magnitude less than the per-user and per-minute pricing models prevalent in the industry.</p>
<p>Since we announced video a few weeks ago, we&#8217;ve had over a thousand developers request early access to the beta. We&#8217;ve seen all sorts of use cases, from healthcare to education to real estate to finance and more. The breadth of use cases has been really interesting, and is exactly what we expected &#8211; the demand for embedding video into applications is massive. It&#8217;s not limited to particular niches or verticals &#8211; everyone and their dog wants video.</p>
<p>That’s what we had in mind when we set about pricing video. We built the infrastructure to be massively scalable, and we wanted the pricing to be low enough to fulfil on that promise of scalable, and enable video to be a feature everywhere. Every. Single. App.</p>
<p>Some other players in this market have already put out pricing models which we don’t feel work.</p>
<p>Some pricing models approach from carrier-owned providers approach it as if it is carrier-style telecom. They charge cents per minute. It might make the pricing model simple, but even at the slightest glimpse of scale, it’s way too expensive.</p>
<p>Others approach it as SaaS, with packages based on number of users per month. The “Enterprise” package is for those with 1,250 users. Nothing about 1,250 screams enterprise to us. The problem here is you have to make a number of assumptions in that sort of pricing model. How often do the users sign in, how much do they interact with the API, etc. Typically the SaaS providers deals with that uncertainty by loading it with caveats. “Fair usage restrictions apply”. Either you break their estimate and you get charged extra, or you don&#8217;t use as much as they budgeted for, and they of course pocket the difference.</p>
<p>The common theme here is that these people are approaching communications as if it’s a niche. But if you believe as we do that software communications is the future, the model should be different. We built Twilio Video to scale globally and be resilient at every level. And we priced it in a dramatically different way, pricing it more like infrastructure as a service than software as a service.</p>
<p>Twilio Video is priced based on the infrastructure you need to use to run video in your applications. There are three core variables (which also match our costs of running the service):</p>
<ul>
<li><b>Endpoints connected</b>: Specifically the peak number of endpoints connected, per hour. Think of this as registration &#8211; if your endpoint is registered and able to receive a call, it is a connected endpoint.</li>
<li><b>Conversation Participants</b>: Every participant of a conversation is counted, so a conversation with four participants counts as four, as does two conversations each with two participants. The duration of the call does not matter.</li>
<li><b>Server-side interactions</b>:  For any event notification webhooks that you’ve configured to notify your server of a change to a conversation and any REST API calls you use to manipulate conversations. <i>​ Note that you can initiate and accept calls from within the SDK, which does not require API calls.</i></li>
</ul>
<p>Each one of these things is priced at $0.0001. One <i>hundredth</i> of a penny. In addition there is a low per GB charge for network traversal if you use it, as <a href="https://www.twilio.com/stun-turn/pricing">already advertised</a>. This is drastically different pricing &#8211; this is infrastructure pricing.</p>
<p>We’ve modelled all sorts of different use cases on this pricing model, and Twilio Video is considerably lower than other options. Somewhere from 1/10th to 1/100th of the cost of any other service.</p>
<p>Here are a few examples:</p>
<p>Let’s say you wanted to do 1hr per day of HD video:</p>
<ul>
<li>The service offered by carrier-owned vendors would cost you $7.20 per month</li>
<li>Services offered from SaaS-style vendors would cost you $1.60 per month</li>
<li>Twilio would cost you twelve cents. Twelve. $0.12 per month</li>
</ul>
<p>If you are running a call center doing six hours a day:</p>
<ul>
<li>Carrier model: $28.80 per month</li>
<li>SaaS model: $1.60 per month</li>
<li>Twilio: $0.21 per month</li>
</ul>
<p>If you’re doing 24x7x30 HD video:</p>
<ul>
<li>Carrier model: $172.80</li>
<li>SaaS model: $26.72</li>
<li>Twilio $2.73</li>
</ul>
<p>No matter what your use case is, no matter what your approach is, Twilio’s pricing approach makes it possible to integrate video everywhere.</p>
<p>This is still Day One in the migration of all communications from their legacy in hardware to the future embedded in software. The future experiences of communications have not even been built yet, but Twilio Video provides the foundation for building them at scale, everywhere.</p>
<p><a href="https://twilioinc.wpengine.com/2015/05/twilio-video-at-signal-nt.html">Twilio Video at SIGNAL: Pricing to Support Video in Every Application</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2015/05/twilio-video-at-signal-nt.html/feed</wfw:commentRss>
		<slash:comments>9</slash:comments>
		</item>
		<item>
		<title>Route Tasks Even Faster with TaskRouter Multi-Reservation</title>
		<link>https://twilioinc.wpengine.com/2015/04/route-tasks-even-faster-with-taskrouter-multi-reservation.html</link>
		<comments>https://twilioinc.wpengine.com/2015/04/route-tasks-even-faster-with-taskrouter-multi-reservation.html#respond</comments>
		<pubDate>Wed, 29 Apr 2015 16:00:59 +0000</pubDate>
		<dc:creator><![CDATA[Al Cook]]></dc:creator>
				<category><![CDATA[News]]></category>

		<guid isPermaLink="false">http://twilioinc.wpengine.com/?p=15018</guid>
		<description><![CDATA[<p>We built TaskRouter to help customers solve a recurring problem: matching tasks to the right people or processes that can best handle them. Developers have started to use TaskRouter to build everything from multi-channel call centers to rich CRM integrations. Today we’re excited to announce an enhancement to TaskRouter that makes it possible to route tasks and get them completed even more quickly. We have learned... <a class="read-more" href="https://twilioinc.wpengine.com/2015/04/route-tasks-even-faster-with-taskrouter-multi-reservation.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2015/04/route-tasks-even-faster-with-taskrouter-multi-reservation.html">Route Tasks Even Faster with TaskRouter Multi-Reservation</a></p>]]></description>
				<content:encoded><![CDATA[<p>We built TaskRouter to help customers solve a recurring problem: matching tasks to the right people or processes that can best handle them. Developers have started to use TaskRouter to build everything from multi-channel call centers to rich CRM integrations. Today we’re excited to announce an enhancement to TaskRouter that makes it possible to route tasks and get them completed even more quickly.</p>
<p>We have learned from customers that some tasks benefit from a “first to respond” distribution model. This might be because the task has a really short shelf-life and needs to be handled immediately, or because the task is overdue (for example TaskRouter escalated it to an “urgent and overdue” TaskQueue). Either way, the desired behavior is to offer the task to multiple workers, enabling whoever responds first get it.</p>
<p>The default behavior of TaskRouter is to reserve a single available worker, wait for that worker to accept or reject the task, and then move on to the next worker in the event of a rejection. This task lifecycle looks like this:</p>
<p><i>Task created → assigned to Workflow → routed to TaskQueue → Worker reserved → Reservation accepted → Task assigned to Worker</i></p>
<p>Starting today, TaskRouter&#8217;s new multi-reservation feature offers a task to a group of eligible workers, and lets the first to accept the task handle the work. Developers can adjust this behavior by modifying a new property on the TaskQueue resource called MaxReservedWorkers.</p>
<p>&nbsp;</p>
<p><a href="http://twilioinc.wpengine.com/wp-content/uploads/2015/04/Screenshot-2015-04-28-19.33.49.png"><img class="alignnone wp-image-15019 size-full" src="http://twilioinc.wpengine.com/wp-content/uploads/2015/04/Screenshot-2015-04-28-19.33.49.png" alt="Screenshot 2015-04-28 19.33.49" width="595" height="349" srcset="https://twilioinc.wpengine.com/wp-content/uploads/2015/04/Screenshot-2015-04-28-19.33.49.png 595w, https://twilioinc.wpengine.com/wp-content/uploads/2015/04/Screenshot-2015-04-28-19.33.49-300x176.png 300w" sizes="(max-width: 595px) 100vw, 595px" /></a></p>
<p>The MaxReservedWorkers property tell a TaskQueue the maximum number of workers to reserve for a task. It defaults to 1, which is the classic behavior for TaskRouter. But now developers can increase this value, up to a maximum of 50.</p>
<p>Let’s walk through an example inspired by the <a href="https://www.twilio.com/docs/quickstart/php/taskrouter">TaskRouter Quickstart</a> where we have a TaskQueue and two workers, Alice and Bob. Let’s see what happens if the MaxReservedWorkers is set to 5 and a task comes in.</p>
<p>If Bob and Alice are idle, TaskRouter will create two reservations, one for each of the Workers. The web application will receive two HTTP requests to the Workflow’s Assignment Callback URL: one for Bob’s reservation and one for Alice’s. It is now up to the web application to tell Task Router which Worker is going to accept the reservation. Let’s say that this will be Alice.</p>
<p>To indicate that Alice has accepted the Task, the web application will make an HTTP POST request to the Reservation resource:</p><pre class="crayon-plain-tag">curl -X POST https://taskrouter.twilio.com/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{ReservationSid} \

-d ReservationStatus=accepted \

-u {AccountSid}:{AuthToken}</pre><p>&nbsp;</p>
<p>Examining the response from TaskRouter, we see that the Task Reservation has been accepted, and the Task has been assigned to the our Worker Alice:</p><pre class="crayon-plain-tag">{... "worker_name": "Alice", "reservation_status": "accepted", ...}</pre><p>Now, perhaps both Alice and Bob would like to accept the Task, but Alice was faster. If Bob attempts to accept the Reservation, the HTTP request will fail with a HTTP 410 Gone response. This happens because Bob’s reservation is no longer actionable. Once Alice accepted her reservation, Bob’s reservation was no longer valid and was disposed of.<br />
We are excited about this enhancement to TaskRouter and hope you that you enjoy routing and completing tasks quicker than ever. For more documentation on how this new feature works, please see the <a href="https://www.twilio.com/docs/taskrouter/taskqueues">TaskQueue</a> and <a href="https://www.twilio.com/docs/taskrouter/worker-js">Worker.js</a> documentation.</p>
<p><a href="https://twilioinc.wpengine.com/2015/04/route-tasks-even-faster-with-taskrouter-multi-reservation.html">Route Tasks Even Faster with TaskRouter Multi-Reservation</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2015/04/route-tasks-even-faster-with-taskrouter-multi-reservation.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Announcing Video</title>
		<link>https://twilioinc.wpengine.com/2015/04/announcing-video-nt.html</link>
		<comments>https://twilioinc.wpengine.com/2015/04/announcing-video-nt.html#comments</comments>
		<pubDate>Tue, 14 Apr 2015 13:00:27 +0000</pubDate>
		<dc:creator><![CDATA[Al Cook]]></dc:creator>
				<category><![CDATA[News]]></category>

		<guid isPermaLink="false">http://twilioinc.wpengine.com/?p=14929</guid>
		<description><![CDATA[<p>Today, we announced Video. Developers can now create fundamentally better experiences by embedding live peer-to-peer video into mobile and web applications. Video is much more than just being able to talk face to face. Video enables users to share what it is they’re working on, and to express things that cannot be expressed with voice and text alone. Attendees at Signal will be the first to... <a class="read-more" href="https://twilioinc.wpengine.com/2015/04/announcing-video-nt.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2015/04/announcing-video-nt.html">Announcing Video</a></p>]]></description>
				<content:encoded><![CDATA[<p><a href="http://twilioinc.wpengine.com/wp-content/uploads/2015/04/Twilio-Video_Blog-1280x530.jpg"></a>Today, we announced <a href="http://www.twilio.com/video">Video</a>. Developers can now create fundamentally better experiences by embedding live peer-to-peer video into mobile and web applications. Video is much more than just being able to talk face to face. Video enables users to share what it is they’re working on, and to express things that cannot be expressed with voice and text alone.</p>
<p>Attendees at <a href="http://signal.twilio.com">Signal</a> will be the first to get their hands on the beta (May 19 &amp; 20 in San Francisco). In the meantime, you can get on the waitlist for early access on <a href="http://www.twilio.com/video">www.twilio.com/video</a> and learn more at our meetups in <a href="https://www.eventbrite.com/e/twilio-webrtc-meetup-new-york-tickets-16472367294">New York (Apr 20)</a>, <a href="https://www.eventbrite.com/e/twilio-webrtc-meetup-san-francisco-tickets-16415599500">San Francisco (Apr 21)</a> and <a href="https://www.eventbrite.com/e/twilio-webrtc-meetup-mountain-view-tickets-16466731437">Mountain View (Apr 22)</a>.</p>
<h3><b>Using video to create better experiences</b></h3>
<p>Before we jump into the details, here’s an example of why we’re excited about this. Zendesk was one of our first customers to take Twilio Video for a test drive. The Twilio crew flew out to Zendesk&#8217;s office in Dublin, Ireland to build the proof-of-concept. The idea was simple: What if we could take advantage of the camera on a mobile phone to completely change the mobile customer service experience? Zendesk already enables customer support teams to answer customer service phone calls directly in the Zendesk browser app. They also enable businesses to embed Zendesk&#8217;s customer support features directly into customer-facing mobile apps through their Embeddables SDK. We wanted to combined Embeddables, Zendesk&#8217;s agent interface, and Twilio Video to help customer service reps see and solve problems first-hand.</p>
<p>The combined team had a prototype integrated into Zendesk working within a day, and a polished demo within a week. In the final demo app, customers can tap a button to connect with an agent over video, and share the front or rear cameras from their mobile, or the screen of their mobile device. Agents can capture video frames and add them directly into a Zendesk support ticket when they see something of interest. The outcome is a richer customer support conversation, one where a customer can show a support rep the specifics of the problem they are grappling with, rather than trying to explain it in words.</p>
<p>Twilio Video is a combination of cloud infrastructure and client-side SDKs. The Cloud Infrastructure provides all of the orchestration for setting up a video call: Registration, signaling, and media routing. The new Twilio web and mobile SDKs provide the other half, making it really easy to consume these services across the different supported platforms of iOS, Android and JavaScript.</p>
<h3><b>Built on WebRTC</b></h3>
<p>When we set out to build Video, we knew we wanted to one day reach every device and every platform with realtime communications capabilities. This is why WebRTC, the open standard for realtime communications, sits at the core of Twilio Video. WebRTC already has strong support in the Chrome and Firefox web browsers, allowing users to leverage video capabilities without installing software or plugins. The open source WebRTC libraries are designed for cross-platform compatibility, opening up a world of mobile, desktop and IoT devices to the standard.</p>
<p>But WebRTC is just a piece of the puzzle, not a solution. To take advantage of the standard, you still need to provide registration, signaling, and network traversal to enable endpoints to find one another and establish connections. Twilio Video makes this happen with its Video orchestration services available in 28 data centers in 7 geographies around the world.</p>
<p>The cloud isn&#8217;t the only place where some heavy lifting is required. WebRTC, in its native form, is optimized to work well in a web browser running on a powerful desktop device. Twilio&#8217;s SDK team is investing massive energy to make sure the platform performs well in more constrained computing platforms, such as iOS and Android devices, and on a variety of hardware configurations. Optimizing media quality and SDK performance is an ongoing mission–we’re always testing and tweaking to squeeze the best performance out of the platform.</p>
<h3><b>Designed for a new breed of applications</b></h3>
<p>We know that the next generation of communications applications will change the way we connect, work together and share with one another, and get things done. We know this new world needs a new breed of communications primitives.</p>
<p>That&#8217;s why Twilio Video has been designed from the start to support multi-party voice and video calls. Up to 4-way peer-to-peer calling with Twilio Video gives you the ability to add participants ad-hoc to a voice and/or video conversation. To enable that, Twilio Video provides:</p>
<ul>
<li><strong>Unlimited video connections</strong>: Registration and Signaling capabilities are globally distributed and designed to scale elastically as load increases.</li>
<li><strong>Low latency relay</strong>: Automated network traversal enables peer-to-peer connections across firewalls. The closest Twilio data center is automatically chosen as the media relay point when firewall conditions prevent a peer-to-peer connection.</li>
<li><strong>Optimized Mobile Media Stack</strong>: Optimized for iOS and Android, Twilio SDKs ensure great quality real-time media on mobile devices despite common network challenges such as jitter, packet loss and latency</li>
<li><strong>Cross Platform Data Channel</strong>: All peer to peer calls have access to a DataChannel between users, allowing data transfer directly over DTLS/SCTP alongside the media flows. This can be used to send files, send arbitrary JSON data or anything else. For example, a user can draw on top of the video they&#8217;re viewing, and the data for that can be transferred and shown immediately on the other side.</li>
</ul>
<p>We’re really excited about Twilio Video. Whether you’re building a face to face communication service, or building video into your existing app to create great customer experiences, we can’t wait to see what you build.</p>
<p><a href="https://twilioinc.wpengine.com/2015/04/announcing-video-nt.html">Announcing Video</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2015/04/announcing-video-nt.html/feed</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Introducing the General Availability of Twilio Elastic SIP Trunking</title>
		<link>https://twilioinc.wpengine.com/2015/03/introducing-the-general-availability-of-twilio-elastic-sip-trunking.html</link>
		<comments>https://twilioinc.wpengine.com/2015/03/introducing-the-general-availability-of-twilio-elastic-sip-trunking.html#respond</comments>
		<pubDate>Mon, 16 Mar 2015 19:33:12 +0000</pubDate>
		<dc:creator><![CDATA[Al Cook]]></dc:creator>
				<category><![CDATA[News]]></category>
		<category><![CDATA[SIP]]></category>
		<category><![CDATA[SIP Trunking]]></category>
		<category><![CDATA[Twilio SIP]]></category>
		<category><![CDATA[Twilio SIP GA]]></category>
		<category><![CDATA[WebRTC]]></category>

		<guid isPermaLink="false">http://twilioinc.wpengine.com/?p=14793</guid>
		<description><![CDATA[<p>Today we are happy to announce the general availability of Twilio Elastic SIP Trunking. Today’s launch brings instant provisioning, contract-free transparent pricing and global availability to the world of SIP Trunking. The SIP industry modeled itself on the technology (and buying experiences) of the by-gone 1870s. Elastic SIP Trunking brings ease of use, internet scale, and a modern approach to using SIP. We know SIP Trunking... <a class="read-more" href="https://twilioinc.wpengine.com/2015/03/introducing-the-general-availability-of-twilio-elastic-sip-trunking.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2015/03/introducing-the-general-availability-of-twilio-elastic-sip-trunking.html">Introducing the General Availability of Twilio Elastic SIP Trunking</a></p>]]></description>
				<content:encoded><![CDATA[<p dir="ltr" id="docs-internal-guid-4dea4e65-1498-4272-e7cb-06652dc381b9">Today we are happy to announce the general availability of <a href="http://twilio.com/sip-trunking">Twilio Elastic SIP Trunking</a>. Today’s launch brings instant provisioning, contract-free transparent pricing and global availability to the world of SIP Trunking. The SIP industry modeled itself on the technology (and buying experiences) of the by-gone 1870s.<a href="http://twilio.com/sip-trunking"> Elastic SIP Trunking</a> brings ease of use, internet scale, and a modern approach to using SIP.</p>
<p dir="ltr">We know SIP Trunking can seem pretty boring. PSTN connectivity for PBXs and Call Centers is mission critical stuff, but not everyone’s cup of tea. But there’s something that really intrigued us about SIP Trunking.</p>
<p dir="ltr">Even though SIP Trunking has been an option for providing dial-tone to IP infrastructure for nearly two decades, 80% of the world’s enterprises still use the technology that came before it &#8211; connecting voice over dedicated time-division multiplexed (TDM) lines. TDM, in case you weren’t paying attention in history class, encodes media in a digital binary signal, over a dedicated copper wire. It was invented in the 1870s. That’s before the first gasoline powered car was invented.</p>
<p dir="ltr">So let’s recap: 80% of enterprises are getting their voice connectivity using a means of transmission first invented for telegrams which is now nearly 150 years old, and only 20% of enterprises have managed to adopt the technology that launched around the same time as AOL were bringing out access to a thing called the ‘world wide web’ using a CD-ROM.</p>
<p dir="ltr">Weirdly, this was actually not completely surprising to us.</p>
<p dir="ltr">In the 6 years Twilio has been in business, we’ve become one of the largest consumers of carrier interconnections in the world. We’ve handled many billions of minutes of voice traffic and currently interconnect with 3,200 carriers around the world. In the course of doing that, we’ve noticed one recurring theme about getting <a href="http://twilio.com/sip-trunking">SIP</a> Trunking connectivity, anywhere in the world. It. Is. So. Slow.</p>
<p dir="ltr">It’s slow to get pricing, because the traditional offerings have opaque pricing models more reminiscent of the 1870s tech that came before it than a real internet based offering. It’s slow to get configured, because it can take literally months of back and forth before the service can be configured. It’s slow to set up security features like encrypted media (SRTP) because it requires yet more manual back and forth. It’s slow to add new features, because you’re stuck waiting for your trunking provider or PBX vendor to add the thing they think you need. And it’s slow to expand your footprint, because you have to repeat this exercise with a new carrier for every region.</p>
<p dir="ltr">We believe SIP Trunking will be the defacto way for providing dial tone to IP infrastructure, and we felt companies needed a better way of achieving that, so we built Elastic SIP Trunking.</p>
<p dir="ltr">Elastic SIP Trunking takes our core carrier connectivity that we’ve spent years building and unbundles it from the rest of our product stack. You can provision a SIP trunk on demand, through the portal or the API, with inbound numbers in over 50 countries. Instead of months to deploy, it takes seconds. It uses our global cloud platform to dynamically connect your IP infrastructure to the closest of seven regions around the world, and from there selects the best carrier for connecting the call  based on real-time quality measurements using metrics like jitter, latency and MOS score. The architecture is built with resiliency in mind at every level.</p>
<p dir="ltr"><a href="https://www.twilio.com/blog/2014/11/introducing-elastic-sip-trunking-nt.html">We launched this in beta back in November</a>, and have been delighted with the number of companies who we’ve been able to free from the slow procurement cycles and get them instantly provisioned. We’re now happy to say that the service is out of beta and generally available, backed up by a guaranteed SLA. In addition, we’re adding several security focused features which we’re rolling out in phases, including encrypted media (SRTP), dedicated connections (MPLS) and emergency services calling (E911). You can request early access to these features through the website or portal.</p>
<p dir="ltr" id="docs-internal-guid-4dea4e65-149b-0209-e96c-fd59e23e1d1b"><a href="http://twilio.com/sip">Twilio Elastic SIP Trunking</a> features include:</p>
<ul>
<li>Instant provisioning of trunks for inbound numbers from 50 countries and outbound calling to every country in the world</li>
<li>Transparent, pay as you go pricing with no capacity limits</li>
<li>Secure connections whether over MPLS or TLS/SRTP (early access)</li>
<li>E911 support for emergency service access (early access)</li>
<li>SIP Registration for extending connectivity directly to SIP phones (early access)</li>
<li>Numbers that can send and receive SMS and MMS</li>
<li>Data-driven routing that uses real-time quality measurements to dynamically route outbound calls to the best carrier</li>
<li>One-click call recording, with no additional hardware or per-user fees &#8212; just a simple per-minute charge for cloud storage of the recording.</li>
<li>Failover to powerful TwiML scripting to specify what failover logic should apply to replicate on-premise IP-PBX functions if a local internet outage occurs.</li>
<li>Multi-tenanted SIP Trunks with per-tenant billing records and logs, making it easy to track usage by department, account or use case all under one master account.</li>
<li>Accreditation with Edgewater’s Enterprise SBC, making it faster and easier to deploy in enterprises.</li>
<li>Backed by an SLA that provides a 10% or more service credit if Twilio falls below the SIP Trunking service availability commitment of 99.95%.</li>
</ul>
<p><a href="https://twilioinc.wpengine.com/2015/03/introducing-the-general-availability-of-twilio-elastic-sip-trunking.html">Introducing the General Availability of Twilio Elastic SIP Trunking</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2015/03/introducing-the-general-availability-of-twilio-elastic-sip-trunking.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
