<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Twilio Cloud Communications Blog</title>
	<atom:link href="https://twilioinc.wpengine.com/feed" rel="self" type="application/rss+xml" />
	<link>https://twilioinc.wpengine.com</link>
	<description></description>
	<lastBuildDate>Fri, 13 Jan 2017 19:24:02 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.2</generator>

<image>
	<url>https://twilioinc.wpengine.com/wp-content/uploads/2015/09/cropped-favicon_1141-32x32.png</url>
	<title>Twilio Cloud Communications Blog</title>
	<link>https://twilioinc.wpengine.com</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Building an IVR with no code by using TaskRouter as a state machine</title>
		<link>https://twilioinc.wpengine.com/2017/01/building-an-ivr-with-no-code-by-using-taskrouter-as-a-state-machine.html</link>
		<comments>https://twilioinc.wpengine.com/2017/01/building-an-ivr-with-no-code-by-using-taskrouter-as-a-state-machine.html#respond</comments>
		<pubDate>Thu, 12 Jan 2017 16:00:47 +0000</pubDate>
		<dc:creator><![CDATA[Al Cook]]></dc:creator>
				<category><![CDATA[Code, Tutorials and Hacks]]></category>
		<category><![CDATA[Task Router]]></category>
		<category><![CDATA[XML]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=19411</guid>
		<description><![CDATA[<p>The other day, a customer showed me their Twilio-powered IVR. Specifically, the code that tracks a caller&#8217;s progress through the IVR. They built an IVR state machine that solved some of the common challenges many run into when building a complex, multi-stage IVR: They wanted a generic, re-usable solution to keep track of where each caller is within the overall IVR experience each time you get... <a class="read-more" href="https://twilioinc.wpengine.com/2017/01/building-an-ivr-with-no-code-by-using-taskrouter-as-a-state-machine.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2017/01/building-an-ivr-with-no-code-by-using-taskrouter-as-a-state-machine.html">Building an IVR with no code by using TaskRouter as a state machine</a></p>]]></description>
				<content:encoded><![CDATA[<p><span style="font-weight: 400;">The other day, a customer showed me their Twilio-powered IVR. Specifically, the code that tracks a caller&#8217;s progress through the IVR. They built an IVR state machine that solved some of the common challenges many run into when building a complex, multi-stage IVR:</span></p>
<ul>
<li style="font-weight: 400;"><span style="font-weight: 400;">They wanted a generic, re-usable solution to keep track of where each caller is within the overall IVR experience each time you get a webhook, rather than hard-coding the state tracking to the current configuration of the IVR</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">They wanted for people to be able to change the configuration of the IVR  without making code changes. </span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">They wanted a JSON based syntax for defining an IVR workflow so that they could tie it to a visual IVR flow builder which automatically creates the right JSON.</span></li>
</ul>
<p><span style="font-weight: 400;">Their demo sparked this thought &#8211; at its heart, <a href="https://www.twilio.com/docs/api/taskrouter">TaskRouter</a> is a state machine. </span></p>
<p><span style="font-weight: 400;">I built an IVR abstraction on top of TaskRouter to function as a backbone, and solve the typical challenges of tracking state. </span></p>
<p><span style="font-weight: 400;">I found you can build an IVR with nothing but TaskRouter and TwiML Bins. </span></p>
<p><span style="font-weight: 400;">What I built uses the TaskRouter workflow syntax for defining the flow between different states, and TwiML Bins for hosting the XML associated with each state. This post shows you the architecture of the backbone hack. Grab it here on </span><a href="https://github.com/calozpom/taskrouterivr"><span style="font-weight: 400;">GitHub</span></a></p>
<p><b>How it works</b></p>
<p><span style="font-weight: 400;">Each call coming in to the IVR is represented as a task within TaskRouter &#8211; the task is created the first time the call hits my application server, and from then on the same Task is used for each subsequent webhook, by looking up the Task from the CallSid.</span></p>
<p><span style="font-weight: 400;">Each TaskQueue represents a state within the IVR &#8211; i.e. a spoken menu and a DTMF <pre class="crayon-plain-tag">&lt;Gather&gt;</pre>  request for the caller to specify where they want to go next. As the caller navigates the IVR, the Task is updated with what state they just left, and what DTMF digits they entered &#8211; and then the TaskRouter workflow expression dictates which TaskQueue state the call moves to next &#8211; and therefore what TwiML should be returned to Twilio. </span></p><pre class="crayon-plain-tag">app.post('/initiateivr', function(request, response) {
    var attributesJson = {};
    checkForExistingTask(request.body['CallSid'], function(returnedTask) {
        if (!returnedTask) {
            attributesJson['CallSid'] = request.body['CallSid'];
            attributesJson['From'] = request.body['From'];
            attributesJson['To'] = request.body['To'];
            createTask(attributesJson, function(returnedTask){
                response.send(getTwimlfromTwimlBin(returnedTask));
            });
        }
        else {
            attributesJson['exited_node'] = returnedTask.task_queue_friendly_name.split(':')[0];
            attributesJson[returnedTask.task_queue_friendly_name.split(':')[0] + '_entered_digits'] = request.body['Digits'];
            updateTask(attributesJson, returnedTask, function(updatedTask){
                response.send(getTwimlfromTwimlBin(updatedTask));
            });
        }
    });
});</pre><p><span style="font-weight: 400;">In order to return the right TwiML, each IVR State (TaskQueue) is correlated with a TwiML Bin which hosts the TwiML for that state. When Twilio webhooks to my application server seeking instructions for what to do with the call, my application server looks up what TaskQueue the Task is currently in, and then returns the TwiML from the TwiML Bin associated with that TaskQueue. It does this based on the name of each TaskQueue being of the form <pre class="crayon-plain-tag">&lt;Friendly_name&gt;:&lt;TwiMLBin Sid&gt;</pre> . </span></p>
<p><span style="font-weight: 400;">When a caller enters digits from a <pre class="crayon-plain-tag">&lt;Gather&gt;</pre>  in that TwiML, before looking up the TaskQueue, my code first updates the task with an attribute containing the digits entered, and the last state left &#8211; so that TaskRouter re-routes the Task to the new TaskQueue based on this new information. So for example if a <pre class="crayon-plain-tag">&lt;Gather&gt;</pre>  in the state “first_state” of an IVR led to digits being entered, those digits will be available within an attribute on the Task as <pre class="crayon-plain-tag">first_state_entered_digits.</pre> </span></p><pre class="crayon-plain-tag">attributesJson['exited_state'] = returnedTask.task_queue_friendly_name.split(':')[0];

attributesJson[returnedTask.task_queue_friendly_name.split(':')[0] + '_entered_digits'] = request.body['Digits'];

updateTask(attributesJson, returnedTask, function(updatedTask){

   response.send(getTwimlfromTwimlBin(updatedTask));

});</pre><p><span style="font-weight: 400;">In addition, TaskRouter will pass all of the Task’s current attributes to the TwiML Bin, so any of them can be read aloud by the TwiML by simply including the attribute name in the form <pre class="crayon-plain-tag">{{task_&lt;attributename&gt;}}</pre> . E.g:</span></p><pre class="crayon-plain-tag">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;Response&gt;

 &lt;Say&gt;Thank you for confirming your ZIP code. You entered {{task_first_state_entered_digits}}&lt;/Say&gt;

&lt;/Response&gt;</pre><p><span style="font-weight: 400;">My application server will also automatically insert spaces between any sequence of numbers, or an E164 number before including it in the parameters to the TwiML Bin, in order to have Twilio pronounce it correctly. This is why all attributes are referenced with a </span><span style="font-weight: 400;">task_</span><span style="font-weight: 400;"> prefix from the TwiML Bin, so you can take advantage of this automatic number formatting.</span></p>
<p><b>An example flow</b></p>
<p><span style="font-weight: 400;">So to piece together the different parts, let’s walk through a basic IVR example where a caller dials in, hears a menu, presses 1, and then hears a different menu. In this scenario:</span></p>
<ul>
<li style="font-weight: 400;"><span style="font-weight: 400;">When the call first comes in, the application server receives a webhook from Twilio. It verifies this is a new call and creates a task associated with it</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">When the task is created, Twilio returns the TaskQueue it has been routed to based on the workflow. My application server then fetches the TwiML from the TwiML Bin associated with that TaskQueue</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">The application server returns that TwiML to Twilio in response to the initial webhook. This TwiML includes a <pre class="crayon-plain-tag">&lt;Gather&gt;</pre>  requesting DTMF digits, which once fulfilled will webhook to my application server again.</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">When the webhook for the completed <pre class="crayon-plain-tag">&lt;Gather&gt;</pre>  comes in, my application server finds the correlating Task based on CallSid. It then updates the attributes of the task with the dialed digits and the state the Task just exited. </span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">Twilio responds to that task update with the new TaskQueue (state) which the task has been routed to based on the new attributes. My application server retrieves the TwiML Bin associated with that new TaskQueue, and responds to the webhook for the completed <pre class="crayon-plain-tag">&lt;Gather&gt;</pre>  with that TwiML. </span></li>
</ul>
<p>&nbsp;</p>
<p><b>Building IVR workflows in TaskRouter</b></p>
<p><span style="font-weight: 400;">So now we have the framework for our IVR flow builder, everything else can be configured with no code, using only the workflow. </span></p>
<p><span style="font-weight: 400;">So for example, moving from the first state to the second state if the digit ‘1’ is pressed is as simple as:</span></p><pre class="crayon-plain-tag">"filters": [
     {
       "targets": [
         {
           "queue": "WQ77fc8f0cc8346e5ff37ac82dc944e141"
         }
       ],
       "filter_friendly_name": "Send calls from the first state to the second state if they entered 1",
       "expression": "exited_state=='first_state' AND first_state_entered_digits ==1"
     }
   ],</pre><p><span style="font-weight: 400;">And of course because it’s built on TaskRouter all the pre-defined attributes can also be used, so to have a different IVR menu for inside business hours is as simple as:</span></p><pre class="crayon-plain-tag">"filters": [
           {
               "targets": [
                   {
                       "queue": "WQ57cab415732dec475f600c75eab44cc9"
                   }
               ],
               "filter_friendly_name": "Business Hours Menu",
               "expression": "(taskrouter.dayOfWeek IN ['Mon', 'Tue', 'Wed','Thu', 'Fri']
                               AND taskrouter.currentTime &gt; 800
                               AND taskrouter.currentTime &lt; 1730)
            }
       ],</pre><p><b>After the IVR</b></p>
<p><span style="font-weight: 400;">Once the caller has reached a ‘leaf state’ in the IVR where it is ready to be assigned to an agent, it is simply a case of using the workflow to move that to a TaskQueue which has workers matched to it.</span></p>
<p><span style="font-weight: 400;">Alternatively if you wanted to move the task to a different workspace in order to keep TaskQueues and metrics separate, you could maintain an attribute within the task which is a JSON blob of all task attributes, and then <pre class="crayon-plain-tag">&lt;Enqueue&gt;</pre>  the task into a new workflow and include those attributes. </span></p>
<p><b>A foundation for building complex IVRs?</b></p>
<p><span style="font-weight: 400;">I’m excited about the potential of this, and keen to hear your thoughts as to whether this approach would be worth us investing in productizing. You can email me at <a href="mailto:al@twilio.com">al@twilio.com</a>. To get started with TaskRouter, read <a href="https://www.twilio.com/docs/api/taskrouter">the docs</a>.</span></p>
<p><span style="font-weight: 400;">The back end for this is all Node, making heavy use of callbacks for dealing with the asynchronous nature of this. </span><span style="font-weight: 400;"><br />
</span><span style="font-weight: 400;"><br />
</span><i><span style="font-weight: 400;">Disclaimer: In no way is this production quality code. Pull Requests welcome!</span></i></p>
<p><a href="https://twilioinc.wpengine.com/2017/01/building-an-ivr-with-no-code-by-using-taskrouter-as-a-state-machine.html">Building an IVR with no code by using TaskRouter as a state machine</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2017/01/building-an-ivr-with-no-code-by-using-taskrouter-as-a-state-machine.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Logrole Gives You Permissions Based, Granular Searching For Twilio Logs</title>
		<link>https://twilioinc.wpengine.com/2017/01/logrole-gives-you-permissions-based-granular-searching-for-twilio-logs.html</link>
		<comments>https://twilioinc.wpengine.com/2017/01/logrole-gives-you-permissions-based-granular-searching-for-twilio-logs.html#respond</comments>
		<pubDate>Wed, 11 Jan 2017 21:47:04 +0000</pubDate>
		<dc:creator><![CDATA[Kyle Kelly-Yahner]]></dc:creator>
				<category><![CDATA[Code, Tutorials and Hacks]]></category>
		<category><![CDATA[Customer Highlights]]></category>
		<category><![CDATA[Go]]></category>
		<category><![CDATA[twilio logs]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=19401</guid>
		<description><![CDATA[<p>Few hold the keys to the Twilio Console, but many need Console data. As the developer with keys, you balance sharing valuable data with keeping that Console data safe. You can’t give away the keys when a team member needs info on a single message. The alternative of pulling reports manually for each request is also infeasible &#8212; especially when you’re fighting bad guys. A long-standing... <a class="read-more" href="https://twilioinc.wpengine.com/2017/01/logrole-gives-you-permissions-based-granular-searching-for-twilio-logs.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2017/01/logrole-gives-you-permissions-based-granular-searching-for-twilio-logs.html">Logrole Gives You Permissions Based, Granular Searching For Twilio Logs</a></p>]]></description>
				<content:encoded><![CDATA[<p>Few hold the keys to the <a href="https://www.twilio.com/login">Twilio Console</a>, but many need Console data. As the developer with keys, you balance sharing valuable data with keeping that Console data safe.</p>
<p>You can’t give away the keys when a team member needs info on a single message. The alternative of pulling reports manually for each request is also infeasible &#8212; especially when you’re fighting bad guys.</p>
<p>A long-standing Twilio customer specializing in human trafficking investigations contracted developer Kevin Burke to build a tool that satisfies the needs of the keyholder and the needs of the person looking for data. That client (graciously) chose to open-source the project for the benefit of Twilio customers everywhere.</p>
<p><a href="https://github.com/saintpete/logrole">Logrole</a> is a Go-based tool that enables organizations to delegate limited, role-based access to Twilio logs and search them faster and with more granularity. It also allows others to get the data they’re looking for on their own, securely.</p>
<h3>Giving Users The Log Access They Need (And Nothing More)</h3>
<p><img class="aligncenter size-full wp-image-19405" src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/LogroleTime.png" alt="logroletime" width="1239" height="619" srcset="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/LogroleTime.png 1239w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/LogroleTime-300x150.png 300w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/LogroleTime-768x384.png 768w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/LogroleTime-1024x512.png 1024w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/LogroleTime-200x100.png 200w" sizes="(max-width: 1239px) 100vw, 1239px" /></p>
<p>Developers can set customizable permissions for their Twilio Logs. Now teams without the keys can independently access the data they need, and only the data they need.</p>
<p>Logrole lets you limit access to the body of SMS &amp; MMS messages and limits searches past a certain date. This was particularly important for the client in shielding their support agents from sensitive images. Account SIDs are hidden from end users, and URLs may be enabled or disabled based on the technical needs of the end user. That’s the security side of Logrole; the UX side is the meat of the tool.</p>
<p><img class="aligncenter size-full wp-image-19406" src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/LogroleSearch.gif" alt="logrolesearch" width="764" height="250" /></p>
<p>Logrole was designed to make it easier for teams to search for and work with Twilio data. For example, my 9am is different than my co-worker’s 9am. I’m in San Francisco. They’re in New York. Logrole is time-zone aware and specific to each user so you don’t have to google “Mountain Time to Pacific Time” before you search.</p>
<p>Take a look at the other time-saving hacks into built into Logrole. The tool also allows you to search Resource SIDs straight from your browser. You can search or paste any SID to jump straight to it.</p>
<h3>Building With Go</h3>
<p>It only took Kevin Burke a month to build Logrole, thanks in no small part to choosing Go.</p>
<p>“I really like the standard library, I like that it runs pretty quickly when you run it and doesn&#8217;t take a lot of memory to do so. You can also do really cool stuff with coordinating requests across multiple threads (and canceling them all at once) that are very difficult to accomplish in other languages,” says Kevin.</p>
<p>“I developed a separate <a href="https://github.com/saintpete/twilio-go">twilio-go library</a> as a part of the project. It&#8217;s the only client library that can filter calls and SMS by start/end, down to the millisecond. There are a bunch of other nice features as well; I&#8217;d encourage Go users to check it out.”</p>
<p>If you’re a Twilio or Go fan (or both) you can check out the library <a href="https://github.com/saintpete/twilio-go">here</a>, and grab Logrole on GitHub right <a href="https://github.com/saintpete/logrole">here</a>.</p>
<p><a href="https://twilioinc.wpengine.com/2017/01/logrole-gives-you-permissions-based-granular-searching-for-twilio-logs.html">Logrole Gives You Permissions Based, Granular Searching For Twilio Logs</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2017/01/logrole-gives-you-permissions-based-granular-searching-for-twilio-logs.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Build Callbacks With Stamplay, Twilio and Unbounce</title>
		<link>https://twilioinc.wpengine.com/2017/01/build-callbacks-with-stamplay-twilio-and-unbounce.html</link>
		<comments>https://twilioinc.wpengine.com/2017/01/build-callbacks-with-stamplay-twilio-and-unbounce.html#respond</comments>
		<pubDate>Fri, 06 Jan 2017 20:31:34 +0000</pubDate>
		<dc:creator><![CDATA[Kyle Kelly-Yahner]]></dc:creator>
				<category><![CDATA[Code, Tutorials and Hacks]]></category>
		<category><![CDATA[callback]]></category>
		<category><![CDATA[nodejs]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=19380</guid>
		<description><![CDATA[<p>Over the holidays I flew from San Francisco to New York with a stop in Denver. United Airlines delayed my flight from Denver to New York two hours. They said it might get cancelled. I called their customer support department, who didn&#8217;t help, and waited on hold for a supervisor. With all this time on my hands, I sent them a few tweets. I waited for... <a class="read-more" href="https://twilioinc.wpengine.com/2017/01/build-callbacks-with-stamplay-twilio-and-unbounce.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2017/01/build-callbacks-with-stamplay-twilio-and-unbounce.html">Build Callbacks With Stamplay, Twilio and Unbounce</a></p>]]></description>
				<content:encoded><![CDATA[<p>Over the holidays I flew from San Francisco to New York with a stop in Denver. United Airlines delayed my flight from Denver to New York two hours. They said it might get cancelled. I called their customer support department, who didn&#8217;t help, and waited on hold for a supervisor. With all this time on my hands, I <a href="https://twitter.com/KyleKellyYahner/status/810619301837225984">sent</a> <a href="https://twitter.com/KyleKellyYahner/status/810627002730364928">them</a> a <a href="https://twitter.com/KyleKellyYahner/status/810632210894049280">few</a> <a href="https://twitter.com/KyleKellyYahner/status/810637786202017793">tweets</a>. I waited for an hour and 30 minutes before hanging up.<br />
&nbsp;<br />
If someone from United had actually answered, I could have told them that building callback capability isn&#8217;t hard. Instead of spending my time listening to elevator music over the phone on hold, I could have thrown my phone number into their website and read a book while waiting for a callback.<br />
&nbsp;<br />
We can&#8217;t change the past, but we can build a callback function with <a href="http://stamplay.com/">Stamplay</a>, <a href="http://twilio.com/voice">Twilio</a>, and <a href="http://unbounce.com/">Unbounce</a>. Let&#8217;s do it.</p>
<p><em>Psst&#8230;you can read the original blog post by Stamplay over <a href="https://blog.stamplay.com/create-a-call-back-landing-page-with-unbounce-and-twilio-1eb59bee8127#.lxg8w4kxg">here</a></em></p>
<h3>Configuring the Unbounce landing page</h3>
<p><img class="aligncenter size-full wp-image-19382" src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/2.png" alt="2" width="600" height="374" srcset="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/2.png 600w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/2-300x187.png 300w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/2-200x125.png 200w" sizes="(max-width: 600px) 100vw, 600px" /><br />
Regardless from the starting template or graphical style of your Unbounce landing page the only thing that you really need is a Phone Number field.</p>
<p>If you’re starting from scratch you can find some templates on Unbounce that have the Phone Number form field already included like the Service Callback one.</p>
<p>If you already have your form in place just be sure to add a Phone Number field, you can add fields to your form by double-clicking on the form itself. A pop up window will be shown allowing you to select the field from the Pre-defined fields on the left.</p>
<p>Once this is completed let’s get a Twilio account.</p>
<p><img class="aligncenter size-full wp-image-19384" src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/4centered.png" alt="4centered" width="800" height="354" srcset="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/4centered.png 800w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/4centered-300x133.png 300w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/4centered-768x340.png 768w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/4centered-200x89.png 200w" sizes="(max-width: 800px) 100vw, 800px" /></p>
<h3>Getting Twilio Wired Up</h3>
<p>Create a <a href="http://twilio.com">Twilio account</a>, buy a phone number, then head over to your Console Dashboard and find your Account SID and Auth Token. Copy the Account SID and Auth Token, we’re going to use them in a minute.</p>
<p><img class="aligncenter size-full wp-image-19385" src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/5centered.png" alt="5centered" width="800" height="366" srcset="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/5centered.png 800w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/5centered-300x137.png 300w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/5centered-768x351.png 768w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/5centered-200x92.png 200w" sizes="(max-width: 800px) 100vw, 800px" /></p>
<h3>Configuring the Blueprint</h3>
<p>This app is available as a Blueprint, a pre-built template to help you get started with proven integration solutions. To get started <a href="https://editor.stamplay.com/blueprints/584ad122b2f257fcbc259546/start">click here</a>.</p>
<p>You’ll be prompted to pick a name for your project and then a walkthrough wizard will start. After that Stamplay will prompt you to:</p>
<ul>
<li>Connect your Unbounce account</li>
<li>Provide a couple of Twilio credentials</li>
</ul>
<p><img class="aligncenter size-full wp-image-19386" src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/6centered.png" alt="6centered" width="800" height="430" srcset="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/6centered.png 800w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/6centered-300x161.png 300w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/6centered-768x413.png 768w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/6centered-200x108.png 200w" sizes="(max-width: 800px) 100vw, 800px" /></p>
<p>Once you have connected the two services click on Next.</p>
<h3>Connecting Your Landing Page to Your Phone Number</h3>
<p>Next step is to select the Unbounce page containing the Phone Number field, then select the Twilio number that will be used to call your lead. Then type the phone number that will be called after your lead pick up the phone. Just be sure to include your country code (e.g. +14152225555). Once this you’ve completed the above mentioned steps the last thing that you still have to do is to click on the link to complete your app configuration.</p>
<p><img class="aligncenter size-full wp-image-19387" src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/7centered.png" alt="7centered" width="800" height="378" srcset="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/7centered.png 800w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/7centered-300x142.png 300w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/7centered-768x363.png 768w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/7centered-200x95.png 200w" sizes="(max-width: 800px) 100vw, 800px" /></p>
<p><img class="aligncenter size-full wp-image-19388" src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/8centered.png" alt="8centered" width="800" height="432" srcset="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/8centered.png 800w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/8centered-300x162.png 300w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/8centered-768x415.png 768w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/8centered-200x108.png 200w" sizes="(max-width: 800px) 100vw, 800px" /></p>
<p><img class="aligncenter size-full wp-image-19389" src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/9centered.png" alt="9centered" width="800" height="370" srcset="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/9centered.png 800w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/9centered-300x139.png 300w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/9centered-768x355.png 768w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/9centered-200x93.png 200w" sizes="(max-width: 800px) 100vw, 800px" /></p>
<h3>How It Works Behind The Scenes</h3>
<p>The blueprint is the result of mixing together all the key features of Stamplay, for the most curious here is the breakdown:</p>
<ul>
<li>an API Flow that is triggered by the Unbounce landing page and start the phone call with Twilio</li>
<li>the persistent data storage</li>
<li>a NodeJS serverless function that generates the TwiML required by the Call action</li>
</ul>
<p>&nbsp;</p>
<p><img class="aligncenter size-full wp-image-19390" src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/10centered.png" alt="10centered" width="764" height="379" srcset="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/10centered.png 764w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/10centered-300x149.png 300w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/10centered-200x99.png 200w" sizes="(max-width: 764px) 100vw, 764px" /></p>
<p>&nbsp;</p>
<h3>The Flow</h3>
<p>The scope of the Flow is to collect informations from Unbounce and the configuration of our app containing the phone number that will be connected with the new lead and pass it the Twilio action.</p>
<p>The Twilio takes in input some parameters which are: the number of our lead (passed from the unbounce trigger), the Twilio phone number which will make the call and the URL of a TwiML file.</p>
<p>TwiML is a set of instructions to tell Twilio what to do when you receive make a call or receive an SMS. When someone makes a call or sends an SMS to one of your Twilio numbers, Twilio will look up the URL associated with that phone number and make a request to that URL.</p>
<p><img class="aligncenter size-full wp-image-19392" src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/12centered.png" alt="12centered" width="800" height="526" srcset="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/12centered.png 800w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/12centered-300x197.png 300w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/12centered-768x505.png 768w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/12centered-200x132.png 200w" sizes="(max-width: 800px) 100vw, 800px" /></p>
<p>&nbsp;</p>
<p><img class="aligncenter size-full wp-image-19391" src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/11centered.png" alt="11centered" width="800" height="153" srcset="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/11centered.png 800w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/11centered-300x57.png 300w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/11centered-768x147.png 768w, https://twilioinc.wpengine.com/wp-content/uploads/2017/01/11centered-200x38.png 200w" sizes="(max-width: 800px) 100vw, 800px" /></p>
<p>The URL points to our Code Block <pre class="crayon-plain-tag">https://APPNAME.stamplayapp.com/api/codeblock/v1/run/get_twiml?connectwith={{NUMBER_FROM_SETTINGS}}&amp;first_name={{NAME}}</pre></p>
<h3>Responding With TwiML</h3>
<p>The NodeJS Code Block simply return an XML response containing a message (that you can customize as it pleases you) that will be read by the text-to-speech engine of Twilio and the phone number that will be connected with the Unbounce lead.</p>
<p></p><pre class="crayon-plain-tag">module.exports = function(context, req, res) {
 var connectwith = context.query.connectwith;
 var first_name = context.query.first_name;
 res.setHeader(‘x-custom-header’, ‘custom!’);
 res.writeHead(200, {‘Content-Type’: ‘text/xml’});
 res.end(`<?xml version=”1.0" encoding=”UTF-8"?>
 <Response>
 <Say voice=”alice”>Hey ${first_name} thanks for contacting our lovely callback service we’re connecting 
 you with our team right now, please hold on one second.</Say>
 <Dial>+${connectwith}</Dial>
 </Response>`);
};</pre><p>&nbsp;</p>
<p>That&#8217;s it! You&#8217;re good to go. Spare your customers from the United-style of customer service with the call back.</p>
<p><a href="https://twilioinc.wpengine.com/2017/01/build-callbacks-with-stamplay-twilio-and-unbounce.html">Build Callbacks With Stamplay, Twilio and Unbounce</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2017/01/build-callbacks-with-stamplay-twilio-and-unbounce.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Build a Basic Call Center in Just a Few Minutes with Twilio</title>
		<link>https://twilioinc.wpengine.com/2017/01/build-a-basic-call-center-in-just-a-few-minutes-with-twilio.html</link>
		<comments>https://twilioinc.wpengine.com/2017/01/build-a-basic-call-center-in-just-a-few-minutes-with-twilio.html#comments</comments>
		<pubDate>Wed, 04 Jan 2017 20:05:53 +0000</pubDate>
		<dc:creator><![CDATA[Dominik Kundel]]></dc:creator>
				<category><![CDATA[Code, Tutorials and Hacks]]></category>
		<category><![CDATA[conference]]></category>
		<category><![CDATA[Node.js]]></category>
		<category><![CDATA[twiml]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=19366</guid>
		<description><![CDATA[<p>TwiML Bins are a great tool to quickly build basic Twilio apps such as a personal conference line. But that is nowhere near the limit of their power. In the next 10 minutes we will build a basic call center that you can use with multiple agents. Setup Before we get started, make sure you have a Twilio account (you can get one here) and that you... <a class="read-more" href="https://twilioinc.wpengine.com/2017/01/build-a-basic-call-center-in-just-a-few-minutes-with-twilio.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2017/01/build-a-basic-call-center-in-just-a-few-minutes-with-twilio.html">Build a Basic Call Center in Just a Few Minutes with Twilio</a></p>]]></description>
				<content:encoded><![CDATA[<p><a href="https://www.twilio.com/blog/2016/05/introducing-native-twiml-bins-powered-by-the-twilio-cloud.html">TwiML Bins</a> are a great tool to quickly build basic Twilio apps such as <a href="https://www.twilio.com/blog/2016/05/how-to-set-up-your-own-twilio-conference-line-with-twiml-bins.html">a personal conference line</a>. But that is nowhere near the limit of their power. In the next 10 minutes we will build a basic call center that you can use with multiple agents.</p>
<h3 id="h.887prrv91w1m" class="c2 c8">Setup</h3>
<p>Before we get started, make sure you have a Twilio account (you can <a href="https://www.twilio.com/try-twilio">get one here</a>) and that you are logged into the <a href="https://www.twilio.com/console">Console</a>.</p>
<p>Additionally you will need <a href="https://nodejs.org">Node.js</a> installed on your computer.</p>
<h3 id="h.fkd5tx7q5l8m" class="c2 c8">Please Hold the Line &#8211; Adding People to the Queue</h3>
<p>TwiML Bins allow you to host instructions written in Twilio’s markup language <a href="https://www.twilio.com/docs/api/twiml">TwiML</a> directly within Twilio. They can be used for incoming and outgoing calls as well as for incoming SMS.</p>
<p>For our call center we need two different TwiML Bins. One that enqueues people and one that picks someone from the queue and connects them.<br />
<img class="&quot; aligncenter" style="width: 624.00px; height: 336.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/KKrQicwdXdts9MhEmCxphbwfQEznXZLE70vroYGCPFlv19QDwWHFhCNPBv0BYVnuWz5jUeq25GUTa18ufCSKTZKfs86b2-FoJ9W9yR9gYssFBygzkAAd5jES3gqeKHjt-hNHI_zY.png" alt="create-twiml-bin.gif" /></p>
<p><a href="https://www.twilio.com/console/dev-tools/twiml-bins/create">Create a TwiML Bin</a> with the name “Join Queue” and enter the following TwiML:</p><pre class="crayon-plain-tag">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Response&gt;
  &lt;Say voice="alice"&gt;Welcome to our call center! Please wait until someone is ready to assist you.&lt;/Say&gt;
  &lt;Enqueue waitUrl="http://twimlets.com/holdmusic?Bucket=com.twilio.music.guitars"&gt;callcenter&lt;/Enqueue&gt;
&lt;/Response&gt;</pre><p>This TwiML will say a greeting and then add the caller to the <code>callcenter</code> queue using the <a href="https://www.twilio.com/docs/api/twiml/enqueue"><code>&lt;Enqueue&gt;</code></a> verb. Click “Create” to save your TwiML Bin.</p>
<p>This TwiML Bin should be triggered whenever a call comes into your Twilio number. Go to the configuration screen of your <a href="https://www.twilio.com/console/phone-numbers/incoming">existing Twilio phone number</a> or <a href="https://www.twilio.com/console/phone-numbers/search">purchase a new one</a>. Select &#8220;TwiML&#8221; from the dropdown next to “A call comes in” and then select your new TwiML Bin. Make sure to save the changes.</p>
<p><img class="&quot; aligncenter" style="width: 624.00px; height: 156.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/xyz0j3c-n0B4SGZYUqhhgdE1oHZY7WCslR4DU3EMn5rdqjlgjlY2EWGbhy0jktmi6F4A-vci6rIgSyDAc9s7YUGk4yFgBR9mkp7yTcJSzYt7AxYBbhgGCTPbsTBwej4GtGGtSvsz.png" alt="configure-twimlbin.png" /></p>
<h3 id="h.ga0uw77ya4sh" class="c2 c8">Working Off the Queue</h3>
<p><img class="&quot; aligncenter" style="width: 500.00px; height: 281.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/cFiw8zBcKK95P1jLcv_1Ur88ofW2pZLcGLuiMy_S_bTwYUvGvnTSNSoJWaV-T3qULsrTYwo_MecGaPtOvCjIniGxQvxQa_pdIJlOJ74cxxlyGM64z1BOFtdaRA_AkkOmuZ_1GOdk.png" alt="" /></p>
<p>Next <a href="https://www.twilio.com/console/dev-tools/twiml-bins/create">create a second TwiML Bin</a> called “Work Off Queue” and add the following lines:</p><pre class="crayon-plain-tag">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Response&gt;
  &lt;Say voice="alice"&gt;Be ready to be connected to the next customer&lt;/Say&gt;
  &lt;Dial&gt;
    &lt;Queue&gt;callcenter&lt;/Queue&gt;
  &lt;/Dial&gt;
&lt;/Response&gt;</pre><p>In order to work off the queue we use the <a href="https://www.twilio.com/docs/api/twiml/queue"><code>&lt;Queue&gt;</code></a> noun nested inside a <a href="https://www.twilio.com/docs/api/twiml/dial"><code>&lt;Dial&gt;</code></a> element. It will automatically grab a connection out of the specified queue and establish a connection with the other person. Save the TwiML Bin by clicking “Create” and copy the URL to your TwiML Bin Handler that you will find on the next page.<br />
<img class="&quot; aligncenter" style="width: 624.00px; height: 180.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/ZVMRQ74d9VjVmsbSLHoQEF55z0wgZvLwRRZ4rjFBCpC_N8AtHDp9AIjUm6dOxGtkW4UO4phP9NRbxeHAuhbBn_am4-VtongMIAm51Xov9gfCm3kqMcBMOlPVuyhwXY_R4hqSbtnE.png" alt="twimlbin-url.png" /></p>
<p>Now we will use the <a href="https://www.twilio.com/docs/api/rest/making-calls">Twilio REST API to initiate a call</a> to our own cell phone using our TwiML Bin. Rather than working with the REST API directly we are going to use the <a href="https://www.twilio.com/docs/libraries/node">Node.js helper library</a>. However, you can use any other language you might be more comfortable with.</p>
<p>Create a new folder on your computer and install the Twilio Node.js helper library by running:</p><pre class="crayon-plain-tag">npm init -y
npm install twilio --save</pre><p>Create a new file called <code>call-from-queue.js</code> and add the following code:</p><pre class="crayon-plain-tag">var twilio = require('twilio');
var client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

var from = 'YOUR_TWILIO_NUMBER';
var to = process.argv[2]; // take the passed in command-line argument
var url = 'YOUR_TWIML_BIN_URL';

if (!to) {
  throw new TypeError('Please pass in a phone number to call to this script.')
}

client.calls.create({
  from: from,
  to: to,
  url: url
}).then(function () {
  console.log('Your phone should be ringing');
}).catch(function (err) {
  console.error(err.message);
});</pre><p>For this code to run you’ll have to store your Twilio Account SID and Twilio Auth Token as the respective environment variables <code>TWILIO_ACCOUNT_SID</code> and <code>TWILIO_AUTH_TOKEN</code>. Alternatively you can pass the two arguments directly into the <code>twilio()</code> call. Make sure to replace <code>YOUR_TWILIO_NUMBER</code> with a valid Twilio number you own. This can be the same number as number you used above. Replace <code>YOUR_TWIML_BIN_URL</code> with the URL of the second TwiML Bin.</p>
<p>Ask a friend to call into your Twilio number to be put into the queue. Now all you need to do is execute the script with your own phone number to call your phone and work off the queue.</p><pre class="crayon-plain-tag">node call-from-queue.js +491111111111111</pre><p></p>
<h3 id="h.jl6hq2j84lh2" class="c2 c8">What’s Next?</h3>
<p>Awesome! You just built your first call center but you don’t have to stop here though. How about creating a new TwiML Bin and using its URL to place it into a <a href="https://www.twilio.com/docs/api/twiml/enqueue#attributes-waitUrl"><code>waitUrl</code></a> attribute for the <a href="https://www.twilio.com/docs/api/twiml/enqueue"><code>&lt;Enqueue&gt;</code></a> to give a nice customized message to the user while they are waiting or even the position they are in the queue. Or check out one of these other resources for things that you can build with TwiML Bins:</p>
<ul style="padding-left: 36px;">
<li><a href="https://www.twilio.com/blog/2016/05/how-to-set-up-your-own-twilio-conference-line-with-twiml-bins.html">Set up your own conference line</a></li>
<li><a href="https://www.twilio.com/blog/2016/07/how-to-set-up-a-temporary-phone-number-in-less-than-five-minutes-with-twiml-bins.html">Create a temporary “burner” phone number</a></li>
<li><a href="https://www.twilio.com/blog/2016/11/set-up-an-sms-forwarding-number-in-5-minutes-with-twilio.html">Forward incoming SMS using TwiML Bins</a></li>
<li>The <a href="https://www.twilio.com/docs/api/twiml">TwiML documentation</a></li>
</ul>
<p>The power of TwiML is huge and the applications vast. I would love to hear and see what you build with it! So feel free to drop me a line:</p>
<ul style="padding-left: 36px;">
<li>Email: dkundel@twilio.com</li>
<li>Twitter: <a href="https://twitter.com/dkundel">@dkundel</a></li>
<li>GitHub: <a href="https://github.com/dkundel">dkundel</a></li>
</ul>
<p><a href="https://twilioinc.wpengine.com/2017/01/build-a-basic-call-center-in-just-a-few-minutes-with-twilio.html">Build a Basic Call Center in Just a Few Minutes with Twilio</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2017/01/build-a-basic-call-center-in-just-a-few-minutes-with-twilio.html/feed</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Redact or Delete SMS Messages as They Arrive with Node.js</title>
		<link>https://twilioinc.wpengine.com/2017/01/redact-delete-sms-messages-node-js.html</link>
		<comments>https://twilioinc.wpengine.com/2017/01/redact-delete-sms-messages-node-js.html#respond</comments>
		<pubDate>Wed, 04 Jan 2017 17:46:01 +0000</pubDate>
		<dc:creator><![CDATA[Phil Nash]]></dc:creator>
				<category><![CDATA[Code, Tutorials and Hacks]]></category>
		<category><![CDATA[delete]]></category>
		<category><![CDATA[JavaScript]]></category>
		<category><![CDATA[Node.js]]></category>
		<category><![CDATA[REST API]]></category>
		<category><![CDATA[SMS]]></category>
		<category><![CDATA[text message]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=19375</guid>
		<description><![CDATA[<p>Keeping tabs on who has access to data in your application is hard when they exist in multiple places, like SMS messages in your app and within Twilio. Here&#8217;s how to redact or delete messages as soon you receive them with Node.js. What you&#8217;ll need To build this application to redact or delete SMS messages, you&#8217;ll need: A Twilio account (you can sign up for a... <a class="read-more" href="https://twilioinc.wpengine.com/2017/01/redact-delete-sms-messages-node-js.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2017/01/redact-delete-sms-messages-node-js.html">Redact or Delete SMS Messages as They Arrive with Node.js</a></p>]]></description>
				<content:encoded><![CDATA[<p>Keeping tabs on who has access to data in your application is hard when they exist in multiple places, like SMS messages in your app and within Twilio. Here&#8217;s how to redact or delete messages as soon you receive them with Node.js.</p>
<h3 id="h.hwiavc4npex">What you&#8217;ll need</h3>
<p>To build this application to redact or delete SMS messages, you&#8217;ll need:</p>
<ul>
<li>
A Twilio account (you can <a href="https://www.twilio.com/try-twilio">sign up for a free account</a> if you don&#8217;t have one)
</li>
<li>
<a href="https://www.twilio.com/console/phone-numbers/incoming">A Twilio phone number</a> that can send and receive SMS messages
</li>
<li>
<a href="https://nodejs.org/en/">Node.js</a> to build the app (I&#8217;m using the latest in the long term support series, version 6.9.2)
</li>
<li>
<a href="https://ngrok.com">ngrok</a> so we can <a href="https://www.twilio.com/blog/2015/09/6-awesome-reasons-to-use-ngrok-when-testing-webhooks.html">expose our development server to Twilio&#8217;s webhooks</a>
</li>
</ul>
<p>Got all that ready? Let&#8217;s see how to delete some messages.</p>
<h3 id="h.l30wrlx4lveq">Building a webhook endpoint</h3>
<p>In order to delete or redact our messages as they arrive we need to get notified by Twilio that we have received a message. To receive these notifications we use a webhook. When our Twilio number receives a message Twilio will make an HTTP request to a URL we supply with all the details about the message.</p>
<p>On the command line, create a new folder for our application, change into that folder and initialise a new Node.js application.</p>
<p></p><pre class="crayon-plain-tag">$ mkdir self-destructing-messages
$ cd self-destructing-messages
$ npm init -y</pre><p></p>
<p>We need to install a few libraries to get our application started.</p>
<ul>
<li>
<a href="http://expressjs.com/">express</a> for creating the web application
</li>
<li>
<a href="https://github.com/expressjs/body-parser">body-parser</a> to read the body of the requests sent to the app from Twilio
</li>
<li>
the <a href="https://www.twilio.com/docs/libraries/node">Node.js Twilio helper</a> for making requests to the <a href="https://www.twilio.com/docs/api/rest">Twilio REST API</a>
</li>
</ul>
<p></p><pre class="crayon-plain-tag">$ npm install express body-parser twilio &mdash;save</pre><p></p>
<p>Now create a file called <code>index.js</code> and open it in your favourite editor. Enter the following application boilerplate:</p>
<p></p><pre class="crayon-plain-tag">// index.js
const express = require('express');
const bodyParser = require('body-parser');

const app = new express();

app.use(bodyParser.urlencoded({ extended: false }));

// app goes here

app.listen(3000, () =&gt; {
  console.log('Your application has started on http://localhost:3000')
});</pre><p></p>
<p>We need an endpoint that can receive POST requests from Twilio whenever our Twilio number receives a message. We&#8217;ll start simple and create one that logs out the incoming message. The message body is sent as the <code>Body</code> parameter in <a href="https://www.twilio.com/docs/api/twiml/sms/twilio_request">Twilio&#8217;s request to the application</a>. Add a route for a POST request to <code>/messages</code> with the following code to log the message.</p>
<p></p><pre class="crayon-plain-tag">// index.js

app.use(bodyParser.urlencoded({ extended: false }));

app.post('/messages', (request, response) =&gt; {
  console.log(request.body.Body);
  response.send('&lt;Response/&gt;');
});</pre><p></p>
<p>Start up the server:</p>
<p></p><pre class="crayon-plain-tag">$ node index.js</pre><p></p>
<p>In another terminal get ngrok started as well:</p>
<p></p><pre class="crayon-plain-tag">$ ngrok http 3000</pre><p></p>
<p>Copy your ngrok URL and open the Twilio console to edit your <a href="https://www.twilio.com/console/phone-numbers/incoming">phone number</a>. Enter the ngrok URL with a path to <code>/messages</code> in the Messaging config.</p>
<p><img alt="When editing the phone number in the Twilio console, find the messaging section and enter your ngrok URL into the field with the label 'A message comes in'" src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/jb-6tPINqx47OpEAnXUlE4WwOKew8cMr7R4QqqBetVLj7lBfFQ1RvAbH1JmdJ5wbL2Sm6SED2oiUt-cP9700WdxGElRuYK5skdo1vp26gnIAuxmG15KZByRFzc9LHau-NsxJJek.png" class="aligncenter"></p>
<p>Now send your number a message and watch as the message is logged to the console! I sent myself a message that I knew wouldn&#8217;t be deleted.</p>
<p><img alt="The terminal shows the application starts and then prints out the message 'Hello, this message won't be deleted.'" src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/EUcF-uiZDlQEC_BoFJxHPIIN9-fyMms65NXurRFtou0yq9Wigad2So7MKaA9rsN9ZmmUsBrxoHz2zx7ohl0TkIGr2l-6rDlEu00zuhjQ_ZkY-d9EWoUcRHWJBzKNUruTJa74aow.png" class="aligncenter"></p>
<p>And there&#8217;s the message in the Twilio console log.</p>
<p><img alt="In the Twilio log you can also see the message 'Hello, this message won't be deleted.'" src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/ZrSRVali8mbsU-jxEH6nqc_9Ea51QVzdR45G-slbqfRFjEJLG478CmYo_6uJOUnUOaYF2H_8jwDxodY8Ug_26HPlv1mVC5CfudvLtoVaTVuG60FbJdorPyLSnIe9d-xnfWU48_k.png" class="aligncenter"></p>
<p>Let&#8217;s get down to redacting that message body or deleting the message entirely.</p>
<h3 id="h.ddcf3q6xo3vx">Setting up the Twilio REST Client</h3>
<p>To redact the text in a message or delete it completely we&#8217;re going to use the <a href="https://www.twilio.com/docs/libraries/node">Twilio Node.js helper library</a> to access the <a href="https://www.twilio.com/docs/api/rest">REST API</a>. The library will need to use your Account SID and Auth Token so set them as the environment variables <code>TWILIO_ACCOUNT_SID</code> and <code>TWILIO_AUTH_TOKEN</code>. If you&#8217;re not sure how to set environment variables, take a look at this <a href="https://github.com/twilio/starter-node/blob/master/README.md#setting-up">setup guide</a>.</p>
<p>Now we need to require the Twilio module and set up a REST client to use to access the API.</p>
<p></p><pre class="crayon-plain-tag">// index.js
const express = require('express');
const bodyParser = require('body-parser');
const twilio = require('twilio');

const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
const app = new express();</pre><p></p>
<h3 id="h.ou1a7qqhv1k9">Redacting message bodies</h3>
<p>To delete the text from a message we need to update the message resource by POSTing to it with a blank body. In your <code>/messages</code> route add the following code:</p>
<p></p><pre class="crayon-plain-tag">// index.js
app.post('/messages', (request, response) =&gt; {
  console.log(request.body.Body);
  client.messages(request.body.MessageSid).post({ body: '' })
    .then((message) =&gt; response.send('&lt;Response/&gt;'))
    .catch((err) =&gt; {
      console.error(err);
      response.send('&lt;Response/&gt;');
    });
});</pre><p></p>
<p>Restart your server and send another message. You&#8217;ll see the body logged in the terminal, but when we inspect the Twilio console the message body will be gone.</p>
<p><img alt="This time in the Twilio log the message body appears empty, it has been redacted." src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/JnasJWBU27LBarAqN2A9MWuU6gjJckEbw2gKNAlpqyCZ8eF5tbI-GTAzQmYIdlNBFnHM9Qlxzc-bKVwZZ_Fg2MEp9y97xN7mj5Ec30Xdjqev15yMKIRSvlU44DTB9jBGMVQbaIw.png" class="aligncenter"></p>
<h3 id="h.lkdht4yydnfc">Deleting messages</h3>
<p>We&#8217;ve managed to redact the body of the message, but what if we want to delete the message completely? We can perform a DELETE through the REST API. There is a slight problem here though. When the message arrives at our webhook, it may not have been marked as &#8220;received&#8221; within Twilio. We can&#8217;t delete the message until it is &#8220;received&#8221; so we keep checking the message until its status changes to &#8220;received&#8221;. Then we can delete it.</p>
<p>We first add a function to index.js which checks the message and its status and if it is &#8220;received&#8221; then deletes it, otherwise the application waits for 1 second and tries again.</p>
<p></p><pre class="crayon-plain-tag">// index.js
function tryDelete(messageSid) {
  client.messages(messageSid).get()
    .then((message) =&gt; {
      if (message.status === "received") {
        client.messages(messageSid).delete()
          .then(() =&gt; console.log("Message deleted"))
          .catch((err) =&gt; console.error(err));
      } else {
        setTimeout(() =&gt; tryDelete(messageSid), 1000);
      }
    })
    .catch((err) =&gt; console.error(err));
}</pre><p></p>
<p>We don&#8217;t want the web request to be waiting around for the message to get deleted, so we return some empty TwiML first, then call on our <code>tryDelete</code> function.</p>
<p></p><pre class="crayon-plain-tag">// index.js
app.post('/messages', (request, response) =&gt; {
  console.log(request.body.Body);
  response.send('&lt;Response/&gt;')
  tryDelete(request.body.MessageSid);
});</pre><p></p>
<p>Restart your server again and send in a message. It will get printed to the console, then you will see &#8220;Message deleted&#8221; printed and when you check the Twilio console it will be gone.</p>
<p><img alt="In the terminal the message is logged, shortly after the log 'Message deleted' is seen too." src="https://twilioinc.wpengine.com/wp-content/uploads/2017/01/Q4atBIXBKoq0D5T4r_h45Y2xrNTGappQYNPMHTMM4em5QoaNjJ2CwvLJbYBSosmiXXBdfzV_FZp9XXpXGvIS3QEP3fUS3JvU_nKRBxlmhjVmFLKuVMCJgLSuRmFWU8Odp3U4XEM.png" class="aligncenter></p>
<h3 id="h.vflyqyl2wour">Message privacy restored</h3>
<p>So that&#8217;s all you need to do to redact or delete your received messages in Twilio using Node.js. I recommend that rather than just logging the received message, you store it in your own database so that you can control who can and can&#8217;t read it.</p>
<p>If you&#8217;ve got excited about deleting things from Twilio, there&#8217;s more!</p>
<ul>
<li>
If you also receive media messages, then watch out, you need to <a href="https://www.twilio.com/docs/api/rest/media#instance-delete">delete the media</a> separate from the message text
</li>
<li>
If you have call logs, recordings or transcriptions you want to delete <a href="https://support.twilio.com/hc/en-us/articles/223133047-Delete-calls-recordings-and-transcriptions-">you can do that too</a>
</li>
</ul>
<p>Do you use other techniques to keep your messages under the sole control of your system? Let me know in the comments or drop me an email at <a href="mailto:philnash@twilio.com">philnash@twilio.com</a>.</p>
<p><a href="https://twilioinc.wpengine.com/2017/01/redact-delete-sms-messages-node-js.html">Redact or Delete SMS Messages as They Arrive with Node.js</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2017/01/redact-delete-sms-messages-node-js.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Gifted: Artificial Intelligence to Hack Gift Giving</title>
		<link>https://twilioinc.wpengine.com/2016/12/gifted-artificial-intelligence-to-hack-gift-giving.html</link>
		<comments>https://twilioinc.wpengine.com/2016/12/gifted-artificial-intelligence-to-hack-gift-giving.html#respond</comments>
		<pubDate>Tue, 20 Dec 2016 20:50:25 +0000</pubDate>
		<dc:creator><![CDATA[Megan Speir]]></dc:creator>
				<category><![CDATA[Developers Drawing The Owl]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=19352</guid>
		<description><![CDATA[<p>Artificial Intelligence (AI) is coming for us all. Michael Jordan, a mechanical engineer by trade, came to this realization while working as the director of energy and sustainability at a New York City based firm serving large real estate clients. While busy building energy models, Michael thought that much of his work in applied engineering was actually an optimization problem. Eventually, AI will solve most of... <a class="read-more" href="https://twilioinc.wpengine.com/2016/12/gifted-artificial-intelligence-to-hack-gift-giving.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2016/12/gifted-artificial-intelligence-to-hack-gift-giving.html">Gifted: Artificial Intelligence to Hack Gift Giving</a></p>]]></description>
				<content:encoded><![CDATA[<p>Artificial Intelligence (AI) is coming for us all. Michael Jordan, a mechanical engineer by trade, came to this realization while working as the director of energy and sustainability at a New York City based firm serving large real estate clients.</p>
<p>While busy building energy models, Michael thought that much of his work in applied engineering was actually an optimization problem. Eventually, AI will solve most of these problems through automation.</p>
<p>Sometimes it&#8217;s best to face the inevitable and dive head first into the unknown. Embracing the future, Michael decided to do just this by studying more about machine learning and AI.</p>
<p>His tutelage ran the gamut from text-based learning with <a href="http://scikit-learn.org/stable/tutorial/text_analytics/working_with_text_data.html">scikit</a>&#8211;<a href="http://scikit-learn.org/stable/modules/feature_extraction.html">learn</a> to genetic algorithms. He was excited by the idea that you could take a product specification and learn the math behind it. This exploration led him to image analysis with the <a href="https://cloud.google.com/vision/">Google Vision API</a> and finally to <a href="https://clarifai.com">Clarifai</a>.</p>
<h3 id="h.um4ysw1s5v3r">The Epic Christmas List</h3>
<p><img class="&quot; aligncenter" style="width: 624.00px; height: 581.33px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/12/j-BhLqMTOpb3hN1tisXy8FJ7gYkPXMdDP1KdYSWEV3-c463t8xk4t3ndPfi25XY2fam7wuYrgDjXNp-mBsaYLI-noS6WSqumu2Ey6Id6bTwKw10c3FZaekRNtvy5T5niswDyfEK.png" alt="" /></p>
<p>For years, Michael kept what he called, &#8220;The Epic Christmas List&#8221; mostly to document his heart&#8217;s greatest desires. But Michael found he was often asked by others what to gift during the season of giving and he would share the list with any such inquirer.</p>
<p>But Michael would also spend a lot of time following up to help give the gift recommendation a personal touch based upon a photograph or more detailed description of the person. Automating this recommendation method became a top priority because it was kind of a time suck. Certainly his new friend AI could help with that.</p>
<p>Michael applied machine learning to the epic christmas list. Given a corpus (of image data), he aimed to determine the relevance of each gift based upon its <a href="https://en.wikipedia.org/wiki/Tf–idf">tf-idf</a> (term frequency-inverse document frequency) or how well it related to the corpus data based upon tagged attributes (i.e. pretty, fancy, etc.) as defined in Clarifai.</p>
<p>&#8220;The tags were awesome, as they were pretty qualitative&#8221; he said. &#8220;I agreed with them!&#8221;</p>
<p>Given an image of a person, using artificial intelligence powered by algorithms and Clarifai, Gifted will suggest a gift for the individual based upon their surroundings or &#8220;interests&#8221; in a given photograph.</p>
<p>Here&#8217;s a sample of the Clarifai code:</p><pre class="crayon-plain-tag"># Authenticate with Clarifai 
CLARIFAI_APP_ID = 'CLARIFAI_APP_ID' #Go to https://www.clarifai.com/ and hit "Get your free API key"
CLARIFAI_APP_SECRET = 'CLARIFAI_APP_SECRET' ##Go to https://www.clarifai.com/ and hit "Get your free API key"

# Load the image from Twilio
pic_url = event['image']
twilio_pic = urllib2.Request(pic_url, headers={'User-Agent': "Magic Browser"})
image = urllib2.urlopen(twilio_pic)

#Load the Clarifai API 
api = ClarifaiApi()
# Process the photo with Clarifai
results = api.tag_image_urls(pic_url)['results']
# Process and store the tag confidences (if you need them)
confidence = api.tag_image_urls(pic)['results'][0]['result']['tag']['probs'] 

#Create the photo tag list
tags = []
for result in results:
        tags = tags   result['result']['tag']['classes']
        
#Remove the photo's stop words. These are words that don't provide useful information for your recommendation
stop_words = ['INSERT THE PHOTO TAGS THAT MAKE YOUR RECOMMENDATIONS WORSE']
#Example of stop words I found unhelpful:
stop_words = ['casual','landscape', 'indoors', 'sit', 'wear','horizontal', 'grass','portrait', 'people', 'facial expression', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'monochrome', 'human', 'administration', 'isolated', 'solo']
#Remove the stop words
tag_set = set(tags) - set(stop_words) 

# You now have the tags and confidence for the photo from twilio. You can get creative and decide how you feel to these best match your recommendation database.</pre><p></p>
<h3 id="h.um4ysw1s5v3r">Gifted Giving</h3>
<p>With the artificial intelligence piece of the product puzzle working, Michael needed to make it usable. &#8220;I have zero front-end skills,&#8221; he says. As he shopped the idea around, a friend suggested Michael do it through text messaging.</p>
<p>&#8220;It&#8217;s something everyone knows how to do and is comfortable with,&#8221; Michael says of sending messages.</p>
<p>A quick search led him to this <a href="https://www.twilio.com/blog/2015/11/sending-selfies-without-servers-how-to-use-twilio-mms-amazon-lamba-and-amazons-gateway.html">blog post</a>, using Amazon Lambda and their API Gateway to send MMS without servers.</p>
<p>The architecture looks something like this:</p>
<p>&nbsp;</p>
<p><img class="&quot; aligncenter" style="width: 624.00px; height: 260.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/12/xNWzqjDZKIvBT0K4T5KwSFhPjDMCTRjI06cRnsEgu_edShBHdjn1biVRT76IvkaAMvkDywnzrqocak3T32ny8wyZ8YlakmMVkNkMZxvKRSOCTchTYn4lZqAFvi_j11sF-kV31civ.png" alt="" /><br />
Thanks to that post, Michael was able to throw away a lot of his Python code in one weekend and architect a sort of micro-platform using Amazon and Twilio to build a consumer product with a familiar front-end via messaging.</p>
<p><img class="&quot; aligncenter" style="width: 323.09px; height: 573.50px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/12/k7aNLhBYYfZh5cNOV82_MVWxjFhRije67vy0JMC8I53-az_vFF97D9hYLppW5invWegc2hL2Oy6EDmjeiR4hcboccg_VgPa5GJCHhAh1kJf-VxbuxrhH4bt8S4ekPuTSHQIyu1Gl.png" alt="" /></p>
<h3></h3>
<h3 id="h.um4ysw1s5v3r">Unwrapped &#8211; How Does it Work?</h3>
<p>After testing Gifted with friends, Michael says, &#8220;People were blown away by how good some of the suggestions were and by how bad or funny some of the others happened to be.&#8221;</p>
<p>The hardest part was manually attaching gifts to a tag in the database.</p>
<p><a href="https://www.twilio.com/docs/api/rest/sending-messages">Sending an MMS</a> through Gifted, creates a Twilio GET request with the image. This goes through the Amazon API Gateway and converts the request into JSON. Then an AWS Lambda function representing the app is where Clarifai receives the image from Twilio, tags it and compares the image to those already in the database. This is where the quality of the recommendation comes in &#8211; and returns an Amazon link to a related product from the <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html">Pandas dataframe</a> built into the application.</p>
<p>Gifted was built with Python 2.7 as Lambda does not yet support Python 3. But Michael says, &#8220;That&#8217;s a nice thing about machine learning is that basically everything is in Python.&#8221;</p>
<h3 id="h.um4ysw1s5v3r">Give a Gifted Gift</h3>
<p>There&#8217;s still time to finish some last minute shopping or try out Gifted for another gift-giving occasion.</p>
<p>This Christmas, Michael sussed out with his own creation that he will be buying a lot of books. &#8220;I didn&#8217;t know Michael Lewis was writing a new book and my mom is like the all-time biggest Michael Lewis fan!&#8221;</p>
<p>To learn more about the project or try it out for yourself, visit <a href="http://www.givingiq.com">http://www.givingiq.com</a>.</p>
<p>If you&#8217;re up for building your own artificial intelligence product for &#8220;X&#8221; like Gifted, check out the following resources:</p>
<ul style="padding-left: 36px;">
<li><a href="http://clarifai.com">Clarifai</a></li>
<li><a href="https://www.twilio.com/blog/2015/11/sending-selfies-without-servers-how-to-use-twilio-mms-amazon-lamba-and-amazons-gateway.html">AWS Lambda Twilio</a></li>
<li><a href="https://www.twilio.com/docs/api/rest/sending-messages">Sending SMS and MMS</a></li>
</ul>
<p><a href="https://twilioinc.wpengine.com/2016/12/gifted-artificial-intelligence-to-hack-gift-giving.html">Gifted: Artificial Intelligence to Hack Gift Giving</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2016/12/gifted-artificial-intelligence-to-hack-gift-giving.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Getting started with Sanic: the asynchronous, uvloop based web framework for Python 3.5+</title>
		<link>https://twilioinc.wpengine.com/2016/12/getting-started-with-sanic-the-asynchronous-uvloop-based-web-framework-for-python-3-5.html</link>
		<comments>https://twilioinc.wpengine.com/2016/12/getting-started-with-sanic-the-asynchronous-uvloop-based-web-framework-for-python-3-5.html#respond</comments>
		<pubDate>Tue, 20 Dec 2016 18:00:10 +0000</pubDate>
		<dc:creator><![CDATA[Sam Agnew]]></dc:creator>
				<category><![CDATA[Code, Tutorials and Hacks]]></category>
		<category><![CDATA[Python]]></category>
		<category><![CDATA[Python 3.5]]></category>
		<category><![CDATA[sanic]]></category>
		<category><![CDATA[twilio sms]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=19322</guid>
		<description><![CDATA[<p>uvloop has been making waves in the Python world lately as a blazingly fast drop-in for asyncio&#8217;s default event loop. Sanic is a Flask-like, uvloop-based web framework that&#8217;s written to go fast. It is also named after the popular Sanic Internet meme, a poorly drawn version of Sonic the Hedgehog. Sanic is made for Python 3.5 . The framework allows you to take advantage of async/await syntax for defining... <a class="read-more" href="https://twilioinc.wpengine.com/2016/12/getting-started-with-sanic-the-asynchronous-uvloop-based-web-framework-for-python-3-5.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2016/12/getting-started-with-sanic-the-asynchronous-uvloop-based-web-framework-for-python-3-5.html">Getting started with Sanic: the asynchronous, uvloop based web framework for Python 3.5+</a></p>]]></description>
				<content:encoded><![CDATA[<p><a href="https://github.com/MagicStack/uvloop">uvloop</a> has been making waves in the Python world lately as a blazingly fast drop-in for asyncio&#8217;s default event loop. <a href="https://github.com/channelcat/sanic">Sanic</a> is a Flask-like, uvloop-based web framework that&#8217;s written to <a href="https://www.youtube.com/watch?v=X7DnyP4dqsw">go fast</a>. It is also named after the popular Sanic Internet meme, a <a href="https://www.youtube.com/watch?v=0uy7nCQItiQ">poorly drawn version of Sonic the Hedgehog</a>.</p>
<p>Sanic is made for Python 3.5 . The framework allows you to take advantage of async/await syntax for defining asynchronous functions. With this, you can write async applications in Python similar to how you would write them in Node.js.</p>
<h3 id="h.vczhc4jqkmt3" class="c1">Responding to basic HTTP requests</h3>
<p>The &#8220;Hello World&#8221; example with Sanic looks like this:</p><pre class="crayon-plain-tag">from sanic import Sanic
from sanic.response import text


app = Sanic()


@app.route("/")
async def hello(request):
    return text("Hello World!")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)</pre><p>Create a new directory for this project, and paste that code into a new file called <code>app.py</code>. In order to run this code, you&#8217;ll also want to create a <a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/">virtual environment</a> (make sure to use Python 3 when creating the environment) and run the following command to install Sanic:</p><pre class="crayon-plain-tag">pip install sanic</pre><p>And run the application:</p><pre class="crayon-plain-tag">python app.py</pre><p>And visit <a href="http://localhost:8000">http://localhost:8000</a> to see &#8220;Hello World!&#8221; on the page.</p>
<p>&#8220;Hello World&#8221; is nice, but let&#8217;s see what else we can do. In this next example, we&#8217;ll switch things up a bit to figure out how to work with query arguments in the request data. Change the code in <code>app.py</code> to the following:</p><pre class="crayon-plain-tag">from sanic import Sanic
from sanic.response import text


app = Sanic()


@app.route("/")
async def hello(request):
    # request.args is a dict where each value is an array.
    return text("Hello {}".format(request.args["name"][0]))

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)</pre><p>Run the code again and this time visit <a href="http://localhost:8000/?name=Sam">http://localhost:8000/?name=Sam</a>. Feel free to replace &#8220;Sam&#8221; with your own name. When you visit the web page, it should be greeting you by name.</p>
<h3 id="h.8vlltydlif7v" class="c1">Responding to text messages</h3>
<p>Next we can use Sanic to do something useful. We&#8217;ll write code that uses Twilio to respond to a text message. You&#8217;ll need a Twilio account for this, but don&#8217;t worry you can <a href="https://www.twilio.com/try-twilio">sign up for free</a>.</p>
<p>When someone texts your Twilio number, <a href="https://www.twilio.com/docs/api/twiml/sms/twilio_request">Twilio makes an HTTP request</a> to your app. Details about that SMS are passed via the request parameters. Twilio expects an HTTP response from your web app in the form of <a href="https://www.twilio.com/docs/api/twiml">TwiML</a>, which is a set of simple XML tags used to tell Twilio what to do next.</p>
<p>Replace the code in <code>app.py</code> again with the following code to quickly respond to a text message:</p><pre class="crayon-plain-tag">from sanic import Sanic
from sanic.response import text


app = Sanic()


@app.route("/sms")
async def hello(request):
    # request.form is a dict where each value is an array.
    message_body = request.form["Body"][0]

    # Since we are just responding with a message, we can return a String
    return text("You said: {}".format(message_body))

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)</pre><p>All you need to do is <a href="https://www.twilio.com/console/phone-numbers/search">grab a Twilio number</a> or use a phone number that comes with your trial account and configure it to send <code>POST</code> requests to your app whenever you receive a text message.</p>
<p>Our app needs a publicly accessible URL. To avoid having to deploy every time we make a change, we&#8217;ll use a nifty tool called <a href="https://www.twilio.com/blog/2015/09/6-awesome-reasons-to-use-ngrok-when-testing-webhooks.html">ngrok</a> to open a tunnel to our local machine.</p>
<p>Ngrok generates a custom forwarding URL that we will use to tell Twilio where to find our application. <a href="https://ngrok.com/download">Download ngrok</a> and run it in your terminal on port 8000</p><pre class="crayon-plain-tag">./ngrok http 8000</pre><p>Next we need to point a phone number at our app. Open the phone number configuration screen in your <a href="http://twilio.com/console">Twilio console</a>. Scroll down to the &#8220;a message comes in&#8221; field. Before entering your URL you should see:</p>
<p><img class="&quot; aligncenter" style="width: 600.00px; height: 186.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/12/hPHPlOfLmVM56950uneB_1SZ3udWYiVLhtrz8mkhTK96lhuAt40qjLL81r_0q-hEcsL31GulmLyI5hrf0KFJQDtSsOAyptnrIUcGySCLEL_Bis4md9q2Sun3Fy5mW-G9xJJvFSi2.png" alt="message-comes-in.png" /></p>
<p>Punch in the URL for our message route that was generated by ngrok. It should look like <code>http://your-ngrok-url.ngrok.io/sms</code>.</p>
<p>Click save, make sure your application is running and text your number to get a response.</p>
<h3 id="h.cmh6bve3wox4" class="c1">Rollin&#8217; around at the speed of sound</h3>
<p>That should be all you need to get started building apps with Sanic. You are officially part of the revolution of <a href="https://www.youtube.com/watch?v=Eo_gJwXxshQ">meme-driven development</a>.</p>
<p>Of course, Sanic is a brand new framework so expect improvements and changes in the near future. You can even <a href="https://github.com/channelcat/sanic">contribute to its open source repository</a> and help build it yourself.</p>
<p>Feel free to drop me a line if you have any question or just want to show off what you built:</p>
<ul style="padding-left: 36px;">
<li>Email: sagnew@twilio.com</li>
<li>Twitter: <a href="http://twitter.com/sagnewshreds">@Sagnewshreds</a></li>
<li>Github: <a href="https://github.com/sagnew">Sagnew</a></li>
<li>Twitch (streaming live code): <a href="http://www.twitch.tv/sagnewshreds">Sagnewshreds</a></li>
</ul>
<p><a href="https://twilioinc.wpengine.com/2016/12/getting-started-with-sanic-the-asynchronous-uvloop-based-web-framework-for-python-3-5.html">Getting started with Sanic: the asynchronous, uvloop based web framework for Python 3.5+</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2016/12/getting-started-with-sanic-the-asynchronous-uvloop-based-web-framework-for-python-3-5.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>SMS Versenden mit Node.js und Twilio</title>
		<link>https://twilioinc.wpengine.com/2016/12/sms-versenden-mit-node-js-und-twilio.html</link>
		<comments>https://twilioinc.wpengine.com/2016/12/sms-versenden-mit-node-js-und-twilio.html#respond</comments>
		<pubDate>Tue, 20 Dec 2016 12:01:53 +0000</pubDate>
		<dc:creator><![CDATA[Dominik Kundel]]></dc:creator>
				<category><![CDATA[Developers Drawing The Owl]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=19344</guid>
		<description><![CDATA[<p>Mit nur 16 Zeilen Code (inklusive Leerzeilen) kannst du SMS mit Twilio verschicken: [crayon-58794685b6cb8910724440/] Soweit so gut. Aber bevor du jetzt den Code direkt in dein Projekt kopierst, müssen wir noch ein paar Schritte erledigen, damit der Code auch funktioniert. Was Muss Ich Tun? Bevor du anfangen kannst, SMS mit Twilio zu versenden, musst du zuerst einen Twilio Account erstellen. Du kannst dich hier kostenlos anmelden. Da wir... <a class="read-more" href="https://twilioinc.wpengine.com/2016/12/sms-versenden-mit-node-js-und-twilio.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2016/12/sms-versenden-mit-node-js-und-twilio.html">SMS Versenden mit Node.js und Twilio</a></p>]]></description>
				<content:encoded><![CDATA[<p>Mit nur 16 Zeilen Code (inklusive Leerzeilen) kannst du <a href="https://www.twilio.com/docs/api/rest/sending-messages">SMS mit Twilio verschicken</a>:</p><pre class="crayon-plain-tag">var client = require('twilio')(
  process.env.TWILIO_ACCOUNT_SID,
  process.env.TWILIO_AUTH_TOKEN
);
 
client.messages.create({
  from: 'DEINE_TWILIO_NUMMER',
  to: 'DEINE_EIGENE_NUMMER',
  body: 'Du hast gerade deine erste SMS von Node.js mit Twilio verschickt!'
}, function (err, message) {
  if(err) {
    console.error(err.message);
  } else {
    console.log('SMS versandt!');
  }
});</pre><p>Soweit so gut. Aber bevor du jetzt den Code direkt in dein Projekt kopierst, müssen wir noch ein paar Schritte erledigen, damit der Code auch funktioniert.</p>
<h3 id="h.jftm1yvm8trf" class="c1 c4">Was Muss Ich Tun?</h3>
<p>Bevor du anfangen kannst, <a href="https://www.twilio.com/docs/api/rest/sending-messages">SMS mit Twilio zu versenden</a>, musst du zuerst einen Twilio Account erstellen. Du kannst dich <a href="https://www.twilio.com/try-twilio">hier kostenlos anmelden</a>.</p>
<p>Da wir die SMS mit Node.js verschicken werden, brauchen wir zusätzlich Node.js mit <a href="https://npmjs.com"><code>npm</code></a> auf unserem System. Du kannst <a href="https://nodejs.org">Node.js kostenlos hier herunterladen</a>.</p>
<p>Als letzter Schritt brauchst du eine Twilio <a href="https://www.twilio.com/console/phone-numbers/search/buy/results?Country=DE&amp;searchType=number&amp;capability%5B%5D=sms">SMS-kompatible Telefonnummer</a>. Diese kannst du dir in der <a href="https://www.twilio.com/console/phone-numbers/search">Twilio Console</a> zuweisen.</p>
<h3 id="h.dgsnrb3fmxjp" class="c1 c4">Zeit für Code!</h3>
<p>Okay, jetzt wo wir alle Voraussetzungen erfüllt haben, können wir mit dem Programmieren anfangen.</p>
<p><img class="&quot; aligncenter" style="width: 624.00px; height: 352.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title="" src="https://twilioinc.wpengine.com/wp-content/uploads/2016/12/1IqMT1hOnqX2pXSOCMRnMjjSB7xll4FdCg7jP7BInYFlEO7UeV7wnBV4D0jy74fmoFUtPJUOJlViWCWQmY9ZJw8rP2DCVH6rgsO8BAU8394Q6FUU2vuXvLpUy8bR_abxjR-_h98E-1.png" alt="ausgehende-sms.png" /></p>
<p>Eine SMS mit Twilio zu verschicken, ist so einfach, wie einen HTTP Request an die <a href="https://www.twilio.com/docs/api/rest/sending-messages#post"><code>/Messages</code></a> Ressource der <a href="https://www.twilio.com/docs/api/rest">Twilio REST API</a> zu machen. Wir können das Ganze entweder manuell machen oder mit einer unserer <a href="https://www.twilio.com/docs/libraries">Helper Libraries</a>. In dem oben stehenden Code benutzen wir die <a href="https://www.twilio.com/docs/libraries/node">Node.js Twilio Hilfsbibliothek</a>. Installiere die Bibliothek mit <code>npm</code> in dem Ordner deines Projekts:</p><pre class="crayon-plain-tag">npm install twilio</pre><p>Als nächstes erstelle eine Datei mit dem Namen <code>sms.js</code> innerhalb deines Ordners und füge die folgenden Zeilen hinzu:</p><pre class="crayon-plain-tag">var client = require('twilio')(
  process.env.TWILIO_ACCOUNT_SID,
  process.env.TWILIO_AUTH_TOKEN
);</pre><p>Diese Zeilen erstellen eine neue <code>Twilio REST Client</code> Instanz. Die beiden Argumente, die wir zu der Initialisierung geben, sind die <a href="https://support.twilio.com/hc/en-us/articles/223136027-Auth-Tokens-and-how-to-change-them">Zugangsdaten für deinen Twilio Account</a>. Du kannst sie entweder direkt als Strings dort einfügen oder wie in dem obigen Code als Umgebungsvariabeln <code>TWILIO_ACCOUNT_SID</code> und <code>TWILIO_AUTH_TOKEN</code> speichern. Du findest diese Zugangsdaten in der <a href="https://www.twilio.com/console">Twilio Console</a>. Du findest mehr über das Setzen von Umgebungsvariabeln in diesem <a href="https://www.techjunkie.com/environment-variables-windows-10/">Tutorial für Windows</a> und <a href="https://codewithintent.com/how-to-setup-os-x-el-capitan-environment-variables-create-read-update-delete/">hier für macOS</a>.</p>
<p>Jetzt wo wir eine Twilio REST Client Instanz erstellt haben, können wir die eigentliche SMS verschicken. Füge dafür diesen Code unter deinem bisherigen Code hinzu:</p><pre class="crayon-plain-tag">client.messages.create({
  from: 'DEINE_TWILIO_NUMMER',
  to: 'DEINE_EIGENE_NUMMER',
  body: 'Du hast gerade deine erste SMS von Node.js mit Twilio verschickt!'
}, function (err, message) {
  if(err) {
    console.error(err.message);
  } else {
    console.log('SMS versandt!');
  }
});</pre><p>Stelle dabei sicher, dass du <code>DEINE_TWILIO_NUMMER</code> mit deiner eigentlichen Twilio Telefonnummer ersetzt und <code>DEINE_EIGENE_NUMMER</code> mit der jeweiligen Telefonnummer ersetzt, an die du die SMS versenden möchtest. Während dein Account in einer Trial ist, kannst du allerdings nur an deine eigene Nummer SMS versenden.</p>
<p>Das letzte, dass du machen musst, ist die Datei zu speichern und auszuführen. Führe dazu die folgende Zeile in deinem Projekt aus:</p><pre class="crayon-plain-tag">node sms.js</pre><p>Das war&#8217;s! Je nach Netzempfang solltest du dann auch unmittelbar die SMS auf deinem Handy empfangen.</p>
<h3 id="h.bukeukcuyh6o" class="c1 c4">Und Nu&#8217;?</h3>
<p>SMS zu verschicken, ist nur eine von vielen Dingen, die du mit Twilio erledigen kannst, um Kommunikation direkt in deine Apps einzubauen. Hier sind ein paar Beispiele (auf Englisch), was du alles mit Twilio machen kannst:</p>
<ul style="padding-left: 36px;">
<li><a href="https://www.twilio.com/docs/guides/sms/how-to-receive-and-reply-in-node-js">SMS Emfangen und Beantworten in Node.js</a></li>
<li><a href="https://www.twilio.com/docs/guides/voice/how-to-make-outbound-phone-calls-in-python">Telefonanrufe Starten mit Python</a></li>
</ul>
<p>Baust du etwas Cooles, über das du dich gerne unterhalten willst oder hast du irgendwelche Fragen zu Twilio? Du kannst mir gerne jederzeit eine E-Mail an <a href="https://twitter.com/dkundel">@dkundel</a>) schicken oder mir bei Twitter schreiben: <a href="https://twitter.com/dkundel">@dkundel</a>.</p>
<p><a href="https://twilioinc.wpengine.com/2016/12/sms-versenden-mit-node-js-und-twilio.html">SMS Versenden mit Node.js und Twilio</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2016/12/sms-versenden-mit-node-js-und-twilio.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Create an SMS bot on AWS Lambda with Claudia.js</title>
		<link>https://twilioinc.wpengine.com/2016/12/create-an-sms-bot-on-aws-lambda-with-claudia-js.html</link>
		<comments>https://twilioinc.wpengine.com/2016/12/create-an-sms-bot-on-aws-lambda-with-claudia-js.html#respond</comments>
		<pubDate>Mon, 19 Dec 2016 19:22:34 +0000</pubDate>
		<dc:creator><![CDATA[Phil Nash]]></dc:creator>
				<category><![CDATA[Code, Tutorials and Hacks]]></category>
		<category><![CDATA[Amazon Lambda]]></category>
		<category><![CDATA[bots]]></category>
		<category><![CDATA[Claudia.js]]></category>
		<category><![CDATA[Node.js]]></category>
		<category><![CDATA[SMS]]></category>

		<guid isPermaLink="false">https://twilioinc.wpengine.com/?p=19332</guid>
		<description><![CDATA[<p>SMS chat bots and AWS Lambda go well together if you want to build a bot that can reach people all over the world without worrying about your underlying infrastructure. In just a few steps we&#8217;re going to see how easy it is to deploy a Node.js chat bot on Lambda using Claudia.js. What is Claudia.js? I&#8217;ve always liked the idea of Amazon&#8217;s Lambda service, but the first time... <a class="read-more" href="https://twilioinc.wpengine.com/2016/12/create-an-sms-bot-on-aws-lambda-with-claudia-js.html">Read More</a></p><p><a href="https://twilioinc.wpengine.com/2016/12/create-an-sms-bot-on-aws-lambda-with-claudia-js.html">Create an SMS bot on AWS Lambda with Claudia.js</a></p>]]></description>
				<content:encoded><![CDATA[<p><a href="https://www.twilio.com/docs/api/rest/sending-messages">SMS</a> chat bots and <a href="https://aws.amazon.com/lambda/details/">AWS Lambda</a> go well together if you want to build a bot that can reach people all over the world without worrying about your underlying infrastructure. In just a few steps we&#8217;re going to see how easy it is to deploy a Node.js chat bot on Lambda using <a href="https://claudiajs.com/">Claudia.js</a>.</p>
<h3 id="h.vc3lmadkpd3a">What is Claudia.js?</h3>
<p>I&#8217;ve always liked the idea of Amazon&#8217;s Lambda service, but the first time I tried to use it I found the deployment process troubling. As I uploaded the zip file of my project to the AWS dashboard, <em>yes that is how you deploy to Lambda</em>, to test my work I thought to myself, &#8220;There must be a better way.&#8221;</p>
<p>Thankfully I wasn&#8217;t the only one, so tools like <a href="https://claudiajs.com/">Claudia.js</a>, <a href="https://serverless.com/">Serverless</a> and <a href="http://senecajs.org/">Seneca</a> were born. Each of them offer various features and different methods of deploying apps to Lambda. I was recently drawn to Claudia.js not only because it makes deploying applications to Lambda easier, but because it comes with Claudia Bot Builder, a framework that abstracts away the differences between a host of bot platforms. Together they make it really easy to write and deploy bots to Lambda, so let&#8217;s build an SMS bot to see how it all works.</p>
<h3 id="h.w58tep42dcdy">Before we start</h3>
<p>There are a few things we&#8217;re going to need to get this project off the ground</p>
<ul>
<li>
A <a href="https://www.twilio.com/try-twilio">Twilio account</a> and a <a href="https://www.twilio.com/console/phone-numbers/incoming">Twilio phone number</a> that can receive SMS messages
</li>
<li>
An <a href="https://aws.amazon.com/">AWS account</a>
</li>
<li>
Node.js v4.3.2, the version that runs on Lambda (you can install multiple versions of Node.js using <a href="https://github.com/creationix/nvm/blob/master/README.markdown">nvm</a>)
</li>
</ul>
<p>Don&#8217;t worry if you&#8217;re just trying this out, both Twilio and AWS have free tiers that you can use to build this bot.</p>
<p>Now we need to prepare AWS for use with Claudia.js.</p>
<h3 id="h.4qux07plq4nk">Setting up AWS</h3>
<p>Claudia.js will need access to your AWS account, so it&#8217;s best to create a profile that only contains the permissions that Claudia.js needs to deploy our bot. To do so, go to the <a href="https://console.aws.amazon.com/iam/home?region=us-east-1#users">Users section</a> of the <a href="https://console.aws.amazon.com/iam/home?region=us-east-1#home">Identity &#038; Access Management service</a>. Create a new user and give it a recognisable name.</p>
<p><img alt="Fill in a user name in the User name field and check the box for Programmatic Access." src="https://twilioinc.wpengine.com/wp-content/uploads/2016/12/adiPpSZuf_HcqLGgaD0IVnVk5slYXXtc2CeX2MnNHY6r_boqGzhOUEQSy471q-ACW8Ci9GjSqiUUTLDu1dt39dPLyMEOus3FWirdzuSBgdp9Xn5YJQk1OKPG0gVGTdoADre5IOc.png" class="aligncenter"></p>
<p>Make sure &#8220;Programmatic Access&#8221; is checked. Click &#8220;Next: Permissions&#8221;. On the next screen you will be able to select the permissions the user has. We need three permissions for this user: AWSLambdaFullAccess, IAMFullAccess and AmazonAPIGatewayAdministrator.</p>
<p><img alt="Choose 'Attach existing policies directly' and use the search box to find the three permissions we need to add to the user." src="https://twilioinc.wpengine.com/wp-content/uploads/2016/12/nylN-HHm1D8oAqROAPXJsl6BxIFu1Gs3i8uLIyDcJy6wekEhu8m2zdjcgTBHgwVzMqner3SOn4NVHZ_AvRRpFHP6wr__YVKybr0zdS7FDfeDKF3FNXxmiaJ1OhzvtblZnCJCtw.png" class="aligncenter"> </p>
<p>Click &#8220;Next: Review&#8221; to review your user and ensure they have the correct permissions, click &#8220;Create User&#8221;. You should see the success screen and your new user&#8217;s Access Key ID and Secret Access Key. Don&#8217;t move on from this screen yet, these credentials will only be shown to you once!</p>
<p><img alt="The success screen shows the user credentials for your new user." src="https://twilioinc.wpengine.com/wp-content/uploads/2016/12/dmT87Nne1RSCEqqb582JkkKRm148BZjFv_6b2c6DgqsmJxMXYG7YNtEQQDnTfu-4ImVcSPECXjrvfNFhhBGoAU4EcxP4WgwB0bmvDmH14yStAjg_YUmG-hc2HDAC46Au5SHLe1s.png" class="aligncenter"></p>
<p>Claudia.js uses the AWS Node.js module so we need to store the credentials in the conventional location; either <code>~/.aws/credentials</code> on Mac or Linux and <code>C:\Users\USER_NAME\.awscredentials</code> on Windows. If you don&#8217;t already have a credentials file, create one and add the following:</p>
<p></p><pre class="crayon-plain-tag">[claudia]
aws_access_key_id = YOUR_ACCESS_KEY_ID
aws_secret_access_key = YOUR_SECRET_ACCESS_KEY</pre><p></p>
<p>We&#8217;ve now setup a profile called &#8220;claudia&#8221; that we can use with Claudia.js.</p>
<p>If you&#8217;d like to learn more, there is an in depth <a href="http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/configuring-the-jssdk.html">tutorial on setting permissions up for the AWS Node.js SDK in the AWS documentation</a>.</p>
<h3 id="h.9glhh0b6g1a6">Creating our bot</h3>
<p>Now that we&#8217;ve set up the permissions for Claudia.js we can start our bot. First up jump into the command line, create a directory to keep the bot&#8217;s code in and and start a new Node.js project:</p>
<p></p><pre class="crayon-plain-tag">$ mkdir quote-bot
$ cd quote-bot
$ npm init --yes</pre><p></p>
<p>Not seen <code>--yes</code> before? It accepts all the defaults from <code>npm init</code> without you have to tap enter the whole way through!</p>
<p>Install Claudia.js as a development dependency.</p>
<p></p><pre class="crayon-plain-tag">$ npm install claudia --save-dev</pre><p></p>
<p>We&#8217;ll also need the Claudia Bot Builder as a dependency.</p>
<p></p><pre class="crayon-plain-tag">$ npm install claudia-bot-builder --save</pre><p></p>
<p>Create a file called <code>bot.js</code> and open the project in your favourite editor.</p>
<h4 id="h.a60q81gz48p2">Some helpful npm scripts</h4>
<p>Before we write our bot, we&#8217;re going to put a couple of helpful npm scripts in place. We have installed Claudia.js as a development dependency and we need to run the executable, so npm scripts is the easiest place to do that. Open <code>package.json</code> and add the following to the <code>scripts</code> section:</p>
<p></p><pre class="crayon-plain-tag">  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",
    "create": "claudia create --region us-east-1 --api-module bot --profile claudia",
    "update": "claudia update --profile claudia"
  },</pre><p></p>
<p>The create script will do all our initial setup, adding the Lambda function and configuring AWS API Gateway so that we have URLs for the bot platforms&#8217; webhooks. If you named your AWS profile differently in <code>~/.aws/credentials</code> use that as the <code>--profile</code> argument.</p>
<p>The update script will deploy updates to your bot. Enough of this config, let&#8217;s write a bot!</p>
<h3 id="h.q40tjl2id6n">Writing the bot</h3>
<p>Open up <code>bot.js</code> and start by requiring the Claudia Bot Builder.</p>
<p></p><pre class="crayon-plain-tag">// bot.js
var botBuilder = require('claudia-bot-builder');</pre><p></p>
<p>Then we pass a handler function to the <code>botBuilder</code> which will deal with incoming messages.</p>
<p></p><pre class="crayon-plain-tag">// bot.js
var botBuilder = require('claudia-bot-builder');

var bot = botBuilder(function(message) {
  return 'Hello world!';
});</pre><p></p>
<p>Then export the <code>bot</code>.</p>
<p></p><pre class="crayon-plain-tag">// bot.js
var botBuilder = require('claudia-bot-builder');

var bot = botBuilder(function(message) {
  return 'Hello world!';
});

module.exports = bot;</pre><p></p>
<p>And that&#8217;s it! We&#8217;ve created a bot that will respond to every incoming message with &#8220;Hello world!&#8221;.</p>
<p>Ok, that&#8217;s a pretty boring bot. Let&#8217;s have it do something a bit more interesting. I found the simplicity of building my first bot with Claudia so inspirational I wanted to share some more inspiration with you. I called this bot quote-bot, so we&#8217;re going to have it return inspirational quotes when you ask for one, otherwise it will return a greeting.</p>
<p>We&#8217;ll first install a couple more dependencies:</p>
<p></p><pre class="crayon-plain-tag">$ npm install greeting node-fetch --save</pre><p></p>
<p>Let&#8217;s do a simple test to check if the incoming message wants a quote. For this we&#8217;re going to look for the string &#8220;quote&#8221; in the incoming text. For more complicated use cases, I&#8217;d start looking at natural language processing or a cognitive service like the <a href="https://www.ibm.com/watson/developercloud/conversation.html">Watson Conversation API</a>, <a href="https://www.luis.ai/">Luis</a> or <a href="https://wit.ai/">wit.ai</a>.</p>
<p>If we do need a quote, we&#8217;ll use the <a href="https://www.npmjs.com/package/node-fetch">node-fetch module</a> to look up a random quote from the <a href="http://forismatic.com/en/api/">Forismatic API</a>. For asynchronous tasks like this, Claudia Bot Builder requires us to return a Promise which later resolves to the message to respond with. If you want to learn more about Promises, including more node-fetch examples, check out this <a href="https://www.twilio.com/blog/2016/10/guide-to-javascript-promises.html">guide to Promises</a> by Dominik.</p>
<p>If we don&#8217;t ask for a quote, we&#8217;ll generate a random greeting with the <a href="https://www.npmjs.com/package/greeting">greeting module</a>.</p>
<p></p><pre class="crayon-plain-tag">// bot.js
var botBuilder = require('claudia-bot-builder');
var greeting = require('greeting');
var fetch = require('node-fetch');

var bot = botBuilder(function(message) {
  if (message.text.match(/quote/i)) {
    return fetch('http://api.forismatic.com/api/1.0/?method=getQuote&amp;format=text&amp;lang=en').then(function(res) {
      return res.text();
    });
  } else {
    return greeting.random();
  }
});

module.exports = bot;</pre><p></p>
<p>As you can see, the <code>message</code> object that is passed to our handler contains the text of the message sent to our bot. You can also get the original request sent to the endpoint with <code>message.originalRequest</code>.</p>
<h3 id="h.ow5cg764owpw">Deploying the bot</h3>
<p>We are now ready to deploy our bot. On the command line run our create script:</p>
<p></p><pre class="crayon-plain-tag">$ npm run create</pre><p></p>
<p>This is where Claudia.js is doing all the magic. It creates the Lambda function and configures the AWS API Gateway for all our potential bots. In the output at the end you can see the URLs you can use for webhooks for all the supported services.</p>
<p>We&#8217;re not quite done yet as we need to configure our bot for receiving Twilio webhooks. Run:</p>
<p></p><pre class="crayon-plain-tag">$ npm run update -- --configure-twilio-sms-bot</pre><p></p>
<p>This will update your bot, though we haven&#8217;t changed anything just yet, and finally ask for your Twilio account details. Enter your Account SID, your Auth Token (which you can find in your <a href="https://www.twilio.com/console">Twilio console</a>) and the <a href="https://www.twilio.com/console/phone-numbers/incoming">phone number</a> you want to use.</p>
<p><img alt="At the end of the script a number of URLs are produced, make sure to copy the one for Twilio." src="https://twilioinc.wpengine.com/wp-content/uploads/2016/12/dHhu1tqaAnnwdGQ8o1OLg15okEWXr2TmSMh0i0muyCvAQfusyI-7dQfRliVHxuSpdv4b2d0GSWArNMM4N1661SLLLeNfF21dbzAlTbspwkSE6Ew95i6MDtGRdBstjB2m7QWFldc.png" class="aligncenter"></p>
<p>Take the webhook URL that the script outputs and enter it into the webhook field for the messaging settings of your Twilio phone number:<br />
 <br />
<img alt="In the Twilio console, edit your phone number and enter the Twilio URL from Claudia into the webhook field for messaging." src="https://twilioinc.wpengine.com/wp-content/uploads/2016/12/bJ7YJJgAXfkJHSp5B8ckR8f2JLiWYtH319RJ1tyEZ7XMmFJ8px2xavxyVaxHD5_mhjUnqbwB2GIljO_JXHA8G4NADE9G5lgkZSSk6zP-I6VX-tIr02Pk4rIWlBk5wWvMZ8XXJQ4.png" class="aligncenter"></p>
<p>Everything is in place to send your first message to your bot. Grab your phone, enter your number and ask for a quote.</p>
<p><img alt="Now when you send an SMS to your number it will respond with a greeting. If you ask for a quote you will receive back an inspirational quote." src="https://twilioinc.wpengine.com/wp-content/uploads/2016/12/saWqSx4ESV5y-kvXB1wvVqx3mNBtmmDY-YIE-lAfXTemfQ-JzC-2zHo_de2dvnZH2VF5omWrQyTp_MZIvC8gyAMawoAfELcEvtwKTcFPAwTUwh2nPrH1-6bXO5VKESr5cci-Uw.png" class="aligncenter"></p>
<p>Want to give this a go yourself? Send an SMS message to my bot at +447481345328 if you&#8217;re in the UK or  +12016903488 if you&#8217;re in the US.</p>
<h3 id="h.37e3p0bi1xf1">Bots, bots, bots</h3>
<p>That is all you need to do to get a bot running on AWS Lambda with Claudia.js. If you want to check out the complete code for this, take a look at the <a href="https://github.com/philnash/quote-bot">GitHub repo</a> for this project.</p>
<p>Now you can create any bot you fancy, run it on AWS Lambda and have the power of Node.js and a world of APIs and AI at your fingertips.</p>
<p>Why not try hooking your bot up to another service as well? Claudia Bot Builder supports Twilio as well as Facebook Messenger, Slack, Telegram, Skype, Kik and GroupMe.</p>
<p>What do you think about Claudia.js and AWS Lambda? Have you built a bot of your own yet and what did you use? Drop me a note in the comments or hit me up on <a href="mailto:philnash@twilio.com">email</a> or <a href="https://twitter.com/philnash">Twitter</a>.</p>
<p><a href="https://twilioinc.wpengine.com/2016/12/create-an-sms-bot-on-aws-lambda-with-claudia-js.html">Create an SMS bot on AWS Lambda with Claudia.js</a></p>]]></content:encoded>
			<wfw:commentRss>https://twilioinc.wpengine.com/2016/12/create-an-sms-bot-on-aws-lambda-with-claudia-js.html/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
